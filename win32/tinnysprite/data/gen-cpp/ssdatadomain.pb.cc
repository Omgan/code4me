// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssdatadomain.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SSDataDomain {

namespace {

const ::google::protobuf::Descriptor* SSAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSContact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSContact_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSContactEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSContactEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSClientState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSClientState_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSMessageState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSMessageState_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSSessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSSessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateAccountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateAccountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePasswordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePasswordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePasswordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePasswordResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserExistRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserExistRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserExistResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserExistResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetProfileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetProfileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetProfileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetProfileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetProfileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetProfileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetProfileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetProfileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FollowRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FollowRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FollowResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FollowResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelFollowRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelFollowRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelFollowResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelFollowResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFollowingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFollowingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFollowingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFollowingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFollowerCountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFollowerCountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFollowerCountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFollowerCountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFollowerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFollowerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFollowerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFollowerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInvitingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInvitingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInvitingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInvitingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInviterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInviterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInviterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInviterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetSessionInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetSessionInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetSessionInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetSessionInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSessionInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSessionInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSessionInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSessionInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMessageByTimestampRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMessageByTimestampRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMessageByTimestampResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMessageByTimestampResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendPublicMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendPublicMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendPublicMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendPublicMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFavoriteMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFavoriteMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFavoriteMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFavoriteMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddContactRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddContactRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddContactResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddContactResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveContactRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveContactRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveContactResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveContactResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetContactRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetContactRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetContactResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetContactResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAndUpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAndUpdateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAndUpdateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAndUpdateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAndDeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAndDeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAndDeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAndDeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddLogicNodeSubscribeInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddLogicNodeSubscribeInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddLogicNodeSubscribeInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddLogicNodeSubscribeInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveLogicNodeSubscribeInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveLogicNodeSubscribeInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveLogicNodeSubscribeInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveLogicNodeSubscribeInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLogicNodeSubscribeInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLogicNodeSubscribeInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLogicNodeSubscribeInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLogicNodeSubscribeInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFollowerWithProfileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFollowerWithProfileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFollowerWithProfileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFollowerWithProfileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFollowingWithProfileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFollowingWithProfileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFollowingWithProfileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFollowingWithProfileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetContactExRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetContactExRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetContactExResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetContactExResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SSGender_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SSBOX_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SSContentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceCode_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* SSDataDomainSvc_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ssdatadomain_2eproto() {
  protobuf_AddDesc_ssdatadomain_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ssdatadomain.proto");
  GOOGLE_CHECK(file != NULL);
  SSAccount_descriptor_ = file->message_type(0);
  static const int SSAccount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSAccount, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSAccount, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSAccount, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSAccount, binary_),
  };
  SSAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSAccount_descriptor_,
      SSAccount::default_instance_,
      SSAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSAccount));
  SSProfile_descriptor_ = file->message_type(1);
  static const int SSProfile_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSProfile, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSProfile, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSProfile, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSProfile, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSProfile, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSProfile, icon_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSProfile, introduction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSProfile, binary_),
  };
  SSProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSProfile_descriptor_,
      SSProfile::default_instance_,
      SSProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSProfile));
  SSContact_descriptor_ = file->message_type(2);
  static const int SSContact_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContact, contactid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContact, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContact, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContact, alias_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContact, binary_),
  };
  SSContact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSContact_descriptor_,
      SSContact::default_instance_,
      SSContact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSContact));
  SSContactEx_descriptor_ = file->message_type(3);
  static const int SSContactEx_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, contactid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, is_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, is_following_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, alias_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, icon_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, introduction_),
  };
  SSContactEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSContactEx_descriptor_,
      SSContactEx::default_instance_,
      SSContactEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSContactEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSContactEx));
  SSGroup_descriptor_ = file->message_type(4);
  static const int SSGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSGroup, system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSGroup, binary_),
  };
  SSGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSGroup_descriptor_,
      SSGroup::default_instance_,
      SSGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSGroup));
  SSMember_descriptor_ = file->message_type(5);
  static const int SSMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMember, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMember, members_),
  };
  SSMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSMember_descriptor_,
      SSMember::default_instance_,
      SSMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSMember));
  SSClientState_descriptor_ = file->message_type(6);
  static const int SSClientState_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, last_send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, last_recieved_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, last_fetch_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, last_seq_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, last_client_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, sc_last_user_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, sc_last_group_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, sc_last_contact_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, sc_last_member_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, sc_last_follow_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, sc_last_send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, sc_last_recv_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, sc_last_favo_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, binary_),
  };
  SSClientState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSClientState_descriptor_,
      SSClientState::default_instance_,
      SSClientState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSClientState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSClientState));
  SSMessageState_descriptor_ = file->message_type(7);
  static const int SSMessageState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessageState, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessageState, seq_number_),
  };
  SSMessageState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSMessageState_descriptor_,
      SSMessageState::default_instance_,
      SSMessageState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessageState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessageState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSMessageState));
  SSSessionInfo_descriptor_ = file->message_type(8);
  static const int SSSessionInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSSessionInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSSessionInfo, client_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSSessionInfo, message_state_),
  };
  SSSessionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSSessionInfo_descriptor_,
      SSSessionInfo::default_instance_,
      SSSessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSSessionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSSessionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSSessionInfo));
  SSMessage_descriptor_ = file->message_type(9);
  static const int SSMessage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessage, seq_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessage, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessage, recievers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessage, root_msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessage, parent_msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessage, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessage, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessage, content_),
  };
  SSMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSMessage_descriptor_,
      SSMessage::default_instance_,
      SSMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSMessage));
  ServiceResult_descriptor_ = file->message_type(10);
  static const int ServiceResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResult, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResult, message_),
  };
  ServiceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceResult_descriptor_,
      ServiceResult::default_instance_,
      ServiceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceResult));
  CreateAccountRequest_descriptor_ = file->message_type(11);
  static const int CreateAccountRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountRequest, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountRequest, nickname_),
  };
  CreateAccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateAccountRequest_descriptor_,
      CreateAccountRequest::default_instance_,
      CreateAccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateAccountRequest));
  CreateAccountResponse_descriptor_ = file->message_type(12);
  static const int CreateAccountResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountResponse, result_),
  };
  CreateAccountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateAccountResponse_descriptor_,
      CreateAccountResponse::default_instance_,
      CreateAccountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateAccountResponse));
  GetAccountRequest_descriptor_ = file->message_type(13);
  static const int GetAccountRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, userid_),
  };
  GetAccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountRequest_descriptor_,
      GetAccountRequest::default_instance_,
      GetAccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountRequest));
  GetAccountResponse_descriptor_ = file->message_type(14);
  static const int GetAccountResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, account_),
  };
  GetAccountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountResponse_descriptor_,
      GetAccountResponse::default_instance_,
      GetAccountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountResponse));
  ChangePasswordRequest_descriptor_ = file->message_type(15);
  static const int ChangePasswordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePasswordRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePasswordRequest, new_password_),
  };
  ChangePasswordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePasswordRequest_descriptor_,
      ChangePasswordRequest::default_instance_,
      ChangePasswordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePasswordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePasswordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePasswordRequest));
  ChangePasswordResponse_descriptor_ = file->message_type(16);
  static const int ChangePasswordResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePasswordResponse, result_),
  };
  ChangePasswordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePasswordResponse_descriptor_,
      ChangePasswordResponse::default_instance_,
      ChangePasswordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePasswordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePasswordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePasswordResponse));
  UserExistRequest_descriptor_ = file->message_type(17);
  static const int UserExistRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExistRequest, userid_list_),
  };
  UserExistRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserExistRequest_descriptor_,
      UserExistRequest::default_instance_,
      UserExistRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExistRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExistRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserExistRequest));
  UserExistResponse_descriptor_ = file->message_type(18);
  static const int UserExistResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExistResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExistResponse, exist_userid_list_),
  };
  UserExistResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserExistResponse_descriptor_,
      UserExistResponse::default_instance_,
      UserExistResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExistResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExistResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserExistResponse));
  SetProfileRequest_descriptor_ = file->message_type(19);
  static const int SetProfileRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProfileRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProfileRequest, profile_),
  };
  SetProfileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetProfileRequest_descriptor_,
      SetProfileRequest::default_instance_,
      SetProfileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProfileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProfileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetProfileRequest));
  SetProfileResponse_descriptor_ = file->message_type(20);
  static const int SetProfileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProfileResponse, result_),
  };
  SetProfileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetProfileResponse_descriptor_,
      SetProfileResponse::default_instance_,
      SetProfileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProfileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetProfileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetProfileResponse));
  GetProfileRequest_descriptor_ = file->message_type(21);
  static const int GetProfileRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProfileRequest, userid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProfileRequest, flag_),
  };
  GetProfileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetProfileRequest_descriptor_,
      GetProfileRequest::default_instance_,
      GetProfileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProfileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProfileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetProfileRequest));
  GetProfileResponse_descriptor_ = file->message_type(22);
  static const int GetProfileResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProfileResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProfileResponse, profile_list_),
  };
  GetProfileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetProfileResponse_descriptor_,
      GetProfileResponse::default_instance_,
      GetProfileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProfileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProfileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetProfileResponse));
  FollowRequest_descriptor_ = file->message_type(23);
  static const int FollowRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowRequest, follower_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowRequest, following_userid_list_),
  };
  FollowRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FollowRequest_descriptor_,
      FollowRequest::default_instance_,
      FollowRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FollowRequest));
  FollowResponse_descriptor_ = file->message_type(24);
  static const int FollowResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowResponse, result_),
  };
  FollowResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FollowResponse_descriptor_,
      FollowResponse::default_instance_,
      FollowResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FollowResponse));
  CancelFollowRequest_descriptor_ = file->message_type(25);
  static const int CancelFollowRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelFollowRequest, follower_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelFollowRequest, following_userid_list_),
  };
  CancelFollowRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelFollowRequest_descriptor_,
      CancelFollowRequest::default_instance_,
      CancelFollowRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelFollowRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelFollowRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelFollowRequest));
  CancelFollowResponse_descriptor_ = file->message_type(26);
  static const int CancelFollowResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelFollowResponse, result_),
  };
  CancelFollowResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelFollowResponse_descriptor_,
      CancelFollowResponse::default_instance_,
      CancelFollowResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelFollowResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelFollowResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelFollowResponse));
  GetFollowingRequest_descriptor_ = file->message_type(27);
  static const int GetFollowingRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingRequest, userid_),
  };
  GetFollowingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFollowingRequest_descriptor_,
      GetFollowingRequest::default_instance_,
      GetFollowingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFollowingRequest));
  GetFollowingResponse_descriptor_ = file->message_type(28);
  static const int GetFollowingResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingResponse, following_userid_list_),
  };
  GetFollowingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFollowingResponse_descriptor_,
      GetFollowingResponse::default_instance_,
      GetFollowingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFollowingResponse));
  GetFollowerCountRequest_descriptor_ = file->message_type(29);
  static const int GetFollowerCountRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerCountRequest, userid_),
  };
  GetFollowerCountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFollowerCountRequest_descriptor_,
      GetFollowerCountRequest::default_instance_,
      GetFollowerCountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerCountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerCountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFollowerCountRequest));
  GetFollowerCountResponse_descriptor_ = file->message_type(30);
  static const int GetFollowerCountResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerCountResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerCountResponse, count_),
  };
  GetFollowerCountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFollowerCountResponse_descriptor_,
      GetFollowerCountResponse::default_instance_,
      GetFollowerCountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerCountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerCountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFollowerCountResponse));
  GetFollowerRequest_descriptor_ = file->message_type(31);
  static const int GetFollowerRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerRequest, cursor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerRequest, count_),
  };
  GetFollowerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFollowerRequest_descriptor_,
      GetFollowerRequest::default_instance_,
      GetFollowerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFollowerRequest));
  GetFollowerResponse_descriptor_ = file->message_type(32);
  static const int GetFollowerResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerResponse, follower_userid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerResponse, eol_),
  };
  GetFollowerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFollowerResponse_descriptor_,
      GetFollowerResponse::default_instance_,
      GetFollowerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFollowerResponse));
  InviteRequest_descriptor_ = file->message_type(33);
  static const int InviteRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteRequest, inviter_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteRequest, inviting_userid_list_),
  };
  InviteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteRequest_descriptor_,
      InviteRequest::default_instance_,
      InviteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteRequest));
  InviteResponse_descriptor_ = file->message_type(34);
  static const int InviteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteResponse, result_),
  };
  InviteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteResponse_descriptor_,
      InviteResponse::default_instance_,
      InviteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteResponse));
  GetInvitingRequest_descriptor_ = file->message_type(35);
  static const int GetInvitingRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInvitingRequest, userid_),
  };
  GetInvitingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInvitingRequest_descriptor_,
      GetInvitingRequest::default_instance_,
      GetInvitingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInvitingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInvitingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInvitingRequest));
  GetInvitingResponse_descriptor_ = file->message_type(36);
  static const int GetInvitingResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInvitingResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInvitingResponse, inviting_userid_list_),
  };
  GetInvitingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInvitingResponse_descriptor_,
      GetInvitingResponse::default_instance_,
      GetInvitingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInvitingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInvitingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInvitingResponse));
  GetInviterRequest_descriptor_ = file->message_type(37);
  static const int GetInviterRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviterRequest, userid_),
  };
  GetInviterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInviterRequest_descriptor_,
      GetInviterRequest::default_instance_,
      GetInviterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInviterRequest));
  GetInviterResponse_descriptor_ = file->message_type(38);
  static const int GetInviterResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviterResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviterResponse, inviter_userid_list_),
  };
  GetInviterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInviterResponse_descriptor_,
      GetInviterResponse::default_instance_,
      GetInviterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInviterResponse));
  SetSessionInfoRequest_descriptor_ = file->message_type(39);
  static const int SetSessionInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSessionInfoRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSessionInfoRequest, session_info_),
  };
  SetSessionInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetSessionInfoRequest_descriptor_,
      SetSessionInfoRequest::default_instance_,
      SetSessionInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSessionInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSessionInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetSessionInfoRequest));
  SetSessionInfoResponse_descriptor_ = file->message_type(40);
  static const int SetSessionInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSessionInfoResponse, result_),
  };
  SetSessionInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetSessionInfoResponse_descriptor_,
      SetSessionInfoResponse::default_instance_,
      SetSessionInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSessionInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSessionInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetSessionInfoResponse));
  GetSessionInfoRequest_descriptor_ = file->message_type(41);
  static const int GetSessionInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionInfoRequest, userid_),
  };
  GetSessionInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSessionInfoRequest_descriptor_,
      GetSessionInfoRequest::default_instance_,
      GetSessionInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSessionInfoRequest));
  GetSessionInfoResponse_descriptor_ = file->message_type(42);
  static const int GetSessionInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionInfoResponse, session_info_),
  };
  GetSessionInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSessionInfoResponse_descriptor_,
      GetSessionInfoResponse::default_instance_,
      GetSessionInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSessionInfoResponse));
  GetMessageRequest_descriptor_ = file->message_type(43);
  static const int GetMessageRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageRequest, source_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageRequest, cursor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageRequest, count_),
  };
  GetMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMessageRequest_descriptor_,
      GetMessageRequest::default_instance_,
      GetMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMessageRequest));
  GetMessageResponse_descriptor_ = file->message_type(44);
  static const int GetMessageResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageResponse, msg_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageResponse, eol_),
  };
  GetMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMessageResponse_descriptor_,
      GetMessageResponse::default_instance_,
      GetMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMessageResponse));
  GetMessageByTimestampRequest_descriptor_ = file->message_type(45);
  static const int GetMessageByTimestampRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageByTimestampRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageByTimestampRequest, source_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageByTimestampRequest, start_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageByTimestampRequest, end_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageByTimestampRequest, count_),
  };
  GetMessageByTimestampRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMessageByTimestampRequest_descriptor_,
      GetMessageByTimestampRequest::default_instance_,
      GetMessageByTimestampRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageByTimestampRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageByTimestampRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMessageByTimestampRequest));
  GetMessageByTimestampResponse_descriptor_ = file->message_type(46);
  static const int GetMessageByTimestampResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageByTimestampResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageByTimestampResponse, msg_list_),
  };
  GetMessageByTimestampResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMessageByTimestampResponse_descriptor_,
      GetMessageByTimestampResponse::default_instance_,
      GetMessageByTimestampResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageByTimestampResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageByTimestampResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMessageByTimestampResponse));
  SendPublicMessageRequest_descriptor_ = file->message_type(47);
  static const int SendPublicMessageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPublicMessageRequest, msg_),
  };
  SendPublicMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendPublicMessageRequest_descriptor_,
      SendPublicMessageRequest::default_instance_,
      SendPublicMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPublicMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPublicMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendPublicMessageRequest));
  SendPublicMessageResponse_descriptor_ = file->message_type(48);
  static const int SendPublicMessageResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPublicMessageResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPublicMessageResponse, msgid_),
  };
  SendPublicMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendPublicMessageResponse_descriptor_,
      SendPublicMessageResponse::default_instance_,
      SendPublicMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPublicMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPublicMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendPublicMessageResponse));
  SendMessageRequest_descriptor_ = file->message_type(49);
  static const int SendMessageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, msg_),
  };
  SendMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMessageRequest_descriptor_,
      SendMessageRequest::default_instance_,
      SendMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMessageRequest));
  SendMessageResponse_descriptor_ = file->message_type(50);
  static const int SendMessageResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageResponse, msgid_),
  };
  SendMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMessageResponse_descriptor_,
      SendMessageResponse::default_instance_,
      SendMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMessageResponse));
  AddFavoriteMessageRequest_descriptor_ = file->message_type(51);
  static const int AddFavoriteMessageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavoriteMessageRequest, msg_),
  };
  AddFavoriteMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFavoriteMessageRequest_descriptor_,
      AddFavoriteMessageRequest::default_instance_,
      AddFavoriteMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavoriteMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavoriteMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFavoriteMessageRequest));
  AddFavoriteMessageResponse_descriptor_ = file->message_type(52);
  static const int AddFavoriteMessageResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavoriteMessageResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavoriteMessageResponse, msgid_),
  };
  AddFavoriteMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFavoriteMessageResponse_descriptor_,
      AddFavoriteMessageResponse::default_instance_,
      AddFavoriteMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavoriteMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFavoriteMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFavoriteMessageResponse));
  AddContactRequest_descriptor_ = file->message_type(53);
  static const int AddContactRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactRequest, contact_list_),
  };
  AddContactRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddContactRequest_descriptor_,
      AddContactRequest::default_instance_,
      AddContactRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddContactRequest));
  AddContactResponse_descriptor_ = file->message_type(54);
  static const int AddContactResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactResponse, result_),
  };
  AddContactResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddContactResponse_descriptor_,
      AddContactResponse::default_instance_,
      AddContactResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddContactResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddContactResponse));
  RemoveContactRequest_descriptor_ = file->message_type(55);
  static const int RemoveContactRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveContactRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveContactRequest, contactid_list_),
  };
  RemoveContactRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveContactRequest_descriptor_,
      RemoveContactRequest::default_instance_,
      RemoveContactRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveContactRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveContactRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveContactRequest));
  RemoveContactResponse_descriptor_ = file->message_type(56);
  static const int RemoveContactResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveContactResponse, result_),
  };
  RemoveContactResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveContactResponse_descriptor_,
      RemoveContactResponse::default_instance_,
      RemoveContactResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveContactResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveContactResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveContactResponse));
  GetContactRequest_descriptor_ = file->message_type(57);
  static const int GetContactRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactRequest, userid_),
  };
  GetContactRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetContactRequest_descriptor_,
      GetContactRequest::default_instance_,
      GetContactRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetContactRequest));
  GetContactResponse_descriptor_ = file->message_type(58);
  static const int GetContactResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactResponse, contact_list_),
  };
  GetContactResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetContactResponse_descriptor_,
      GetContactResponse::default_instance_,
      GetContactResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetContactResponse));
  AddGroupRequest_descriptor_ = file->message_type(59);
  static const int AddGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGroupRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGroupRequest, group_list_),
  };
  AddGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddGroupRequest_descriptor_,
      AddGroupRequest::default_instance_,
      AddGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddGroupRequest));
  AddGroupResponse_descriptor_ = file->message_type(60);
  static const int AddGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGroupResponse, result_),
  };
  AddGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddGroupResponse_descriptor_,
      AddGroupResponse::default_instance_,
      AddGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddGroupResponse));
  RemoveGroupRequest_descriptor_ = file->message_type(61);
  static const int RemoveGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveGroupRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveGroupRequest, groupid_list_),
  };
  RemoveGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveGroupRequest_descriptor_,
      RemoveGroupRequest::default_instance_,
      RemoveGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveGroupRequest));
  RemoveGroupResponse_descriptor_ = file->message_type(62);
  static const int RemoveGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveGroupResponse, result_),
  };
  RemoveGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveGroupResponse_descriptor_,
      RemoveGroupResponse::default_instance_,
      RemoveGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveGroupResponse));
  GetGroupRequest_descriptor_ = file->message_type(63);
  static const int GetGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupRequest, userid_),
  };
  GetGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupRequest_descriptor_,
      GetGroupRequest::default_instance_,
      GetGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupRequest));
  GetGroupResponse_descriptor_ = file->message_type(64);
  static const int GetGroupResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupResponse, group_list_),
  };
  GetGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupResponse_descriptor_,
      GetGroupResponse::default_instance_,
      GetGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupResponse));
  AddMemberRequest_descriptor_ = file->message_type(65);
  static const int AddMemberRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, member_list_),
  };
  AddMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMemberRequest_descriptor_,
      AddMemberRequest::default_instance_,
      AddMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMemberRequest));
  AddMemberResponse_descriptor_ = file->message_type(66);
  static const int AddMemberResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberResponse, result_),
  };
  AddMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMemberResponse_descriptor_,
      AddMemberResponse::default_instance_,
      AddMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMemberResponse));
  RemoveMemberRequest_descriptor_ = file->message_type(67);
  static const int RemoveMemberRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, member_list_),
  };
  RemoveMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveMemberRequest_descriptor_,
      RemoveMemberRequest::default_instance_,
      RemoveMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveMemberRequest));
  RemoveMemberResponse_descriptor_ = file->message_type(68);
  static const int RemoveMemberResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberResponse, result_),
  };
  RemoveMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveMemberResponse_descriptor_,
      RemoveMemberResponse::default_instance_,
      RemoveMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveMemberResponse));
  GetMemberRequest_descriptor_ = file->message_type(69);
  static const int GetMemberRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberRequest, userid_),
  };
  GetMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMemberRequest_descriptor_,
      GetMemberRequest::default_instance_,
      GetMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMemberRequest));
  GetMemberResponse_descriptor_ = file->message_type(70);
  static const int GetMemberResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberResponse, member_list_),
  };
  GetMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMemberResponse_descriptor_,
      GetMemberResponse::default_instance_,
      GetMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMemberResponse));
  QueryAndUpdateRequest_descriptor_ = file->message_type(71);
  static const int QueryAndUpdateRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndUpdateRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndUpdateRequest, update_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndUpdateRequest, is_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndUpdateRequest, consistency_level_),
  };
  QueryAndUpdateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAndUpdateRequest_descriptor_,
      QueryAndUpdateRequest::default_instance_,
      QueryAndUpdateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndUpdateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndUpdateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAndUpdateRequest));
  QueryAndUpdateResponse_descriptor_ = file->message_type(72);
  static const int QueryAndUpdateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndUpdateResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndUpdateResponse, value_),
  };
  QueryAndUpdateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAndUpdateResponse_descriptor_,
      QueryAndUpdateResponse::default_instance_,
      QueryAndUpdateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndUpdateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndUpdateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAndUpdateResponse));
  QueryAndDeleteRequest_descriptor_ = file->message_type(73);
  static const int QueryAndDeleteRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndDeleteRequest, key_),
  };
  QueryAndDeleteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAndDeleteRequest_descriptor_,
      QueryAndDeleteRequest::default_instance_,
      QueryAndDeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndDeleteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndDeleteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAndDeleteRequest));
  QueryAndDeleteResponse_descriptor_ = file->message_type(74);
  static const int QueryAndDeleteResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndDeleteResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndDeleteResponse, value_),
  };
  QueryAndDeleteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAndDeleteResponse_descriptor_,
      QueryAndDeleteResponse::default_instance_,
      QueryAndDeleteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndDeleteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAndDeleteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAndDeleteResponse));
  AddLogicNodeSubscribeInfoRequest_descriptor_ = file->message_type(75);
  static const int AddLogicNodeSubscribeInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLogicNodeSubscribeInfoRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLogicNodeSubscribeInfoRequest, logic_node_list_),
  };
  AddLogicNodeSubscribeInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddLogicNodeSubscribeInfoRequest_descriptor_,
      AddLogicNodeSubscribeInfoRequest::default_instance_,
      AddLogicNodeSubscribeInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLogicNodeSubscribeInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLogicNodeSubscribeInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddLogicNodeSubscribeInfoRequest));
  AddLogicNodeSubscribeInfoResponse_descriptor_ = file->message_type(76);
  static const int AddLogicNodeSubscribeInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLogicNodeSubscribeInfoResponse, result_),
  };
  AddLogicNodeSubscribeInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddLogicNodeSubscribeInfoResponse_descriptor_,
      AddLogicNodeSubscribeInfoResponse::default_instance_,
      AddLogicNodeSubscribeInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLogicNodeSubscribeInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddLogicNodeSubscribeInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddLogicNodeSubscribeInfoResponse));
  RemoveLogicNodeSubscribeInfoRequest_descriptor_ = file->message_type(77);
  static const int RemoveLogicNodeSubscribeInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveLogicNodeSubscribeInfoRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveLogicNodeSubscribeInfoRequest, logic_node_list_),
  };
  RemoveLogicNodeSubscribeInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveLogicNodeSubscribeInfoRequest_descriptor_,
      RemoveLogicNodeSubscribeInfoRequest::default_instance_,
      RemoveLogicNodeSubscribeInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveLogicNodeSubscribeInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveLogicNodeSubscribeInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveLogicNodeSubscribeInfoRequest));
  RemoveLogicNodeSubscribeInfoResponse_descriptor_ = file->message_type(78);
  static const int RemoveLogicNodeSubscribeInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveLogicNodeSubscribeInfoResponse, result_),
  };
  RemoveLogicNodeSubscribeInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveLogicNodeSubscribeInfoResponse_descriptor_,
      RemoveLogicNodeSubscribeInfoResponse::default_instance_,
      RemoveLogicNodeSubscribeInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveLogicNodeSubscribeInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveLogicNodeSubscribeInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveLogicNodeSubscribeInfoResponse));
  GetLogicNodeSubscribeInfoRequest_descriptor_ = file->message_type(79);
  static const int GetLogicNodeSubscribeInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogicNodeSubscribeInfoRequest, userid_),
  };
  GetLogicNodeSubscribeInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLogicNodeSubscribeInfoRequest_descriptor_,
      GetLogicNodeSubscribeInfoRequest::default_instance_,
      GetLogicNodeSubscribeInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogicNodeSubscribeInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogicNodeSubscribeInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLogicNodeSubscribeInfoRequest));
  GetLogicNodeSubscribeInfoResponse_descriptor_ = file->message_type(80);
  static const int GetLogicNodeSubscribeInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogicNodeSubscribeInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogicNodeSubscribeInfoResponse, logic_node_list_),
  };
  GetLogicNodeSubscribeInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLogicNodeSubscribeInfoResponse_descriptor_,
      GetLogicNodeSubscribeInfoResponse::default_instance_,
      GetLogicNodeSubscribeInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogicNodeSubscribeInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLogicNodeSubscribeInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLogicNodeSubscribeInfoResponse));
  GetFollowerWithProfileRequest_descriptor_ = file->message_type(81);
  static const int GetFollowerWithProfileRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerWithProfileRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerWithProfileRequest, cursor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerWithProfileRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerWithProfileRequest, exclude_icon_),
  };
  GetFollowerWithProfileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFollowerWithProfileRequest_descriptor_,
      GetFollowerWithProfileRequest::default_instance_,
      GetFollowerWithProfileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerWithProfileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerWithProfileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFollowerWithProfileRequest));
  GetFollowerWithProfileResponse_descriptor_ = file->message_type(82);
  static const int GetFollowerWithProfileResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerWithProfileResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerWithProfileResponse, follower_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerWithProfileResponse, eol_),
  };
  GetFollowerWithProfileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFollowerWithProfileResponse_descriptor_,
      GetFollowerWithProfileResponse::default_instance_,
      GetFollowerWithProfileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerWithProfileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowerWithProfileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFollowerWithProfileResponse));
  GetFollowingWithProfileRequest_descriptor_ = file->message_type(83);
  static const int GetFollowingWithProfileRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingWithProfileRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingWithProfileRequest, exclude_icon_),
  };
  GetFollowingWithProfileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFollowingWithProfileRequest_descriptor_,
      GetFollowingWithProfileRequest::default_instance_,
      GetFollowingWithProfileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingWithProfileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingWithProfileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFollowingWithProfileRequest));
  GetFollowingWithProfileResponse_descriptor_ = file->message_type(84);
  static const int GetFollowingWithProfileResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingWithProfileResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingWithProfileResponse, following_list_),
  };
  GetFollowingWithProfileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFollowingWithProfileResponse_descriptor_,
      GetFollowingWithProfileResponse::default_instance_,
      GetFollowingWithProfileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingWithProfileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowingWithProfileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFollowingWithProfileResponse));
  GetContactExRequest_descriptor_ = file->message_type(85);
  static const int GetContactExRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactExRequest, userid_),
  };
  GetContactExRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetContactExRequest_descriptor_,
      GetContactExRequest::default_instance_,
      GetContactExRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactExRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactExRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetContactExRequest));
  GetContactExResponse_descriptor_ = file->message_type(86);
  static const int GetContactExResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactExResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactExResponse, contact_ex_list_),
  };
  GetContactExResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetContactExResponse_descriptor_,
      GetContactExResponse::default_instance_,
      GetContactExResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactExResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactExResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetContactExResponse));
  SSGender_descriptor_ = file->enum_type(0);
  SSBOX_descriptor_ = file->enum_type(1);
  SSContentType_descriptor_ = file->enum_type(2);
  ServiceCode_descriptor_ = file->enum_type(3);
  SSDataDomainSvc_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ssdatadomain_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSAccount_descriptor_, &SSAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSProfile_descriptor_, &SSProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSContact_descriptor_, &SSContact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSContactEx_descriptor_, &SSContactEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSGroup_descriptor_, &SSGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSMember_descriptor_, &SSMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSClientState_descriptor_, &SSClientState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSMessageState_descriptor_, &SSMessageState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSSessionInfo_descriptor_, &SSSessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSMessage_descriptor_, &SSMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceResult_descriptor_, &ServiceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateAccountRequest_descriptor_, &CreateAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateAccountResponse_descriptor_, &CreateAccountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountRequest_descriptor_, &GetAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountResponse_descriptor_, &GetAccountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePasswordRequest_descriptor_, &ChangePasswordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePasswordResponse_descriptor_, &ChangePasswordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserExistRequest_descriptor_, &UserExistRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserExistResponse_descriptor_, &UserExistResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetProfileRequest_descriptor_, &SetProfileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetProfileResponse_descriptor_, &SetProfileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetProfileRequest_descriptor_, &GetProfileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetProfileResponse_descriptor_, &GetProfileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FollowRequest_descriptor_, &FollowRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FollowResponse_descriptor_, &FollowResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelFollowRequest_descriptor_, &CancelFollowRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelFollowResponse_descriptor_, &CancelFollowResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFollowingRequest_descriptor_, &GetFollowingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFollowingResponse_descriptor_, &GetFollowingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFollowerCountRequest_descriptor_, &GetFollowerCountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFollowerCountResponse_descriptor_, &GetFollowerCountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFollowerRequest_descriptor_, &GetFollowerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFollowerResponse_descriptor_, &GetFollowerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteRequest_descriptor_, &InviteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteResponse_descriptor_, &InviteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInvitingRequest_descriptor_, &GetInvitingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInvitingResponse_descriptor_, &GetInvitingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInviterRequest_descriptor_, &GetInviterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInviterResponse_descriptor_, &GetInviterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetSessionInfoRequest_descriptor_, &SetSessionInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetSessionInfoResponse_descriptor_, &SetSessionInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSessionInfoRequest_descriptor_, &GetSessionInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSessionInfoResponse_descriptor_, &GetSessionInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMessageRequest_descriptor_, &GetMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMessageResponse_descriptor_, &GetMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMessageByTimestampRequest_descriptor_, &GetMessageByTimestampRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMessageByTimestampResponse_descriptor_, &GetMessageByTimestampResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendPublicMessageRequest_descriptor_, &SendPublicMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendPublicMessageResponse_descriptor_, &SendPublicMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMessageRequest_descriptor_, &SendMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMessageResponse_descriptor_, &SendMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFavoriteMessageRequest_descriptor_, &AddFavoriteMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFavoriteMessageResponse_descriptor_, &AddFavoriteMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddContactRequest_descriptor_, &AddContactRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddContactResponse_descriptor_, &AddContactResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveContactRequest_descriptor_, &RemoveContactRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveContactResponse_descriptor_, &RemoveContactResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetContactRequest_descriptor_, &GetContactRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetContactResponse_descriptor_, &GetContactResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddGroupRequest_descriptor_, &AddGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddGroupResponse_descriptor_, &AddGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveGroupRequest_descriptor_, &RemoveGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveGroupResponse_descriptor_, &RemoveGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupRequest_descriptor_, &GetGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupResponse_descriptor_, &GetGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMemberRequest_descriptor_, &AddMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMemberResponse_descriptor_, &AddMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveMemberRequest_descriptor_, &RemoveMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveMemberResponse_descriptor_, &RemoveMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMemberRequest_descriptor_, &GetMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMemberResponse_descriptor_, &GetMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAndUpdateRequest_descriptor_, &QueryAndUpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAndUpdateResponse_descriptor_, &QueryAndUpdateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAndDeleteRequest_descriptor_, &QueryAndDeleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAndDeleteResponse_descriptor_, &QueryAndDeleteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddLogicNodeSubscribeInfoRequest_descriptor_, &AddLogicNodeSubscribeInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddLogicNodeSubscribeInfoResponse_descriptor_, &AddLogicNodeSubscribeInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveLogicNodeSubscribeInfoRequest_descriptor_, &RemoveLogicNodeSubscribeInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveLogicNodeSubscribeInfoResponse_descriptor_, &RemoveLogicNodeSubscribeInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLogicNodeSubscribeInfoRequest_descriptor_, &GetLogicNodeSubscribeInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLogicNodeSubscribeInfoResponse_descriptor_, &GetLogicNodeSubscribeInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFollowerWithProfileRequest_descriptor_, &GetFollowerWithProfileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFollowerWithProfileResponse_descriptor_, &GetFollowerWithProfileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFollowingWithProfileRequest_descriptor_, &GetFollowingWithProfileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFollowingWithProfileResponse_descriptor_, &GetFollowingWithProfileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetContactExRequest_descriptor_, &GetContactExRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetContactExResponse_descriptor_, &GetContactExResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ssdatadomain_2eproto() {
  delete SSAccount::default_instance_;
  delete SSAccount_reflection_;
  delete SSProfile::default_instance_;
  delete SSProfile_reflection_;
  delete SSContact::default_instance_;
  delete SSContact_reflection_;
  delete SSContactEx::default_instance_;
  delete SSContactEx_reflection_;
  delete SSGroup::default_instance_;
  delete SSGroup_reflection_;
  delete SSMember::default_instance_;
  delete SSMember_reflection_;
  delete SSClientState::default_instance_;
  delete SSClientState_reflection_;
  delete SSMessageState::default_instance_;
  delete SSMessageState_reflection_;
  delete SSSessionInfo::default_instance_;
  delete SSSessionInfo_reflection_;
  delete SSMessage::default_instance_;
  delete SSMessage_reflection_;
  delete ServiceResult::default_instance_;
  delete ServiceResult_reflection_;
  delete CreateAccountRequest::default_instance_;
  delete CreateAccountRequest_reflection_;
  delete CreateAccountResponse::default_instance_;
  delete CreateAccountResponse_reflection_;
  delete GetAccountRequest::default_instance_;
  delete GetAccountRequest_reflection_;
  delete GetAccountResponse::default_instance_;
  delete GetAccountResponse_reflection_;
  delete ChangePasswordRequest::default_instance_;
  delete ChangePasswordRequest_reflection_;
  delete ChangePasswordResponse::default_instance_;
  delete ChangePasswordResponse_reflection_;
  delete UserExistRequest::default_instance_;
  delete UserExistRequest_reflection_;
  delete UserExistResponse::default_instance_;
  delete UserExistResponse_reflection_;
  delete SetProfileRequest::default_instance_;
  delete SetProfileRequest_reflection_;
  delete SetProfileResponse::default_instance_;
  delete SetProfileResponse_reflection_;
  delete GetProfileRequest::default_instance_;
  delete GetProfileRequest_reflection_;
  delete GetProfileResponse::default_instance_;
  delete GetProfileResponse_reflection_;
  delete FollowRequest::default_instance_;
  delete FollowRequest_reflection_;
  delete FollowResponse::default_instance_;
  delete FollowResponse_reflection_;
  delete CancelFollowRequest::default_instance_;
  delete CancelFollowRequest_reflection_;
  delete CancelFollowResponse::default_instance_;
  delete CancelFollowResponse_reflection_;
  delete GetFollowingRequest::default_instance_;
  delete GetFollowingRequest_reflection_;
  delete GetFollowingResponse::default_instance_;
  delete GetFollowingResponse_reflection_;
  delete GetFollowerCountRequest::default_instance_;
  delete GetFollowerCountRequest_reflection_;
  delete GetFollowerCountResponse::default_instance_;
  delete GetFollowerCountResponse_reflection_;
  delete GetFollowerRequest::default_instance_;
  delete GetFollowerRequest_reflection_;
  delete GetFollowerResponse::default_instance_;
  delete GetFollowerResponse_reflection_;
  delete InviteRequest::default_instance_;
  delete InviteRequest_reflection_;
  delete InviteResponse::default_instance_;
  delete InviteResponse_reflection_;
  delete GetInvitingRequest::default_instance_;
  delete GetInvitingRequest_reflection_;
  delete GetInvitingResponse::default_instance_;
  delete GetInvitingResponse_reflection_;
  delete GetInviterRequest::default_instance_;
  delete GetInviterRequest_reflection_;
  delete GetInviterResponse::default_instance_;
  delete GetInviterResponse_reflection_;
  delete SetSessionInfoRequest::default_instance_;
  delete SetSessionInfoRequest_reflection_;
  delete SetSessionInfoResponse::default_instance_;
  delete SetSessionInfoResponse_reflection_;
  delete GetSessionInfoRequest::default_instance_;
  delete GetSessionInfoRequest_reflection_;
  delete GetSessionInfoResponse::default_instance_;
  delete GetSessionInfoResponse_reflection_;
  delete GetMessageRequest::default_instance_;
  delete GetMessageRequest_reflection_;
  delete GetMessageResponse::default_instance_;
  delete GetMessageResponse_reflection_;
  delete GetMessageByTimestampRequest::default_instance_;
  delete GetMessageByTimestampRequest_reflection_;
  delete GetMessageByTimestampResponse::default_instance_;
  delete GetMessageByTimestampResponse_reflection_;
  delete SendPublicMessageRequest::default_instance_;
  delete SendPublicMessageRequest_reflection_;
  delete SendPublicMessageResponse::default_instance_;
  delete SendPublicMessageResponse_reflection_;
  delete SendMessageRequest::default_instance_;
  delete SendMessageRequest_reflection_;
  delete SendMessageResponse::default_instance_;
  delete SendMessageResponse_reflection_;
  delete AddFavoriteMessageRequest::default_instance_;
  delete AddFavoriteMessageRequest_reflection_;
  delete AddFavoriteMessageResponse::default_instance_;
  delete AddFavoriteMessageResponse_reflection_;
  delete AddContactRequest::default_instance_;
  delete AddContactRequest_reflection_;
  delete AddContactResponse::default_instance_;
  delete AddContactResponse_reflection_;
  delete RemoveContactRequest::default_instance_;
  delete RemoveContactRequest_reflection_;
  delete RemoveContactResponse::default_instance_;
  delete RemoveContactResponse_reflection_;
  delete GetContactRequest::default_instance_;
  delete GetContactRequest_reflection_;
  delete GetContactResponse::default_instance_;
  delete GetContactResponse_reflection_;
  delete AddGroupRequest::default_instance_;
  delete AddGroupRequest_reflection_;
  delete AddGroupResponse::default_instance_;
  delete AddGroupResponse_reflection_;
  delete RemoveGroupRequest::default_instance_;
  delete RemoveGroupRequest_reflection_;
  delete RemoveGroupResponse::default_instance_;
  delete RemoveGroupResponse_reflection_;
  delete GetGroupRequest::default_instance_;
  delete GetGroupRequest_reflection_;
  delete GetGroupResponse::default_instance_;
  delete GetGroupResponse_reflection_;
  delete AddMemberRequest::default_instance_;
  delete AddMemberRequest_reflection_;
  delete AddMemberResponse::default_instance_;
  delete AddMemberResponse_reflection_;
  delete RemoveMemberRequest::default_instance_;
  delete RemoveMemberRequest_reflection_;
  delete RemoveMemberResponse::default_instance_;
  delete RemoveMemberResponse_reflection_;
  delete GetMemberRequest::default_instance_;
  delete GetMemberRequest_reflection_;
  delete GetMemberResponse::default_instance_;
  delete GetMemberResponse_reflection_;
  delete QueryAndUpdateRequest::default_instance_;
  delete QueryAndUpdateRequest_reflection_;
  delete QueryAndUpdateResponse::default_instance_;
  delete QueryAndUpdateResponse_reflection_;
  delete QueryAndDeleteRequest::default_instance_;
  delete QueryAndDeleteRequest_reflection_;
  delete QueryAndDeleteResponse::default_instance_;
  delete QueryAndDeleteResponse_reflection_;
  delete AddLogicNodeSubscribeInfoRequest::default_instance_;
  delete AddLogicNodeSubscribeInfoRequest_reflection_;
  delete AddLogicNodeSubscribeInfoResponse::default_instance_;
  delete AddLogicNodeSubscribeInfoResponse_reflection_;
  delete RemoveLogicNodeSubscribeInfoRequest::default_instance_;
  delete RemoveLogicNodeSubscribeInfoRequest_reflection_;
  delete RemoveLogicNodeSubscribeInfoResponse::default_instance_;
  delete RemoveLogicNodeSubscribeInfoResponse_reflection_;
  delete GetLogicNodeSubscribeInfoRequest::default_instance_;
  delete GetLogicNodeSubscribeInfoRequest_reflection_;
  delete GetLogicNodeSubscribeInfoResponse::default_instance_;
  delete GetLogicNodeSubscribeInfoResponse_reflection_;
  delete GetFollowerWithProfileRequest::default_instance_;
  delete GetFollowerWithProfileRequest_reflection_;
  delete GetFollowerWithProfileResponse::default_instance_;
  delete GetFollowerWithProfileResponse_reflection_;
  delete GetFollowingWithProfileRequest::default_instance_;
  delete GetFollowingWithProfileRequest_reflection_;
  delete GetFollowingWithProfileResponse::default_instance_;
  delete GetFollowingWithProfileResponse_reflection_;
  delete GetContactExRequest::default_instance_;
  delete GetContactExRequest_reflection_;
  delete GetContactExResponse::default_instance_;
  delete GetContactExResponse_reflection_;
}

void protobuf_AddDesc_ssdatadomain_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ssdatadomain.proto\022\014SSDataDomain\"L\n\tSS"
    "Account\022\016\n\006userid\030\001 \002(\t\022\020\n\010password\030\002 \002("
    "\t\022\r\n\005email\030\003 \002(\t\022\016\n\006binary\030d \001(\014\"\266\001\n\tSSP"
    "rofile\022\016\n\006userid\030\001 \002(\t\022\020\n\010nickname\030\002 \001(\t"
    "\022\013\n\003age\030\003 \001(\005\022&\n\006gender\030\004 \001(\0162\026.SSDataDo"
    "main.SSGender\022\014\n\004icon\030\005 \001(\014\022\036\n\ticon_name"
    "\030\006 \001(\t:\013default.jpg\022\024\n\014introduction\030\t \001("
    "\t\022\016\n\006binary\030d \001(\014\"e\n\tSSContact\022\021\n\tcontac"
    "tid\030\001 \002(\t\022\r\n\005email\030\002 \001(\t\022\016\n\006userid\030\003 \001(\t"
    "\022\026\n\016alias_nickname\030\004 \001(\t\022\016\n\006binary\030d \001(\014"
    "\"\200\002\n\013SSContactEx\022\021\n\tcontactid\030\001 \002(\t\022\021\n\ti"
    "s_member\030\002 \001(\005\022\024\n\014is_following\030\003 \001(\005\022\r\n\005"
    "email\030\004 \001(\t\022\016\n\006userid\030\005 \001(\t\022\026\n\016alias_nic"
    "kname\030\006 \001(\t\022\020\n\010nickname\030\007 \001(\t\022\016\n\006remark\030"
    "\010 \001(\t\022&\n\006gender\030\t \001(\0162\026.SSDataDomain.SSG"
    "ender\022\013\n\003age\030\n \001(\005\022\021\n\ticon_name\030\013 \001(\t\022\024\n"
    "\014introduction\030\014 \001(\t\"H\n\007SSGroup\022\017\n\007groupi"
    "d\030\001 \002(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006system\030\003 \001(\010\022\016\n"
    "\006binary\030d \001(\014\",\n\010SSMember\022\017\n\007groupid\030\001 \002"
    "(\t\022\017\n\007members\030\002 \003(\t\"\242\003\n\rSSClientState\022\026\n"
    "\016last_send_time\030\001 \001(\003\022\035\n\025last_recieved_m"
    "essage\030\002 \001(\t\022\027\n\017last_fetch_time\030\003 \001(\003\022\027\n"
    "\017last_seq_number\030\004 \001(\005\022\030\n\020last_logout_ti"
    "me\030\005 \001(\003\022\036\n\026last_client_identifier\030\006 \001(\t"
    "\022\031\n\021sc_last_user_time\030\007 \001(\t\022\032\n\022sc_last_g"
    "roup_time\030\010 \001(\t\022\034\n\024sc_last_contact_time\030"
    "\t \001(\t\022\033\n\023sc_last_member_time\030\n \001(\t\022\033\n\023sc"
    "_last_follow_time\030\013 \001(\t\022\031\n\021sc_last_send_"
    "time\030\014 \001(\t\022\031\n\021sc_last_recv_time\030\r \001(\t\022\031\n"
    "\021sc_last_favo_time\030\016 \001(\t\022\016\n\006binary\030d \001(\014"
    "\"4\n\016SSMessageState\022\016\n\006userid\030\001 \002(\t\022\022\n\nse"
    "q_number\030\002 \002(\005\"\207\001\n\rSSSessionInfo\022\016\n\006user"
    "id\030\001 \002(\t\0221\n\014client_state\030\002 \001(\0132\033.SSDataD"
    "omain.SSClientState\0223\n\rmessage_state\030\003 \003"
    "(\0132\034.SSDataDomain.SSMessageState\"\353\001\n\tSSM"
    "essage\022\r\n\005msgid\030\001 \001(\t\022\022\n\nseq_number\030\003 \001("
    "\005\022\021\n\ttimestamp\030\004 \002(\003\022\016\n\006sender\030\005 \002(\t\022\021\n\t"
    "recievers\030\006 \003(\t\022\022\n\nroot_msgid\030\007 \001(\t\022\024\n\014p"
    "arent_msgid\030\010 \001(\t\022\017\n\007subject\030\t \002(\t\0229\n\014co"
    "ntent_type\030\n \002(\0162\033.SSDataDomain.SSConten"
    "tType:\006NORMAL\022\017\n\007content\030\013 \001(\014\"I\n\rServic"
    "eResult\022\'\n\004code\030\001 \002(\0162\031.SSDataDomain.Ser"
    "viceCode\022\017\n\007message\030\002 \001(\t\"Y\n\024CreateAccou"
    "ntRequest\022\016\n\006userid\030\001 \002(\t\022\020\n\010password\030\002 "
    "\002(\t\022\r\n\005email\030\003 \002(\t\022\020\n\010nickname\030\004 \002(\t\"D\n\025"
    "CreateAccountResponse\022+\n\006result\030\001 \002(\0132\033."
    "SSDataDomain.ServiceResult\"#\n\021GetAccount"
    "Request\022\016\n\006userid\030\001 \002(\t\"k\n\022GetAccountRes"
    "ponse\022+\n\006result\030\001 \002(\0132\033.SSDataDomain.Ser"
    "viceResult\022(\n\007account\030\002 \001(\0132\027.SSDataDoma"
    "in.SSAccount\"=\n\025ChangePasswordRequest\022\016\n"
    "\006userid\030\001 \002(\t\022\024\n\014new_password\030\002 \002(\t\"E\n\026C"
    "hangePasswordResponse\022+\n\006result\030\001 \002(\0132\033."
    "SSDataDomain.ServiceResult\"\'\n\020UserExistR"
    "equest\022\023\n\013userid_list\030\001 \003(\t\"[\n\021UserExist"
    "Response\022+\n\006result\030\001 \002(\0132\033.SSDataDomain."
    "ServiceResult\022\031\n\021exist_userid_list\030\002 \003(\t"
    "\"M\n\021SetProfileRequest\022\016\n\006userid\030\001 \002(\t\022(\n"
    "\007profile\030\002 \002(\0132\027.SSDataDomain.SSProfile\""
    "A\n\022SetProfileResponse\022+\n\006result\030\001 \002(\0132\033."
    "SSDataDomain.ServiceResult\"9\n\021GetProfile"
    "Request\022\023\n\013userid_list\030\001 \003(\t\022\017\n\004flag\030\002 \001"
    "(\005:\0012\"p\n\022GetProfileResponse\022+\n\006result\030\001 "
    "\002(\0132\033.SSDataDomain.ServiceResult\022-\n\014prof"
    "ile_list\030\002 \003(\0132\027.SSDataDomain.SSProfile\""
    "G\n\rFollowRequest\022\027\n\017follower_userid\030\001 \002("
    "\t\022\035\n\025following_userid_list\030\002 \003(\t\"=\n\016Foll"
    "owResponse\022+\n\006result\030\001 \002(\0132\033.SSDataDomai"
    "n.ServiceResult\"M\n\023CancelFollowRequest\022\027"
    "\n\017follower_userid\030\001 \002(\t\022\035\n\025following_use"
    "rid_list\030\002 \003(\t\"C\n\024CancelFollowResponse\022+"
    "\n\006result\030\001 \002(\0132\033.SSDataDomain.ServiceRes"
    "ult\"%\n\023GetFollowingRequest\022\016\n\006userid\030\001 \002"
    "(\t\"b\n\024GetFollowingResponse\022+\n\006result\030\001 \002"
    "(\0132\033.SSDataDomain.ServiceResult\022\035\n\025follo"
    "wing_userid_list\030\002 \003(\t\")\n\027GetFollowerCou"
    "ntRequest\022\016\n\006userid\030\001 \002(\t\"V\n\030GetFollower"
    "CountResponse\022+\n\006result\030\001 \002(\0132\033.SSDataDo"
    "main.ServiceResult\022\r\n\005count\030\002 \001(\005\"K\n\022Get"
    "FollowerRequest\022\016\n\006userid\030\001 \002(\t\022\021\n\tcurso"
    "r_id\030\002 \001(\t\022\022\n\005count\030\003 \001(\005:\003100\"t\n\023GetFol"
    "lowerResponse\022+\n\006result\030\001 \002(\0132\033.SSDataDo"
    "main.ServiceResult\022\034\n\024follower_userid_li"
    "st\030\002 \003(\t\022\022\n\003eol\030\003 \001(\010:\005false\"E\n\rInviteRe"
    "quest\022\026\n\016inviter_userid\030\001 \002(\t\022\034\n\024invitin"
    "g_userid_list\030\002 \003(\t\"=\n\016InviteResponse\022+\n"
    "\006result\030\001 \002(\0132\033.SSDataDomain.ServiceResu"
    "lt\"$\n\022GetInvitingRequest\022\016\n\006userid\030\001 \002(\t"
    "\"`\n\023GetInvitingResponse\022+\n\006result\030\001 \002(\0132"
    "\033.SSDataDomain.ServiceResult\022\034\n\024inviting"
    "_userid_list\030\002 \003(\t\"#\n\021GetInviterRequest\022"
    "\016\n\006userid\030\001 \002(\t\"^\n\022GetInviterResponse\022+\n"
    "\006result\030\001 \002(\0132\033.SSDataDomain.ServiceResu"
    "lt\022\033\n\023inviter_userid_list\030\002 \003(\t\"Z\n\025SetSe"
    "ssionInfoRequest\022\016\n\006userid\030\001 \002(\t\0221\n\014sess"
    "ion_info\030\002 \002(\0132\033.SSDataDomain.SSSessionI"
    "nfo\"E\n\026SetSessionInfoResponse\022+\n\006result\030"
    "\001 \002(\0132\033.SSDataDomain.ServiceResult\"\'\n\025Ge"
    "tSessionInfoRequest\022\016\n\006userid\030\001 \002(\t\"x\n\026G"
    "etSessionInfoResponse\022+\n\006result\030\001 \002(\0132\033."
    "SSDataDomain.ServiceResult\0221\n\014session_in"
    "fo\030\002 \001(\0132\033.SSDataDomain.SSSessionInfo\"s\n"
    "\021GetMessageRequest\022\016\n\006userid\030\001 \002(\t\022\'\n\nso"
    "urce_box\030\002 \002(\0162\023.SSDataDomain.SSBOX\022\021\n\tc"
    "ursor_id\030\003 \001(\t\022\022\n\005count\030\004 \001(\005:\003100\"\200\001\n\022G"
    "etMessageResponse\022+\n\006result\030\001 \002(\0132\033.SSDa"
    "taDomain.ServiceResult\022)\n\010msg_list\030\002 \003(\013"
    "2\027.SSDataDomain.SSMessage\022\022\n\003eol\030\003 \001(\010:\005"
    "false\"\233\001\n\034GetMessageByTimestampRequest\022\016"
    "\n\006userid\030\001 \002(\t\022\'\n\nsource_box\030\002 \002(\0162\023.SSD"
    "ataDomain.SSBOX\022\027\n\017start_timestamp\030\003 \001(\003"
    "\022\025\n\rend_timestamp\030\004 \001(\003\022\022\n\005count\030\005 \001(\005:\003"
    "100\"w\n\035GetMessageByTimestampResponse\022+\n\006"
    "result\030\001 \002(\0132\033.SSDataDomain.ServiceResul"
    "t\022)\n\010msg_list\030\002 \003(\0132\027.SSDataDomain.SSMes"
    "sage\"@\n\030SendPublicMessageRequest\022$\n\003msg\030"
    "\001 \002(\0132\027.SSDataDomain.SSMessage\"W\n\031SendPu"
    "blicMessageResponse\022+\n\006result\030\001 \002(\0132\033.SS"
    "DataDomain.ServiceResult\022\r\n\005msgid\030\002 \002(\t\""
    ":\n\022SendMessageRequest\022$\n\003msg\030\001 \002(\0132\027.SSD"
    "ataDomain.SSMessage\"Q\n\023SendMessageRespon"
    "se\022+\n\006result\030\001 \002(\0132\033.SSDataDomain.Servic"
    "eResult\022\r\n\005msgid\030\002 \002(\t\"A\n\031AddFavoriteMes"
    "sageRequest\022$\n\003msg\030\001 \002(\0132\027.SSDataDomain."
    "SSMessage\"X\n\032AddFavoriteMessageResponse\022"
    "+\n\006result\030\001 \002(\0132\033.SSDataDomain.ServiceRe"
    "sult\022\r\n\005msgid\030\002 \002(\t\"R\n\021AddContactRequest"
    "\022\016\n\006userid\030\001 \002(\t\022-\n\014contact_list\030\002 \003(\0132\027"
    ".SSDataDomain.SSContact\"A\n\022AddContactRes"
    "ponse\022+\n\006result\030\001 \002(\0132\033.SSDataDomain.Ser"
    "viceResult\">\n\024RemoveContactRequest\022\016\n\006us"
    "erid\030\001 \002(\t\022\026\n\016contactid_list\030\002 \003(\t\"D\n\025Re"
    "moveContactResponse\022+\n\006result\030\001 \002(\0132\033.SS"
    "DataDomain.ServiceResult\"#\n\021GetContactRe"
    "quest\022\016\n\006userid\030\001 \002(\t\"p\n\022GetContactRespo"
    "nse\022+\n\006result\030\001 \002(\0132\033.SSDataDomain.Servi"
    "ceResult\022-\n\014contact_list\030\002 \003(\0132\027.SSDataD"
    "omain.SSContact\"L\n\017AddGroupRequest\022\016\n\006us"
    "erid\030\001 \002(\t\022)\n\ngroup_list\030\002 \003(\0132\025.SSDataD"
    "omain.SSGroup\"?\n\020AddGroupResponse\022+\n\006res"
    "ult\030\001 \002(\0132\033.SSDataDomain.ServiceResult\":"
    "\n\022RemoveGroupRequest\022\016\n\006userid\030\001 \002(\t\022\024\n\014"
    "groupid_list\030\002 \003(\t\"B\n\023RemoveGroupRespons"
    "e\022+\n\006result\030\001 \002(\0132\033.SSDataDomain.Service"
    "Result\"!\n\017GetGroupRequest\022\016\n\006userid\030\001 \002("
    "\t\"j\n\020GetGroupResponse\022+\n\006result\030\001 \002(\0132\033."
    "SSDataDomain.ServiceResult\022)\n\ngroup_list"
    "\030\002 \003(\0132\025.SSDataDomain.SSGroup\"O\n\020AddMemb"
    "erRequest\022\016\n\006userid\030\001 \002(\t\022+\n\013member_list"
    "\030\002 \003(\0132\026.SSDataDomain.SSMember\"@\n\021AddMem"
    "berResponse\022+\n\006result\030\001 \002(\0132\033.SSDataDoma"
    "in.ServiceResult\"R\n\023RemoveMemberRequest\022"
    "\016\n\006userid\030\001 \002(\t\022+\n\013member_list\030\002 \003(\0132\026.S"
    "SDataDomain.SSMember\"C\n\024RemoveMemberResp"
    "onse\022+\n\006result\030\001 \002(\0132\033.SSDataDomain.Serv"
    "iceResult\"\"\n\020GetMemberRequest\022\016\n\006userid\030"
    "\001 \002(\t\"m\n\021GetMemberResponse\022+\n\006result\030\001 \002"
    "(\0132\033.SSDataDomain.ServiceResult\022+\n\013membe"
    "r_list\030\002 \003(\0132\026.SSDataDomain.SSMember\"o\n\025"
    "QueryAndUpdateRequest\022\013\n\003key\030\001 \002(\t\022\024\n\014up"
    "date_value\030\002 \001(\014\022\030\n\tis_update\030\003 \001(\010:\005fal"
    "se\022\031\n\021consistency_level\030\004 \001(\005\"T\n\026QueryAn"
    "dUpdateResponse\022+\n\006result\030\001 \002(\0132\033.SSData"
    "Domain.ServiceResult\022\r\n\005value\030\002 \001(\014\"$\n\025Q"
    "ueryAndDeleteRequest\022\013\n\003key\030\001 \002(\t\"T\n\026Que"
    "ryAndDeleteResponse\022+\n\006result\030\001 \002(\0132\033.SS"
    "DataDomain.ServiceResult\022\r\n\005value\030\002 \001(\014\""
    "K\n AddLogicNodeSubscribeInfoRequest\022\016\n\006u"
    "serid\030\001 \002(\t\022\027\n\017logic_node_list\030\002 \003(\t\"P\n!"
    "AddLogicNodeSubscribeInfoResponse\022+\n\006res"
    "ult\030\001 \002(\0132\033.SSDataDomain.ServiceResult\"N"
    "\n#RemoveLogicNodeSubscribeInfoRequest\022\016\n"
    "\006userid\030\001 \002(\t\022\027\n\017logic_node_list\030\002 \003(\t\"S"
    "\n$RemoveLogicNodeSubscribeInfoResponse\022+"
    "\n\006result\030\001 \002(\0132\033.SSDataDomain.ServiceRes"
    "ult\"2\n GetLogicNodeSubscribeInfoRequest\022"
    "\016\n\006userid\030\001 \002(\t\"i\n!GetLogicNodeSubscribe"
    "InfoResponse\022+\n\006result\030\001 \002(\0132\033.SSDataDom"
    "ain.ServiceResult\022\027\n\017logic_node_list\030\002 \003"
    "(\t\"r\n\035GetFollowerWithProfileRequest\022\016\n\006u"
    "serid\030\001 \002(\t\022\021\n\tcursor_id\030\002 \001(\t\022\022\n\005count\030"
    "\003 \001(\005:\003100\022\032\n\014exclude_icon\030\004 \001(\010:\004true\"\221"
    "\001\n\036GetFollowerWithProfileResponse\022+\n\006res"
    "ult\030\001 \002(\0132\033.SSDataDomain.ServiceResult\022."
    "\n\rfollower_list\030\002 \003(\0132\027.SSDataDomain.SSP"
    "rofile\022\022\n\003eol\030\003 \001(\010:\005false\"L\n\036GetFollowi"
    "ngWithProfileRequest\022\016\n\006userid\030\001 \002(\t\022\032\n\014"
    "exclude_icon\030\002 \001(\010:\004true\"\177\n\037GetFollowing"
    "WithProfileResponse\022+\n\006result\030\001 \002(\0132\033.SS"
    "DataDomain.ServiceResult\022/\n\016following_li"
    "st\030\002 \003(\0132\027.SSDataDomain.SSProfile\"%\n\023Get"
    "ContactExRequest\022\016\n\006userid\030\001 \002(\t\"w\n\024GetC"
    "ontactExResponse\022+\n\006result\030\001 \002(\0132\033.SSDat"
    "aDomain.ServiceResult\0222\n\017contact_ex_list"
    "\030\002 \003(\0132\031.SSDataDomain.SSContactEx*-\n\010SSG"
    "ender\022\013\n\007UNKNOWN\020\000\022\010\n\004MALE\020\001\022\n\n\006FEMAIL\020\002"
    "*6\n\005SSBOX\022\n\n\006PUBBOX\020\000\022\n\n\006OUTBOX\020\001\022\t\n\005INB"
    "OX\020\002\022\n\n\006FAVBOX\020\003*(\n\rSSContentType\022\n\n\006NOR"
    "MAL\020\000\022\013\n\007COMMAND\020\001*c\n\013ServiceCode\022\t\n\005SC_"
    "OK\020\000\022\025\n\021SC_NO_SUCH_OBJECT\020\001\022\033\n\027SC_METHOD"
    "_NOT_IMPLEMENT\020\002\022\025\n\021SC_INTERNAL_ERROR\020\0032"
    "\230\033\n\017SSDataDomainSvc\022X\n\rCreateAccount\022\".S"
    "SDataDomain.CreateAccountRequest\032#.SSDat"
    "aDomain.CreateAccountResponse\022O\n\nGetAcco"
    "unt\022\037.SSDataDomain.GetAccountRequest\032 .S"
    "SDataDomain.GetAccountResponse\022[\n\016Change"
    "Password\022#.SSDataDomain.ChangePasswordRe"
    "quest\032$.SSDataDomain.ChangePasswordRespo"
    "nse\022L\n\tUserExist\022\036.SSDataDomain.UserExis"
    "tRequest\032\037.SSDataDomain.UserExistRespons"
    "e\022O\n\nSetProfile\022\037.SSDataDomain.SetProfil"
    "eRequest\032 .SSDataDomain.SetProfileRespon"
    "se\022O\n\nGetProfile\022\037.SSDataDomain.GetProfi"
    "leRequest\032 .SSDataDomain.GetProfileRespo"
    "nse\022C\n\006Follow\022\033.SSDataDomain.FollowReque"
    "st\032\034.SSDataDomain.FollowResponse\022U\n\014Canc"
    "elFollow\022!.SSDataDomain.CancelFollowRequ"
    "est\032\".SSDataDomain.CancelFollowResponse\022"
    "U\n\014GetFollowing\022!.SSDataDomain.GetFollow"
    "ingRequest\032\".SSDataDomain.GetFollowingRe"
    "sponse\022a\n\020GetFollowerCount\022%.SSDataDomai"
    "n.GetFollowerCountRequest\032&.SSDataDomain"
    ".GetFollowerCountResponse\022R\n\013GetFollower"
    "\022 .SSDataDomain.GetFollowerRequest\032!.SSD"
    "ataDomain.GetFollowerResponse\022C\n\006Invite\022"
    "\033.SSDataDomain.InviteRequest\032\034.SSDataDom"
    "ain.InviteResponse\022R\n\013GetInviting\022 .SSDa"
    "taDomain.GetInvitingRequest\032!.SSDataDoma"
    "in.GetInvitingResponse\022O\n\nGetInviter\022\037.S"
    "SDataDomain.GetInviterRequest\032 .SSDataDo"
    "main.GetInviterResponse\022[\n\016SetSessionInf"
    "o\022#.SSDataDomain.SetSessionInfoRequest\032$"
    ".SSDataDomain.SetSessionInfoResponse\022[\n\016"
    "GetSessionInfo\022#.SSDataDomain.GetSession"
    "InfoRequest\032$.SSDataDomain.GetSessionInf"
    "oResponse\022O\n\nGetMessage\022\037.SSDataDomain.G"
    "etMessageRequest\032 .SSDataDomain.GetMessa"
    "geResponse\022p\n\025GetMessageByTimestamp\022*.SS"
    "DataDomain.GetMessageByTimestampRequest\032"
    "+.SSDataDomain.GetMessageByTimestampResp"
    "onse\022d\n\021SendPublicMessage\022&.SSDataDomain"
    ".SendPublicMessageRequest\032\'.SSDataDomain"
    ".SendPublicMessageResponse\022R\n\013SendMessag"
    "e\022 .SSDataDomain.SendMessageRequest\032!.SS"
    "DataDomain.SendMessageResponse\022g\n\022AddFav"
    "oriteMessage\022\'.SSDataDomain.AddFavoriteM"
    "essageRequest\032(.SSDataDomain.AddFavorite"
    "MessageResponse\022O\n\nAddContact\022\037.SSDataDo"
    "main.AddContactRequest\032 .SSDataDomain.Ad"
    "dContactResponse\022X\n\rRemoveContact\022\".SSDa"
    "taDomain.RemoveContactRequest\032#.SSDataDo"
    "main.RemoveContactResponse\022O\n\nGetContact"
    "\022\037.SSDataDomain.GetContactRequest\032 .SSDa"
    "taDomain.GetContactResponse\022I\n\010AddGroup\022"
    "\035.SSDataDomain.AddGroupRequest\032\036.SSDataD"
    "omain.AddGroupResponse\022R\n\013RemoveGroup\022 ."
    "SSDataDomain.RemoveGroupRequest\032!.SSData"
    "Domain.RemoveGroupResponse\022I\n\010GetGroup\022\035"
    ".SSDataDomain.GetGroupRequest\032\036.SSDataDo"
    "main.GetGroupResponse\022L\n\tAddMember\022\036.SSD"
    "ataDomain.AddMemberRequest\032\037.SSDataDomai"
    "n.AddMemberResponse\022U\n\014RemoveMember\022!.SS"
    "DataDomain.RemoveMemberRequest\032\".SSDataD"
    "omain.RemoveMemberResponse\022L\n\tGetMember\022"
    "\036.SSDataDomain.GetMemberRequest\032\037.SSData"
    "Domain.GetMemberResponse\022[\n\016QueryAndUpda"
    "te\022#.SSDataDomain.QueryAndUpdateRequest\032"
    "$.SSDataDomain.QueryAndUpdateResponse\022[\n"
    "\016QueryAndDelete\022#.SSDataDomain.QueryAndD"
    "eleteRequest\032$.SSDataDomain.QueryAndDele"
    "teResponse\022|\n\031AddLogicNodeSubscribeInfo\022"
    "..SSDataDomain.AddLogicNodeSubscribeInfo"
    "Request\032/.SSDataDomain.AddLogicNodeSubsc"
    "ribeInfoResponse\022\205\001\n\034RemoveLogicNodeSubs"
    "cribeInfo\0221.SSDataDomain.RemoveLogicNode"
    "SubscribeInfoRequest\0322.SSDataDomain.Remo"
    "veLogicNodeSubscribeInfoResponse\022|\n\031GetL"
    "ogicNodeSubscribeInfo\022..SSDataDomain.Get"
    "LogicNodeSubscribeInfoRequest\032/.SSDataDo"
    "main.GetLogicNodeSubscribeInfoResponse\022v"
    "\n\027GetFollowingWithProfile\022,.SSDataDomain"
    ".GetFollowingWithProfileRequest\032-.SSData"
    "Domain.GetFollowingWithProfileResponse\022s"
    "\n\026GetFollowerWithProfile\022+.SSDataDomain."
    "GetFollowerWithProfileRequest\032,.SSDataDo"
    "main.GetFollowerWithProfileResponse\022U\n\014G"
    "etContactEx\022!.SSDataDomain.GetContactExR"
    "equest\032\".SSDataDomain.GetContactExRespon"
    "seB\"\n\022com.channelsoft.ssB\014SSDataDomain", 11558);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssdatadomain.proto", &protobuf_RegisterTypes);
  SSAccount::default_instance_ = new SSAccount();
  SSProfile::default_instance_ = new SSProfile();
  SSContact::default_instance_ = new SSContact();
  SSContactEx::default_instance_ = new SSContactEx();
  SSGroup::default_instance_ = new SSGroup();
  SSMember::default_instance_ = new SSMember();
  SSClientState::default_instance_ = new SSClientState();
  SSMessageState::default_instance_ = new SSMessageState();
  SSSessionInfo::default_instance_ = new SSSessionInfo();
  SSMessage::default_instance_ = new SSMessage();
  ServiceResult::default_instance_ = new ServiceResult();
  CreateAccountRequest::default_instance_ = new CreateAccountRequest();
  CreateAccountResponse::default_instance_ = new CreateAccountResponse();
  GetAccountRequest::default_instance_ = new GetAccountRequest();
  GetAccountResponse::default_instance_ = new GetAccountResponse();
  ChangePasswordRequest::default_instance_ = new ChangePasswordRequest();
  ChangePasswordResponse::default_instance_ = new ChangePasswordResponse();
  UserExistRequest::default_instance_ = new UserExistRequest();
  UserExistResponse::default_instance_ = new UserExistResponse();
  SetProfileRequest::default_instance_ = new SetProfileRequest();
  SetProfileResponse::default_instance_ = new SetProfileResponse();
  GetProfileRequest::default_instance_ = new GetProfileRequest();
  GetProfileResponse::default_instance_ = new GetProfileResponse();
  FollowRequest::default_instance_ = new FollowRequest();
  FollowResponse::default_instance_ = new FollowResponse();
  CancelFollowRequest::default_instance_ = new CancelFollowRequest();
  CancelFollowResponse::default_instance_ = new CancelFollowResponse();
  GetFollowingRequest::default_instance_ = new GetFollowingRequest();
  GetFollowingResponse::default_instance_ = new GetFollowingResponse();
  GetFollowerCountRequest::default_instance_ = new GetFollowerCountRequest();
  GetFollowerCountResponse::default_instance_ = new GetFollowerCountResponse();
  GetFollowerRequest::default_instance_ = new GetFollowerRequest();
  GetFollowerResponse::default_instance_ = new GetFollowerResponse();
  InviteRequest::default_instance_ = new InviteRequest();
  InviteResponse::default_instance_ = new InviteResponse();
  GetInvitingRequest::default_instance_ = new GetInvitingRequest();
  GetInvitingResponse::default_instance_ = new GetInvitingResponse();
  GetInviterRequest::default_instance_ = new GetInviterRequest();
  GetInviterResponse::default_instance_ = new GetInviterResponse();
  SetSessionInfoRequest::default_instance_ = new SetSessionInfoRequest();
  SetSessionInfoResponse::default_instance_ = new SetSessionInfoResponse();
  GetSessionInfoRequest::default_instance_ = new GetSessionInfoRequest();
  GetSessionInfoResponse::default_instance_ = new GetSessionInfoResponse();
  GetMessageRequest::default_instance_ = new GetMessageRequest();
  GetMessageResponse::default_instance_ = new GetMessageResponse();
  GetMessageByTimestampRequest::default_instance_ = new GetMessageByTimestampRequest();
  GetMessageByTimestampResponse::default_instance_ = new GetMessageByTimestampResponse();
  SendPublicMessageRequest::default_instance_ = new SendPublicMessageRequest();
  SendPublicMessageResponse::default_instance_ = new SendPublicMessageResponse();
  SendMessageRequest::default_instance_ = new SendMessageRequest();
  SendMessageResponse::default_instance_ = new SendMessageResponse();
  AddFavoriteMessageRequest::default_instance_ = new AddFavoriteMessageRequest();
  AddFavoriteMessageResponse::default_instance_ = new AddFavoriteMessageResponse();
  AddContactRequest::default_instance_ = new AddContactRequest();
  AddContactResponse::default_instance_ = new AddContactResponse();
  RemoveContactRequest::default_instance_ = new RemoveContactRequest();
  RemoveContactResponse::default_instance_ = new RemoveContactResponse();
  GetContactRequest::default_instance_ = new GetContactRequest();
  GetContactResponse::default_instance_ = new GetContactResponse();
  AddGroupRequest::default_instance_ = new AddGroupRequest();
  AddGroupResponse::default_instance_ = new AddGroupResponse();
  RemoveGroupRequest::default_instance_ = new RemoveGroupRequest();
  RemoveGroupResponse::default_instance_ = new RemoveGroupResponse();
  GetGroupRequest::default_instance_ = new GetGroupRequest();
  GetGroupResponse::default_instance_ = new GetGroupResponse();
  AddMemberRequest::default_instance_ = new AddMemberRequest();
  AddMemberResponse::default_instance_ = new AddMemberResponse();
  RemoveMemberRequest::default_instance_ = new RemoveMemberRequest();
  RemoveMemberResponse::default_instance_ = new RemoveMemberResponse();
  GetMemberRequest::default_instance_ = new GetMemberRequest();
  GetMemberResponse::default_instance_ = new GetMemberResponse();
  QueryAndUpdateRequest::default_instance_ = new QueryAndUpdateRequest();
  QueryAndUpdateResponse::default_instance_ = new QueryAndUpdateResponse();
  QueryAndDeleteRequest::default_instance_ = new QueryAndDeleteRequest();
  QueryAndDeleteResponse::default_instance_ = new QueryAndDeleteResponse();
  AddLogicNodeSubscribeInfoRequest::default_instance_ = new AddLogicNodeSubscribeInfoRequest();
  AddLogicNodeSubscribeInfoResponse::default_instance_ = new AddLogicNodeSubscribeInfoResponse();
  RemoveLogicNodeSubscribeInfoRequest::default_instance_ = new RemoveLogicNodeSubscribeInfoRequest();
  RemoveLogicNodeSubscribeInfoResponse::default_instance_ = new RemoveLogicNodeSubscribeInfoResponse();
  GetLogicNodeSubscribeInfoRequest::default_instance_ = new GetLogicNodeSubscribeInfoRequest();
  GetLogicNodeSubscribeInfoResponse::default_instance_ = new GetLogicNodeSubscribeInfoResponse();
  GetFollowerWithProfileRequest::default_instance_ = new GetFollowerWithProfileRequest();
  GetFollowerWithProfileResponse::default_instance_ = new GetFollowerWithProfileResponse();
  GetFollowingWithProfileRequest::default_instance_ = new GetFollowingWithProfileRequest();
  GetFollowingWithProfileResponse::default_instance_ = new GetFollowingWithProfileResponse();
  GetContactExRequest::default_instance_ = new GetContactExRequest();
  GetContactExResponse::default_instance_ = new GetContactExResponse();
  SSAccount::default_instance_->InitAsDefaultInstance();
  SSProfile::default_instance_->InitAsDefaultInstance();
  SSContact::default_instance_->InitAsDefaultInstance();
  SSContactEx::default_instance_->InitAsDefaultInstance();
  SSGroup::default_instance_->InitAsDefaultInstance();
  SSMember::default_instance_->InitAsDefaultInstance();
  SSClientState::default_instance_->InitAsDefaultInstance();
  SSMessageState::default_instance_->InitAsDefaultInstance();
  SSSessionInfo::default_instance_->InitAsDefaultInstance();
  SSMessage::default_instance_->InitAsDefaultInstance();
  ServiceResult::default_instance_->InitAsDefaultInstance();
  CreateAccountRequest::default_instance_->InitAsDefaultInstance();
  CreateAccountResponse::default_instance_->InitAsDefaultInstance();
  GetAccountRequest::default_instance_->InitAsDefaultInstance();
  GetAccountResponse::default_instance_->InitAsDefaultInstance();
  ChangePasswordRequest::default_instance_->InitAsDefaultInstance();
  ChangePasswordResponse::default_instance_->InitAsDefaultInstance();
  UserExistRequest::default_instance_->InitAsDefaultInstance();
  UserExistResponse::default_instance_->InitAsDefaultInstance();
  SetProfileRequest::default_instance_->InitAsDefaultInstance();
  SetProfileResponse::default_instance_->InitAsDefaultInstance();
  GetProfileRequest::default_instance_->InitAsDefaultInstance();
  GetProfileResponse::default_instance_->InitAsDefaultInstance();
  FollowRequest::default_instance_->InitAsDefaultInstance();
  FollowResponse::default_instance_->InitAsDefaultInstance();
  CancelFollowRequest::default_instance_->InitAsDefaultInstance();
  CancelFollowResponse::default_instance_->InitAsDefaultInstance();
  GetFollowingRequest::default_instance_->InitAsDefaultInstance();
  GetFollowingResponse::default_instance_->InitAsDefaultInstance();
  GetFollowerCountRequest::default_instance_->InitAsDefaultInstance();
  GetFollowerCountResponse::default_instance_->InitAsDefaultInstance();
  GetFollowerRequest::default_instance_->InitAsDefaultInstance();
  GetFollowerResponse::default_instance_->InitAsDefaultInstance();
  InviteRequest::default_instance_->InitAsDefaultInstance();
  InviteResponse::default_instance_->InitAsDefaultInstance();
  GetInvitingRequest::default_instance_->InitAsDefaultInstance();
  GetInvitingResponse::default_instance_->InitAsDefaultInstance();
  GetInviterRequest::default_instance_->InitAsDefaultInstance();
  GetInviterResponse::default_instance_->InitAsDefaultInstance();
  SetSessionInfoRequest::default_instance_->InitAsDefaultInstance();
  SetSessionInfoResponse::default_instance_->InitAsDefaultInstance();
  GetSessionInfoRequest::default_instance_->InitAsDefaultInstance();
  GetSessionInfoResponse::default_instance_->InitAsDefaultInstance();
  GetMessageRequest::default_instance_->InitAsDefaultInstance();
  GetMessageResponse::default_instance_->InitAsDefaultInstance();
  GetMessageByTimestampRequest::default_instance_->InitAsDefaultInstance();
  GetMessageByTimestampResponse::default_instance_->InitAsDefaultInstance();
  SendPublicMessageRequest::default_instance_->InitAsDefaultInstance();
  SendPublicMessageResponse::default_instance_->InitAsDefaultInstance();
  SendMessageRequest::default_instance_->InitAsDefaultInstance();
  SendMessageResponse::default_instance_->InitAsDefaultInstance();
  AddFavoriteMessageRequest::default_instance_->InitAsDefaultInstance();
  AddFavoriteMessageResponse::default_instance_->InitAsDefaultInstance();
  AddContactRequest::default_instance_->InitAsDefaultInstance();
  AddContactResponse::default_instance_->InitAsDefaultInstance();
  RemoveContactRequest::default_instance_->InitAsDefaultInstance();
  RemoveContactResponse::default_instance_->InitAsDefaultInstance();
  GetContactRequest::default_instance_->InitAsDefaultInstance();
  GetContactResponse::default_instance_->InitAsDefaultInstance();
  AddGroupRequest::default_instance_->InitAsDefaultInstance();
  AddGroupResponse::default_instance_->InitAsDefaultInstance();
  RemoveGroupRequest::default_instance_->InitAsDefaultInstance();
  RemoveGroupResponse::default_instance_->InitAsDefaultInstance();
  GetGroupRequest::default_instance_->InitAsDefaultInstance();
  GetGroupResponse::default_instance_->InitAsDefaultInstance();
  AddMemberRequest::default_instance_->InitAsDefaultInstance();
  AddMemberResponse::default_instance_->InitAsDefaultInstance();
  RemoveMemberRequest::default_instance_->InitAsDefaultInstance();
  RemoveMemberResponse::default_instance_->InitAsDefaultInstance();
  GetMemberRequest::default_instance_->InitAsDefaultInstance();
  GetMemberResponse::default_instance_->InitAsDefaultInstance();
  QueryAndUpdateRequest::default_instance_->InitAsDefaultInstance();
  QueryAndUpdateResponse::default_instance_->InitAsDefaultInstance();
  QueryAndDeleteRequest::default_instance_->InitAsDefaultInstance();
  QueryAndDeleteResponse::default_instance_->InitAsDefaultInstance();
  AddLogicNodeSubscribeInfoRequest::default_instance_->InitAsDefaultInstance();
  AddLogicNodeSubscribeInfoResponse::default_instance_->InitAsDefaultInstance();
  RemoveLogicNodeSubscribeInfoRequest::default_instance_->InitAsDefaultInstance();
  RemoveLogicNodeSubscribeInfoResponse::default_instance_->InitAsDefaultInstance();
  GetLogicNodeSubscribeInfoRequest::default_instance_->InitAsDefaultInstance();
  GetLogicNodeSubscribeInfoResponse::default_instance_->InitAsDefaultInstance();
  GetFollowerWithProfileRequest::default_instance_->InitAsDefaultInstance();
  GetFollowerWithProfileResponse::default_instance_->InitAsDefaultInstance();
  GetFollowingWithProfileRequest::default_instance_->InitAsDefaultInstance();
  GetFollowingWithProfileResponse::default_instance_->InitAsDefaultInstance();
  GetContactExRequest::default_instance_->InitAsDefaultInstance();
  GetContactExResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ssdatadomain_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ssdatadomain_2eproto {
  StaticDescriptorInitializer_ssdatadomain_2eproto() {
    protobuf_AddDesc_ssdatadomain_2eproto();
  }
} static_descriptor_initializer_ssdatadomain_2eproto_;

const ::google::protobuf::EnumDescriptor* SSGender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSGender_descriptor_;
}
bool SSGender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SSBOX_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSBOX_descriptor_;
}
bool SSBOX_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SSContentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSContentType_descriptor_;
}
bool SSContentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceCode_descriptor_;
}
bool ServiceCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string SSAccount::_default_userid_;
const ::std::string SSAccount::_default_password_;
const ::std::string SSAccount::_default_email_;
const ::std::string SSAccount::_default_binary_;
#ifndef _MSC_VER
const int SSAccount::kUseridFieldNumber;
const int SSAccount::kPasswordFieldNumber;
const int SSAccount::kEmailFieldNumber;
const int SSAccount::kBinaryFieldNumber;
#endif  // !_MSC_VER

SSAccount::SSAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSAccount::InitAsDefaultInstance() {
}

SSAccount::SSAccount(const SSAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSAccount::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  password_ = const_cast< ::std::string*>(&_default_password_);
  email_ = const_cast< ::std::string*>(&_default_email_);
  binary_ = const_cast< ::std::string*>(&_default_binary_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSAccount::~SSAccount() {
  SharedDtor();
}

void SSAccount::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (email_ != &_default_email_) {
    delete email_;
  }
  if (binary_ != &_default_binary_) {
    delete binary_;
  }
  if (this != default_instance_) {
  }
}

void SSAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSAccount_descriptor_;
}

const SSAccount& SSAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SSAccount* SSAccount::default_instance_ = NULL;

SSAccount* SSAccount::New() const {
  return new SSAccount;
}

void SSAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
    if (_has_bit(2)) {
      if (email_ != &_default_email_) {
        email_->clear();
      }
    }
    if (_has_bit(3)) {
      if (binary_ != &_default_binary_) {
        binary_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }
      
      // required string email = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_binary;
        break;
      }
      
      // optional bytes binary = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // required string password = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // required string email = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->email(), output);
  }
  
  // optional bytes binary = 100;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      100, this->binary(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // required string password = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // required string email = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }
  
  // optional bytes binary = 100;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->binary(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSAccount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // required string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }
    
    // optional bytes binary = 100;
    if (has_binary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSAccount::MergeFrom(const SSAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_password(from.password());
    }
    if (from._has_bit(2)) {
      set_email(from.email());
    }
    if (from._has_bit(3)) {
      set_binary(from.binary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSAccount::CopyFrom(const SSAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SSAccount::Swap(SSAccount* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(email_, other->email_);
    std::swap(binary_, other->binary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSAccount_descriptor_;
  metadata.reflection = SSAccount_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SSProfile::_default_userid_;
const ::std::string SSProfile::_default_nickname_;
const ::std::string SSProfile::_default_icon_;
const ::std::string SSProfile::_default_icon_name_("default.jpg");
const ::std::string SSProfile::_default_introduction_;
const ::std::string SSProfile::_default_binary_;
#ifndef _MSC_VER
const int SSProfile::kUseridFieldNumber;
const int SSProfile::kNicknameFieldNumber;
const int SSProfile::kAgeFieldNumber;
const int SSProfile::kGenderFieldNumber;
const int SSProfile::kIconFieldNumber;
const int SSProfile::kIconNameFieldNumber;
const int SSProfile::kIntroductionFieldNumber;
const int SSProfile::kBinaryFieldNumber;
#endif  // !_MSC_VER

SSProfile::SSProfile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSProfile::InitAsDefaultInstance() {
}

SSProfile::SSProfile(const SSProfile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSProfile::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  nickname_ = const_cast< ::std::string*>(&_default_nickname_);
  age_ = 0;
  gender_ = 0;
  icon_ = const_cast< ::std::string*>(&_default_icon_);
  icon_name_ = const_cast< ::std::string*>(&_default_icon_name_);
  introduction_ = const_cast< ::std::string*>(&_default_introduction_);
  binary_ = const_cast< ::std::string*>(&_default_binary_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSProfile::~SSProfile() {
  SharedDtor();
}

void SSProfile::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (nickname_ != &_default_nickname_) {
    delete nickname_;
  }
  if (icon_ != &_default_icon_) {
    delete icon_;
  }
  if (icon_name_ != &_default_icon_name_) {
    delete icon_name_;
  }
  if (introduction_ != &_default_introduction_) {
    delete introduction_;
  }
  if (binary_ != &_default_binary_) {
    delete binary_;
  }
  if (this != default_instance_) {
  }
}

void SSProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSProfile_descriptor_;
}

const SSProfile& SSProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SSProfile* SSProfile::default_instance_ = NULL;

SSProfile* SSProfile::New() const {
  return new SSProfile;
}

void SSProfile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (nickname_ != &_default_nickname_) {
        nickname_->clear();
      }
    }
    age_ = 0;
    gender_ = 0;
    if (_has_bit(4)) {
      if (icon_ != &_default_icon_) {
        icon_->clear();
      }
    }
    if (_has_bit(5)) {
      if (icon_name_ != &_default_icon_name_) {
        icon_name_->assign(_default_icon_name_);
      }
    }
    if (_has_bit(6)) {
      if (introduction_ != &_default_introduction_) {
        introduction_->clear();
      }
    }
    if (_has_bit(7)) {
      if (binary_ != &_default_binary_) {
        binary_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }
      
      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_age;
        break;
      }
      
      // optional int32 age = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }
      
      // optional .SSDataDomain.SSGender gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (SSDataDomain::SSGender_IsValid(value)) {
            set_gender(static_cast< SSDataDomain::SSGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }
      
      // optional bytes icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_icon_name;
        break;
      }
      
      // optional string icon_name = 6 [default = "default.jpg"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon_name().data(), this->icon_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_introduction;
        break;
      }
      
      // optional string introduction = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_introduction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_introduction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->introduction().data(), this->introduction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_binary;
        break;
      }
      
      // optional bytes binary = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // optional string nickname = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }
  
  // optional int32 age = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age(), output);
  }
  
  // optional .SSDataDomain.SSGender gender = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gender(), output);
  }
  
  // optional bytes icon = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->icon(), output);
  }
  
  // optional string icon_name = 6 [default = "default.jpg"];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_name().data(), this->icon_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->icon_name(), output);
  }
  
  // optional string introduction = 9;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->introduction().data(), this->introduction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->introduction(), output);
  }
  
  // optional bytes binary = 100;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      100, this->binary(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // optional string nickname = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }
  
  // optional int32 age = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->age(), target);
  }
  
  // optional .SSDataDomain.SSGender gender = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gender(), target);
  }
  
  // optional bytes icon = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->icon(), target);
  }
  
  // optional string icon_name = 6 [default = "default.jpg"];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_name().data(), this->icon_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->icon_name(), target);
  }
  
  // optional string introduction = 9;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->introduction().data(), this->introduction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->introduction(), target);
  }
  
  // optional bytes binary = 100;
  if (_has_bit(7)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->binary(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSProfile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // optional int32 age = 3;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }
    
    // optional .SSDataDomain.SSGender gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
    // optional bytes icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->icon());
    }
    
    // optional string icon_name = 6 [default = "default.jpg"];
    if (has_icon_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_name());
    }
    
    // optional string introduction = 9;
    if (has_introduction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->introduction());
    }
    
    // optional bytes binary = 100;
    if (has_binary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSProfile::MergeFrom(const SSProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_nickname(from.nickname());
    }
    if (from._has_bit(2)) {
      set_age(from.age());
    }
    if (from._has_bit(3)) {
      set_gender(from.gender());
    }
    if (from._has_bit(4)) {
      set_icon(from.icon());
    }
    if (from._has_bit(5)) {
      set_icon_name(from.icon_name());
    }
    if (from._has_bit(6)) {
      set_introduction(from.introduction());
    }
    if (from._has_bit(7)) {
      set_binary(from.binary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSProfile::CopyFrom(const SSProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSProfile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SSProfile::Swap(SSProfile* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(nickname_, other->nickname_);
    std::swap(age_, other->age_);
    std::swap(gender_, other->gender_);
    std::swap(icon_, other->icon_);
    std::swap(icon_name_, other->icon_name_);
    std::swap(introduction_, other->introduction_);
    std::swap(binary_, other->binary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSProfile_descriptor_;
  metadata.reflection = SSProfile_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SSContact::_default_contactid_;
const ::std::string SSContact::_default_email_;
const ::std::string SSContact::_default_userid_;
const ::std::string SSContact::_default_alias_nickname_;
const ::std::string SSContact::_default_binary_;
#ifndef _MSC_VER
const int SSContact::kContactidFieldNumber;
const int SSContact::kEmailFieldNumber;
const int SSContact::kUseridFieldNumber;
const int SSContact::kAliasNicknameFieldNumber;
const int SSContact::kBinaryFieldNumber;
#endif  // !_MSC_VER

SSContact::SSContact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSContact::InitAsDefaultInstance() {
}

SSContact::SSContact(const SSContact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSContact::SharedCtor() {
  _cached_size_ = 0;
  contactid_ = const_cast< ::std::string*>(&_default_contactid_);
  email_ = const_cast< ::std::string*>(&_default_email_);
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  alias_nickname_ = const_cast< ::std::string*>(&_default_alias_nickname_);
  binary_ = const_cast< ::std::string*>(&_default_binary_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSContact::~SSContact() {
  SharedDtor();
}

void SSContact::SharedDtor() {
  if (contactid_ != &_default_contactid_) {
    delete contactid_;
  }
  if (email_ != &_default_email_) {
    delete email_;
  }
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (alias_nickname_ != &_default_alias_nickname_) {
    delete alias_nickname_;
  }
  if (binary_ != &_default_binary_) {
    delete binary_;
  }
  if (this != default_instance_) {
  }
}

void SSContact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSContact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSContact_descriptor_;
}

const SSContact& SSContact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SSContact* SSContact::default_instance_ = NULL;

SSContact* SSContact::New() const {
  return new SSContact;
}

void SSContact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (contactid_ != &_default_contactid_) {
        contactid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (email_ != &_default_email_) {
        email_->clear();
      }
    }
    if (_has_bit(2)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (alias_nickname_ != &_default_alias_nickname_) {
        alias_nickname_->clear();
      }
    }
    if (_has_bit(4)) {
      if (binary_ != &_default_binary_) {
        binary_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSContact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string contactid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contactid().data(), this->contactid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_email;
        break;
      }
      
      // optional string email = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userid;
        break;
      }
      
      // optional string userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_alias_nickname;
        break;
      }
      
      // optional string alias_nickname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alias_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alias_nickname().data(), this->alias_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_binary;
        break;
      }
      
      // optional bytes binary = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSContact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string contactid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactid().data(), this->contactid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->contactid(), output);
  }
  
  // optional string email = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->email(), output);
  }
  
  // optional string userid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userid(), output);
  }
  
  // optional string alias_nickname = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias_nickname().data(), this->alias_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->alias_nickname(), output);
  }
  
  // optional bytes binary = 100;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      100, this->binary(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSContact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string contactid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactid().data(), this->contactid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contactid(), target);
  }
  
  // optional string email = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->email(), target);
  }
  
  // optional string userid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }
  
  // optional string alias_nickname = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias_nickname().data(), this->alias_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alias_nickname(), target);
  }
  
  // optional bytes binary = 100;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->binary(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSContact::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string contactid = 1;
    if (has_contactid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contactid());
    }
    
    // optional string email = 2;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }
    
    // optional string userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string alias_nickname = 4;
    if (has_alias_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias_nickname());
    }
    
    // optional bytes binary = 100;
    if (has_binary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSContact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSContact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSContact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSContact::MergeFrom(const SSContact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_contactid(from.contactid());
    }
    if (from._has_bit(1)) {
      set_email(from.email());
    }
    if (from._has_bit(2)) {
      set_userid(from.userid());
    }
    if (from._has_bit(3)) {
      set_alias_nickname(from.alias_nickname());
    }
    if (from._has_bit(4)) {
      set_binary(from.binary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSContact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSContact::CopyFrom(const SSContact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSContact::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SSContact::Swap(SSContact* other) {
  if (other != this) {
    std::swap(contactid_, other->contactid_);
    std::swap(email_, other->email_);
    std::swap(userid_, other->userid_);
    std::swap(alias_nickname_, other->alias_nickname_);
    std::swap(binary_, other->binary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSContact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSContact_descriptor_;
  metadata.reflection = SSContact_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SSContactEx::_default_contactid_;
const ::std::string SSContactEx::_default_email_;
const ::std::string SSContactEx::_default_userid_;
const ::std::string SSContactEx::_default_alias_nickname_;
const ::std::string SSContactEx::_default_nickname_;
const ::std::string SSContactEx::_default_remark_;
const ::std::string SSContactEx::_default_icon_name_;
const ::std::string SSContactEx::_default_introduction_;
#ifndef _MSC_VER
const int SSContactEx::kContactidFieldNumber;
const int SSContactEx::kIsMemberFieldNumber;
const int SSContactEx::kIsFollowingFieldNumber;
const int SSContactEx::kEmailFieldNumber;
const int SSContactEx::kUseridFieldNumber;
const int SSContactEx::kAliasNicknameFieldNumber;
const int SSContactEx::kNicknameFieldNumber;
const int SSContactEx::kRemarkFieldNumber;
const int SSContactEx::kGenderFieldNumber;
const int SSContactEx::kAgeFieldNumber;
const int SSContactEx::kIconNameFieldNumber;
const int SSContactEx::kIntroductionFieldNumber;
#endif  // !_MSC_VER

SSContactEx::SSContactEx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSContactEx::InitAsDefaultInstance() {
}

SSContactEx::SSContactEx(const SSContactEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSContactEx::SharedCtor() {
  _cached_size_ = 0;
  contactid_ = const_cast< ::std::string*>(&_default_contactid_);
  is_member_ = 0;
  is_following_ = 0;
  email_ = const_cast< ::std::string*>(&_default_email_);
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  alias_nickname_ = const_cast< ::std::string*>(&_default_alias_nickname_);
  nickname_ = const_cast< ::std::string*>(&_default_nickname_);
  remark_ = const_cast< ::std::string*>(&_default_remark_);
  gender_ = 0;
  age_ = 0;
  icon_name_ = const_cast< ::std::string*>(&_default_icon_name_);
  introduction_ = const_cast< ::std::string*>(&_default_introduction_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSContactEx::~SSContactEx() {
  SharedDtor();
}

void SSContactEx::SharedDtor() {
  if (contactid_ != &_default_contactid_) {
    delete contactid_;
  }
  if (email_ != &_default_email_) {
    delete email_;
  }
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (alias_nickname_ != &_default_alias_nickname_) {
    delete alias_nickname_;
  }
  if (nickname_ != &_default_nickname_) {
    delete nickname_;
  }
  if (remark_ != &_default_remark_) {
    delete remark_;
  }
  if (icon_name_ != &_default_icon_name_) {
    delete icon_name_;
  }
  if (introduction_ != &_default_introduction_) {
    delete introduction_;
  }
  if (this != default_instance_) {
  }
}

void SSContactEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSContactEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSContactEx_descriptor_;
}

const SSContactEx& SSContactEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SSContactEx* SSContactEx::default_instance_ = NULL;

SSContactEx* SSContactEx::New() const {
  return new SSContactEx;
}

void SSContactEx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (contactid_ != &_default_contactid_) {
        contactid_->clear();
      }
    }
    is_member_ = 0;
    is_following_ = 0;
    if (_has_bit(3)) {
      if (email_ != &_default_email_) {
        email_->clear();
      }
    }
    if (_has_bit(4)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(5)) {
      if (alias_nickname_ != &_default_alias_nickname_) {
        alias_nickname_->clear();
      }
    }
    if (_has_bit(6)) {
      if (nickname_ != &_default_nickname_) {
        nickname_->clear();
      }
    }
    if (_has_bit(7)) {
      if (remark_ != &_default_remark_) {
        remark_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gender_ = 0;
    age_ = 0;
    if (_has_bit(10)) {
      if (icon_name_ != &_default_icon_name_) {
        icon_name_->clear();
      }
    }
    if (_has_bit(11)) {
      if (introduction_ != &_default_introduction_) {
        introduction_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSContactEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string contactid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contactid().data(), this->contactid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_member;
        break;
      }
      
      // optional int32 is_member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_member_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_following;
        break;
      }
      
      // optional int32 is_following = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_following:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_following_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_email;
        break;
      }
      
      // optional string email = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userid;
        break;
      }
      
      // optional string userid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_alias_nickname;
        break;
      }
      
      // optional string alias_nickname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alias_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alias_nickname().data(), this->alias_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nickname;
        break;
      }
      
      // optional string nickname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_remark;
        break;
      }
      
      // optional string remark = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gender;
        break;
      }
      
      // optional .SSDataDomain.SSGender gender = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (SSDataDomain::SSGender_IsValid(value)) {
            set_gender(static_cast< SSDataDomain::SSGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_age;
        break;
      }
      
      // optional int32 age = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_icon_name;
        break;
      }
      
      // optional string icon_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon_name().data(), this->icon_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_introduction;
        break;
      }
      
      // optional string introduction = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_introduction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_introduction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->introduction().data(), this->introduction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSContactEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string contactid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactid().data(), this->contactid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->contactid(), output);
  }
  
  // optional int32 is_member = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_member(), output);
  }
  
  // optional int32 is_following = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_following(), output);
  }
  
  // optional string email = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->email(), output);
  }
  
  // optional string userid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->userid(), output);
  }
  
  // optional string alias_nickname = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias_nickname().data(), this->alias_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->alias_nickname(), output);
  }
  
  // optional string nickname = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->nickname(), output);
  }
  
  // optional string remark = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->remark(), output);
  }
  
  // optional .SSDataDomain.SSGender gender = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->gender(), output);
  }
  
  // optional int32 age = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->age(), output);
  }
  
  // optional string icon_name = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_name().data(), this->icon_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->icon_name(), output);
  }
  
  // optional string introduction = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->introduction().data(), this->introduction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->introduction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSContactEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string contactid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactid().data(), this->contactid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contactid(), target);
  }
  
  // optional int32 is_member = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_member(), target);
  }
  
  // optional int32 is_following = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_following(), target);
  }
  
  // optional string email = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->email(), target);
  }
  
  // optional string userid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userid(), target);
  }
  
  // optional string alias_nickname = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias_nickname().data(), this->alias_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->alias_nickname(), target);
  }
  
  // optional string nickname = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nickname(), target);
  }
  
  // optional string remark = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->remark(), target);
  }
  
  // optional .SSDataDomain.SSGender gender = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->gender(), target);
  }
  
  // optional int32 age = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->age(), target);
  }
  
  // optional string icon_name = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon_name().data(), this->icon_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->icon_name(), target);
  }
  
  // optional string introduction = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->introduction().data(), this->introduction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->introduction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSContactEx::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string contactid = 1;
    if (has_contactid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contactid());
    }
    
    // optional int32 is_member = 2;
    if (has_is_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_member());
    }
    
    // optional int32 is_following = 3;
    if (has_is_following()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_following());
    }
    
    // optional string email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }
    
    // optional string userid = 5;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string alias_nickname = 6;
    if (has_alias_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias_nickname());
    }
    
    // optional string nickname = 7;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // optional string remark = 8;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .SSDataDomain.SSGender gender = 9;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
    // optional int32 age = 10;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }
    
    // optional string icon_name = 11;
    if (has_icon_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_name());
    }
    
    // optional string introduction = 12;
    if (has_introduction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->introduction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSContactEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSContactEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSContactEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSContactEx::MergeFrom(const SSContactEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_contactid(from.contactid());
    }
    if (from._has_bit(1)) {
      set_is_member(from.is_member());
    }
    if (from._has_bit(2)) {
      set_is_following(from.is_following());
    }
    if (from._has_bit(3)) {
      set_email(from.email());
    }
    if (from._has_bit(4)) {
      set_userid(from.userid());
    }
    if (from._has_bit(5)) {
      set_alias_nickname(from.alias_nickname());
    }
    if (from._has_bit(6)) {
      set_nickname(from.nickname());
    }
    if (from._has_bit(7)) {
      set_remark(from.remark());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_gender(from.gender());
    }
    if (from._has_bit(9)) {
      set_age(from.age());
    }
    if (from._has_bit(10)) {
      set_icon_name(from.icon_name());
    }
    if (from._has_bit(11)) {
      set_introduction(from.introduction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSContactEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSContactEx::CopyFrom(const SSContactEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSContactEx::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SSContactEx::Swap(SSContactEx* other) {
  if (other != this) {
    std::swap(contactid_, other->contactid_);
    std::swap(is_member_, other->is_member_);
    std::swap(is_following_, other->is_following_);
    std::swap(email_, other->email_);
    std::swap(userid_, other->userid_);
    std::swap(alias_nickname_, other->alias_nickname_);
    std::swap(nickname_, other->nickname_);
    std::swap(remark_, other->remark_);
    std::swap(gender_, other->gender_);
    std::swap(age_, other->age_);
    std::swap(icon_name_, other->icon_name_);
    std::swap(introduction_, other->introduction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSContactEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSContactEx_descriptor_;
  metadata.reflection = SSContactEx_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SSGroup::_default_groupid_;
const ::std::string SSGroup::_default_name_;
const ::std::string SSGroup::_default_binary_;
#ifndef _MSC_VER
const int SSGroup::kGroupidFieldNumber;
const int SSGroup::kNameFieldNumber;
const int SSGroup::kSystemFieldNumber;
const int SSGroup::kBinaryFieldNumber;
#endif  // !_MSC_VER

SSGroup::SSGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSGroup::InitAsDefaultInstance() {
}

SSGroup::SSGroup(const SSGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&_default_groupid_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  system_ = false;
  binary_ = const_cast< ::std::string*>(&_default_binary_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSGroup::~SSGroup() {
  SharedDtor();
}

void SSGroup::SharedDtor() {
  if (groupid_ != &_default_groupid_) {
    delete groupid_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (binary_ != &_default_binary_) {
    delete binary_;
  }
  if (this != default_instance_) {
  }
}

void SSGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSGroup_descriptor_;
}

const SSGroup& SSGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SSGroup* SSGroup::default_instance_ = NULL;

SSGroup* SSGroup::New() const {
  return new SSGroup;
}

void SSGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (groupid_ != &_default_groupid_) {
        groupid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    system_ = false;
    if (_has_bit(3)) {
      if (binary_ != &_default_binary_) {
        binary_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_system;
        break;
      }
      
      // optional bool system = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_system:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &system_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_binary;
        break;
      }
      
      // optional bytes binary = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string groupid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupid(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional bool system = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->system(), output);
  }
  
  // optional bytes binary = 100;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      100, this->binary(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string groupid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional bool system = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->system(), target);
  }
  
  // optional bytes binary = 100;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->binary(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional bool system = 3;
    if (has_system()) {
      total_size += 1 + 1;
    }
    
    // optional bytes binary = 100;
    if (has_binary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSGroup::MergeFrom(const SSGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_groupid(from.groupid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_system(from.system());
    }
    if (from._has_bit(3)) {
      set_binary(from.binary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSGroup::CopyFrom(const SSGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SSGroup::Swap(SSGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(name_, other->name_);
    std::swap(system_, other->system_);
    std::swap(binary_, other->binary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSGroup_descriptor_;
  metadata.reflection = SSGroup_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SSMember::_default_groupid_;
#ifndef _MSC_VER
const int SSMember::kGroupidFieldNumber;
const int SSMember::kMembersFieldNumber;
#endif  // !_MSC_VER

SSMember::SSMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSMember::InitAsDefaultInstance() {
}

SSMember::SSMember(const SSMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSMember::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&_default_groupid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSMember::~SSMember() {
  SharedDtor();
}

void SSMember::SharedDtor() {
  if (groupid_ != &_default_groupid_) {
    delete groupid_;
  }
  if (this != default_instance_) {
  }
}

void SSMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSMember_descriptor_;
}

const SSMember& SSMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SSMember* SSMember::default_instance_ = NULL;

SSMember* SSMember::New() const {
  return new SSMember;
}

void SSMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (groupid_ != &_default_groupid_) {
        groupid_->clear();
      }
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }
      
      // repeated string members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_members()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->members(0).data(), this->members(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string groupid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupid(), output);
  }
  
  // repeated string members = 2;
  for (int i = 0; i < this->members_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->members(i).data(), this->members(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->members(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string groupid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }
  
  // repeated string members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members(i).data(), this->members(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->members(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }
    
  }
  // repeated string members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->members(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSMember::MergeFrom(const SSMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSMember::CopyFrom(const SSMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SSMember::Swap(SSMember* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSMember_descriptor_;
  metadata.reflection = SSMember_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SSClientState::_default_last_recieved_message_;
const ::std::string SSClientState::_default_last_client_identifier_;
const ::std::string SSClientState::_default_sc_last_user_time_;
const ::std::string SSClientState::_default_sc_last_group_time_;
const ::std::string SSClientState::_default_sc_last_contact_time_;
const ::std::string SSClientState::_default_sc_last_member_time_;
const ::std::string SSClientState::_default_sc_last_follow_time_;
const ::std::string SSClientState::_default_sc_last_send_time_;
const ::std::string SSClientState::_default_sc_last_recv_time_;
const ::std::string SSClientState::_default_sc_last_favo_time_;
const ::std::string SSClientState::_default_binary_;
#ifndef _MSC_VER
const int SSClientState::kLastSendTimeFieldNumber;
const int SSClientState::kLastRecievedMessageFieldNumber;
const int SSClientState::kLastFetchTimeFieldNumber;
const int SSClientState::kLastSeqNumberFieldNumber;
const int SSClientState::kLastLogoutTimeFieldNumber;
const int SSClientState::kLastClientIdentifierFieldNumber;
const int SSClientState::kScLastUserTimeFieldNumber;
const int SSClientState::kScLastGroupTimeFieldNumber;
const int SSClientState::kScLastContactTimeFieldNumber;
const int SSClientState::kScLastMemberTimeFieldNumber;
const int SSClientState::kScLastFollowTimeFieldNumber;
const int SSClientState::kScLastSendTimeFieldNumber;
const int SSClientState::kScLastRecvTimeFieldNumber;
const int SSClientState::kScLastFavoTimeFieldNumber;
const int SSClientState::kBinaryFieldNumber;
#endif  // !_MSC_VER

SSClientState::SSClientState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSClientState::InitAsDefaultInstance() {
}

SSClientState::SSClientState(const SSClientState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSClientState::SharedCtor() {
  _cached_size_ = 0;
  last_send_time_ = GOOGLE_LONGLONG(0);
  last_recieved_message_ = const_cast< ::std::string*>(&_default_last_recieved_message_);
  last_fetch_time_ = GOOGLE_LONGLONG(0);
  last_seq_number_ = 0;
  last_logout_time_ = GOOGLE_LONGLONG(0);
  last_client_identifier_ = const_cast< ::std::string*>(&_default_last_client_identifier_);
  sc_last_user_time_ = const_cast< ::std::string*>(&_default_sc_last_user_time_);
  sc_last_group_time_ = const_cast< ::std::string*>(&_default_sc_last_group_time_);
  sc_last_contact_time_ = const_cast< ::std::string*>(&_default_sc_last_contact_time_);
  sc_last_member_time_ = const_cast< ::std::string*>(&_default_sc_last_member_time_);
  sc_last_follow_time_ = const_cast< ::std::string*>(&_default_sc_last_follow_time_);
  sc_last_send_time_ = const_cast< ::std::string*>(&_default_sc_last_send_time_);
  sc_last_recv_time_ = const_cast< ::std::string*>(&_default_sc_last_recv_time_);
  sc_last_favo_time_ = const_cast< ::std::string*>(&_default_sc_last_favo_time_);
  binary_ = const_cast< ::std::string*>(&_default_binary_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSClientState::~SSClientState() {
  SharedDtor();
}

void SSClientState::SharedDtor() {
  if (last_recieved_message_ != &_default_last_recieved_message_) {
    delete last_recieved_message_;
  }
  if (last_client_identifier_ != &_default_last_client_identifier_) {
    delete last_client_identifier_;
  }
  if (sc_last_user_time_ != &_default_sc_last_user_time_) {
    delete sc_last_user_time_;
  }
  if (sc_last_group_time_ != &_default_sc_last_group_time_) {
    delete sc_last_group_time_;
  }
  if (sc_last_contact_time_ != &_default_sc_last_contact_time_) {
    delete sc_last_contact_time_;
  }
  if (sc_last_member_time_ != &_default_sc_last_member_time_) {
    delete sc_last_member_time_;
  }
  if (sc_last_follow_time_ != &_default_sc_last_follow_time_) {
    delete sc_last_follow_time_;
  }
  if (sc_last_send_time_ != &_default_sc_last_send_time_) {
    delete sc_last_send_time_;
  }
  if (sc_last_recv_time_ != &_default_sc_last_recv_time_) {
    delete sc_last_recv_time_;
  }
  if (sc_last_favo_time_ != &_default_sc_last_favo_time_) {
    delete sc_last_favo_time_;
  }
  if (binary_ != &_default_binary_) {
    delete binary_;
  }
  if (this != default_instance_) {
  }
}

void SSClientState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSClientState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSClientState_descriptor_;
}

const SSClientState& SSClientState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SSClientState* SSClientState::default_instance_ = NULL;

SSClientState* SSClientState::New() const {
  return new SSClientState;
}

void SSClientState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_send_time_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (last_recieved_message_ != &_default_last_recieved_message_) {
        last_recieved_message_->clear();
      }
    }
    last_fetch_time_ = GOOGLE_LONGLONG(0);
    last_seq_number_ = 0;
    last_logout_time_ = GOOGLE_LONGLONG(0);
    if (_has_bit(5)) {
      if (last_client_identifier_ != &_default_last_client_identifier_) {
        last_client_identifier_->clear();
      }
    }
    if (_has_bit(6)) {
      if (sc_last_user_time_ != &_default_sc_last_user_time_) {
        sc_last_user_time_->clear();
      }
    }
    if (_has_bit(7)) {
      if (sc_last_group_time_ != &_default_sc_last_group_time_) {
        sc_last_group_time_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (sc_last_contact_time_ != &_default_sc_last_contact_time_) {
        sc_last_contact_time_->clear();
      }
    }
    if (_has_bit(9)) {
      if (sc_last_member_time_ != &_default_sc_last_member_time_) {
        sc_last_member_time_->clear();
      }
    }
    if (_has_bit(10)) {
      if (sc_last_follow_time_ != &_default_sc_last_follow_time_) {
        sc_last_follow_time_->clear();
      }
    }
    if (_has_bit(11)) {
      if (sc_last_send_time_ != &_default_sc_last_send_time_) {
        sc_last_send_time_->clear();
      }
    }
    if (_has_bit(12)) {
      if (sc_last_recv_time_ != &_default_sc_last_recv_time_) {
        sc_last_recv_time_->clear();
      }
    }
    if (_has_bit(13)) {
      if (sc_last_favo_time_ != &_default_sc_last_favo_time_) {
        sc_last_favo_time_->clear();
      }
    }
    if (_has_bit(14)) {
      if (binary_ != &_default_binary_) {
        binary_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSClientState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_send_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_send_time_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_last_recieved_message;
        break;
      }
      
      // optional string last_recieved_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_recieved_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_recieved_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_recieved_message().data(), this->last_recieved_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_fetch_time;
        break;
      }
      
      // optional int64 last_fetch_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_fetch_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_fetch_time_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_seq_number;
        break;
      }
      
      // optional int32 last_seq_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_seq_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_seq_number_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_logout_time;
        break;
      }
      
      // optional int64 last_logout_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_logout_time_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_last_client_identifier;
        break;
      }
      
      // optional string last_client_identifier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_client_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_client_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_client_identifier().data(), this->last_client_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sc_last_user_time;
        break;
      }
      
      // optional string sc_last_user_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sc_last_user_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_last_user_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sc_last_user_time().data(), this->sc_last_user_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sc_last_group_time;
        break;
      }
      
      // optional string sc_last_group_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sc_last_group_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_last_group_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sc_last_group_time().data(), this->sc_last_group_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sc_last_contact_time;
        break;
      }
      
      // optional string sc_last_contact_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sc_last_contact_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_last_contact_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sc_last_contact_time().data(), this->sc_last_contact_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_sc_last_member_time;
        break;
      }
      
      // optional string sc_last_member_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sc_last_member_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_last_member_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sc_last_member_time().data(), this->sc_last_member_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_sc_last_follow_time;
        break;
      }
      
      // optional string sc_last_follow_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sc_last_follow_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_last_follow_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sc_last_follow_time().data(), this->sc_last_follow_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sc_last_send_time;
        break;
      }
      
      // optional string sc_last_send_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sc_last_send_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_last_send_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sc_last_send_time().data(), this->sc_last_send_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sc_last_recv_time;
        break;
      }
      
      // optional string sc_last_recv_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sc_last_recv_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_last_recv_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sc_last_recv_time().data(), this->sc_last_recv_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_sc_last_favo_time;
        break;
      }
      
      // optional string sc_last_favo_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sc_last_favo_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_last_favo_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sc_last_favo_time().data(), this->sc_last_favo_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_binary;
        break;
      }
      
      // optional bytes binary = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSClientState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 last_send_time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_send_time(), output);
  }
  
  // optional string last_recieved_message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_recieved_message().data(), this->last_recieved_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->last_recieved_message(), output);
  }
  
  // optional int64 last_fetch_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_fetch_time(), output);
  }
  
  // optional int32 last_seq_number = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->last_seq_number(), output);
  }
  
  // optional int64 last_logout_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_logout_time(), output);
  }
  
  // optional string last_client_identifier = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_client_identifier().data(), this->last_client_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->last_client_identifier(), output);
  }
  
  // optional string sc_last_user_time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_user_time().data(), this->sc_last_user_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sc_last_user_time(), output);
  }
  
  // optional string sc_last_group_time = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_group_time().data(), this->sc_last_group_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sc_last_group_time(), output);
  }
  
  // optional string sc_last_contact_time = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_contact_time().data(), this->sc_last_contact_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->sc_last_contact_time(), output);
  }
  
  // optional string sc_last_member_time = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_member_time().data(), this->sc_last_member_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->sc_last_member_time(), output);
  }
  
  // optional string sc_last_follow_time = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_follow_time().data(), this->sc_last_follow_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->sc_last_follow_time(), output);
  }
  
  // optional string sc_last_send_time = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_send_time().data(), this->sc_last_send_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->sc_last_send_time(), output);
  }
  
  // optional string sc_last_recv_time = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_recv_time().data(), this->sc_last_recv_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->sc_last_recv_time(), output);
  }
  
  // optional string sc_last_favo_time = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_favo_time().data(), this->sc_last_favo_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->sc_last_favo_time(), output);
  }
  
  // optional bytes binary = 100;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      100, this->binary(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSClientState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 last_send_time = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_send_time(), target);
  }
  
  // optional string last_recieved_message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_recieved_message().data(), this->last_recieved_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->last_recieved_message(), target);
  }
  
  // optional int64 last_fetch_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_fetch_time(), target);
  }
  
  // optional int32 last_seq_number = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->last_seq_number(), target);
  }
  
  // optional int64 last_logout_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_logout_time(), target);
  }
  
  // optional string last_client_identifier = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_client_identifier().data(), this->last_client_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->last_client_identifier(), target);
  }
  
  // optional string sc_last_user_time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_user_time().data(), this->sc_last_user_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sc_last_user_time(), target);
  }
  
  // optional string sc_last_group_time = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_group_time().data(), this->sc_last_group_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sc_last_group_time(), target);
  }
  
  // optional string sc_last_contact_time = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_contact_time().data(), this->sc_last_contact_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sc_last_contact_time(), target);
  }
  
  // optional string sc_last_member_time = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_member_time().data(), this->sc_last_member_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->sc_last_member_time(), target);
  }
  
  // optional string sc_last_follow_time = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_follow_time().data(), this->sc_last_follow_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sc_last_follow_time(), target);
  }
  
  // optional string sc_last_send_time = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_send_time().data(), this->sc_last_send_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sc_last_send_time(), target);
  }
  
  // optional string sc_last_recv_time = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_recv_time().data(), this->sc_last_recv_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->sc_last_recv_time(), target);
  }
  
  // optional string sc_last_favo_time = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sc_last_favo_time().data(), this->sc_last_favo_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->sc_last_favo_time(), target);
  }
  
  // optional bytes binary = 100;
  if (_has_bit(14)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->binary(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSClientState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_send_time = 1;
    if (has_last_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_send_time());
    }
    
    // optional string last_recieved_message = 2;
    if (has_last_recieved_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_recieved_message());
    }
    
    // optional int64 last_fetch_time = 3;
    if (has_last_fetch_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_fetch_time());
    }
    
    // optional int32 last_seq_number = 4;
    if (has_last_seq_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_seq_number());
    }
    
    // optional int64 last_logout_time = 5;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_logout_time());
    }
    
    // optional string last_client_identifier = 6;
    if (has_last_client_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_client_identifier());
    }
    
    // optional string sc_last_user_time = 7;
    if (has_sc_last_user_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sc_last_user_time());
    }
    
    // optional string sc_last_group_time = 8;
    if (has_sc_last_group_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sc_last_group_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string sc_last_contact_time = 9;
    if (has_sc_last_contact_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sc_last_contact_time());
    }
    
    // optional string sc_last_member_time = 10;
    if (has_sc_last_member_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sc_last_member_time());
    }
    
    // optional string sc_last_follow_time = 11;
    if (has_sc_last_follow_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sc_last_follow_time());
    }
    
    // optional string sc_last_send_time = 12;
    if (has_sc_last_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sc_last_send_time());
    }
    
    // optional string sc_last_recv_time = 13;
    if (has_sc_last_recv_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sc_last_recv_time());
    }
    
    // optional string sc_last_favo_time = 14;
    if (has_sc_last_favo_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sc_last_favo_time());
    }
    
    // optional bytes binary = 100;
    if (has_binary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSClientState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSClientState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSClientState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSClientState::MergeFrom(const SSClientState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_last_send_time(from.last_send_time());
    }
    if (from._has_bit(1)) {
      set_last_recieved_message(from.last_recieved_message());
    }
    if (from._has_bit(2)) {
      set_last_fetch_time(from.last_fetch_time());
    }
    if (from._has_bit(3)) {
      set_last_seq_number(from.last_seq_number());
    }
    if (from._has_bit(4)) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from._has_bit(5)) {
      set_last_client_identifier(from.last_client_identifier());
    }
    if (from._has_bit(6)) {
      set_sc_last_user_time(from.sc_last_user_time());
    }
    if (from._has_bit(7)) {
      set_sc_last_group_time(from.sc_last_group_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_sc_last_contact_time(from.sc_last_contact_time());
    }
    if (from._has_bit(9)) {
      set_sc_last_member_time(from.sc_last_member_time());
    }
    if (from._has_bit(10)) {
      set_sc_last_follow_time(from.sc_last_follow_time());
    }
    if (from._has_bit(11)) {
      set_sc_last_send_time(from.sc_last_send_time());
    }
    if (from._has_bit(12)) {
      set_sc_last_recv_time(from.sc_last_recv_time());
    }
    if (from._has_bit(13)) {
      set_sc_last_favo_time(from.sc_last_favo_time());
    }
    if (from._has_bit(14)) {
      set_binary(from.binary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSClientState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSClientState::CopyFrom(const SSClientState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSClientState::IsInitialized() const {
  
  return true;
}

void SSClientState::Swap(SSClientState* other) {
  if (other != this) {
    std::swap(last_send_time_, other->last_send_time_);
    std::swap(last_recieved_message_, other->last_recieved_message_);
    std::swap(last_fetch_time_, other->last_fetch_time_);
    std::swap(last_seq_number_, other->last_seq_number_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(last_client_identifier_, other->last_client_identifier_);
    std::swap(sc_last_user_time_, other->sc_last_user_time_);
    std::swap(sc_last_group_time_, other->sc_last_group_time_);
    std::swap(sc_last_contact_time_, other->sc_last_contact_time_);
    std::swap(sc_last_member_time_, other->sc_last_member_time_);
    std::swap(sc_last_follow_time_, other->sc_last_follow_time_);
    std::swap(sc_last_send_time_, other->sc_last_send_time_);
    std::swap(sc_last_recv_time_, other->sc_last_recv_time_);
    std::swap(sc_last_favo_time_, other->sc_last_favo_time_);
    std::swap(binary_, other->binary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSClientState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSClientState_descriptor_;
  metadata.reflection = SSClientState_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SSMessageState::_default_userid_;
#ifndef _MSC_VER
const int SSMessageState::kUseridFieldNumber;
const int SSMessageState::kSeqNumberFieldNumber;
#endif  // !_MSC_VER

SSMessageState::SSMessageState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSMessageState::InitAsDefaultInstance() {
}

SSMessageState::SSMessageState(const SSMessageState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSMessageState::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  seq_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSMessageState::~SSMessageState() {
  SharedDtor();
}

void SSMessageState::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void SSMessageState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSMessageState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSMessageState_descriptor_;
}

const SSMessageState& SSMessageState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SSMessageState* SSMessageState::default_instance_ = NULL;

SSMessageState* SSMessageState::New() const {
  return new SSMessageState;
}

void SSMessageState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    seq_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSMessageState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq_number;
        break;
      }
      
      // required int32 seq_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_number_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSMessageState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // required int32 seq_number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seq_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSMessageState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // required int32 seq_number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seq_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSMessageState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required int32 seq_number = 2;
    if (has_seq_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSMessageState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSMessageState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSMessageState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSMessageState::MergeFrom(const SSMessageState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_seq_number(from.seq_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSMessageState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSMessageState::CopyFrom(const SSMessageState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSMessageState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SSMessageState::Swap(SSMessageState* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(seq_number_, other->seq_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSMessageState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSMessageState_descriptor_;
  metadata.reflection = SSMessageState_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SSSessionInfo::_default_userid_;
#ifndef _MSC_VER
const int SSSessionInfo::kUseridFieldNumber;
const int SSSessionInfo::kClientStateFieldNumber;
const int SSSessionInfo::kMessageStateFieldNumber;
#endif  // !_MSC_VER

SSSessionInfo::SSSessionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSSessionInfo::InitAsDefaultInstance() {
  client_state_ = const_cast< ::SSDataDomain::SSClientState*>(&::SSDataDomain::SSClientState::default_instance());
}

SSSessionInfo::SSSessionInfo(const SSSessionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSSessionInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  client_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSSessionInfo::~SSSessionInfo() {
  SharedDtor();
}

void SSSessionInfo::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
    delete client_state_;
  }
}

void SSSessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSSessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSSessionInfo_descriptor_;
}

const SSSessionInfo& SSSessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SSSessionInfo* SSSessionInfo::default_instance_ = NULL;

SSSessionInfo* SSSessionInfo::New() const {
  return new SSSessionInfo;
}

void SSSessionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (client_state_ != NULL) client_state_->::SSDataDomain::SSClientState::Clear();
    }
  }
  message_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_state;
        break;
      }
      
      // optional .SSDataDomain.SSClientState client_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message_state;
        break;
      }
      
      // repeated .SSDataDomain.SSMessageState message_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_message_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // optional .SSDataDomain.SSClientState client_state = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client_state(), output);
  }
  
  // repeated .SSDataDomain.SSMessageState message_state = 3;
  for (int i = 0; i < this->message_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->message_state(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSSessionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // optional .SSDataDomain.SSClientState client_state = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->client_state(), target);
  }
  
  // repeated .SSDataDomain.SSMessageState message_state = 3;
  for (int i = 0; i < this->message_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->message_state(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSSessionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional .SSDataDomain.SSClientState client_state = 2;
    if (has_client_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_state());
    }
    
  }
  // repeated .SSDataDomain.SSMessageState message_state = 3;
  total_size += 1 * this->message_state_size();
  for (int i = 0; i < this->message_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->message_state(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSSessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSSessionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSSessionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSSessionInfo::MergeFrom(const SSSessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  message_state_.MergeFrom(from.message_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      mutable_client_state()->::SSDataDomain::SSClientState::MergeFrom(from.client_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSSessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSSessionInfo::CopyFrom(const SSSessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSSessionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < message_state_size(); i++) {
    if (!this->message_state(i).IsInitialized()) return false;
  }
  return true;
}

void SSSessionInfo::Swap(SSSessionInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(client_state_, other->client_state_);
    message_state_.Swap(&other->message_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSSessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSSessionInfo_descriptor_;
  metadata.reflection = SSSessionInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SSMessage::_default_msgid_;
const ::std::string SSMessage::_default_sender_;
const ::std::string SSMessage::_default_root_msgid_;
const ::std::string SSMessage::_default_parent_msgid_;
const ::std::string SSMessage::_default_subject_;
const ::std::string SSMessage::_default_content_;
#ifndef _MSC_VER
const int SSMessage::kMsgidFieldNumber;
const int SSMessage::kSeqNumberFieldNumber;
const int SSMessage::kTimestampFieldNumber;
const int SSMessage::kSenderFieldNumber;
const int SSMessage::kRecieversFieldNumber;
const int SSMessage::kRootMsgidFieldNumber;
const int SSMessage::kParentMsgidFieldNumber;
const int SSMessage::kSubjectFieldNumber;
const int SSMessage::kContentTypeFieldNumber;
const int SSMessage::kContentFieldNumber;
#endif  // !_MSC_VER

SSMessage::SSMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSMessage::InitAsDefaultInstance() {
}

SSMessage::SSMessage(const SSMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSMessage::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = const_cast< ::std::string*>(&_default_msgid_);
  seq_number_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  sender_ = const_cast< ::std::string*>(&_default_sender_);
  root_msgid_ = const_cast< ::std::string*>(&_default_root_msgid_);
  parent_msgid_ = const_cast< ::std::string*>(&_default_parent_msgid_);
  subject_ = const_cast< ::std::string*>(&_default_subject_);
  content_type_ = 0;
  content_ = const_cast< ::std::string*>(&_default_content_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSMessage::~SSMessage() {
  SharedDtor();
}

void SSMessage::SharedDtor() {
  if (msgid_ != &_default_msgid_) {
    delete msgid_;
  }
  if (sender_ != &_default_sender_) {
    delete sender_;
  }
  if (root_msgid_ != &_default_root_msgid_) {
    delete root_msgid_;
  }
  if (parent_msgid_ != &_default_parent_msgid_) {
    delete parent_msgid_;
  }
  if (subject_ != &_default_subject_) {
    delete subject_;
  }
  if (content_ != &_default_content_) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SSMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSMessage_descriptor_;
}

const SSMessage& SSMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SSMessage* SSMessage::default_instance_ = NULL;

SSMessage* SSMessage::New() const {
  return new SSMessage;
}

void SSMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msgid_ != &_default_msgid_) {
        msgid_->clear();
      }
    }
    seq_number_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    if (_has_bit(3)) {
      if (sender_ != &_default_sender_) {
        sender_->clear();
      }
    }
    if (_has_bit(5)) {
      if (root_msgid_ != &_default_root_msgid_) {
        root_msgid_->clear();
      }
    }
    if (_has_bit(6)) {
      if (parent_msgid_ != &_default_parent_msgid_) {
        parent_msgid_->clear();
      }
    }
    if (_has_bit(7)) {
      if (subject_ != &_default_subject_) {
        subject_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    content_type_ = 0;
    if (_has_bit(9)) {
      if (content_ != &_default_content_) {
        content_->clear();
      }
    }
  }
  recievers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq_number;
        break;
      }
      
      // optional int32 seq_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_number_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }
      
      // required int64 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sender;
        break;
      }
      
      // required string sender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recievers;
        break;
      }
      
      // repeated string recievers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recievers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recievers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recievers(0).data(), this->recievers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recievers;
        if (input->ExpectTag(58)) goto parse_root_msgid;
        break;
      }
      
      // optional string root_msgid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_root_msgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->root_msgid().data(), this->root_msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_parent_msgid;
        break;
      }
      
      // optional string parent_msgid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_msgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parent_msgid().data(), this->parent_msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_subject;
        break;
      }
      
      // required string subject = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_content_type;
        break;
      }
      
      // required .SSDataDomain.SSContentType content_type = 10 [default = NORMAL];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (SSDataDomain::SSContentType_IsValid(value)) {
            set_content_type(static_cast< SSDataDomain::SSContentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_content;
        break;
      }
      
      // optional bytes content = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgid(), output);
  }
  
  // optional int32 seq_number = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seq_number(), output);
  }
  
  // required int64 timestamp = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }
  
  // required string sender = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sender(), output);
  }
  
  // repeated string recievers = 6;
  for (int i = 0; i < this->recievers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recievers(i).data(), this->recievers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->recievers(i), output);
  }
  
  // optional string root_msgid = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->root_msgid().data(), this->root_msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->root_msgid(), output);
  }
  
  // optional string parent_msgid = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent_msgid().data(), this->parent_msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->parent_msgid(), output);
  }
  
  // required string subject = 9;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->subject(), output);
  }
  
  // required .SSDataDomain.SSContentType content_type = 10 [default = NORMAL];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->content_type(), output);
  }
  
  // optional bytes content = 11;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgid(), target);
  }
  
  // optional int32 seq_number = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seq_number(), target);
  }
  
  // required int64 timestamp = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }
  
  // required string sender = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sender(), target);
  }
  
  // repeated string recievers = 6;
  for (int i = 0; i < this->recievers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recievers(i).data(), this->recievers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->recievers(i), target);
  }
  
  // optional string root_msgid = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->root_msgid().data(), this->root_msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->root_msgid(), target);
  }
  
  // optional string parent_msgid = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent_msgid().data(), this->parent_msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->parent_msgid(), target);
  }
  
  // required string subject = 9;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->subject(), target);
  }
  
  // required .SSDataDomain.SSContentType content_type = 10 [default = NORMAL];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->content_type(), target);
  }
  
  // optional bytes content = 11;
  if (_has_bit(9)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgid());
    }
    
    // optional int32 seq_number = 3;
    if (has_seq_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq_number());
    }
    
    // required int64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
    // required string sender = 5;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }
    
    // optional string root_msgid = 7;
    if (has_root_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_msgid());
    }
    
    // optional string parent_msgid = 8;
    if (has_parent_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_msgid());
    }
    
    // required string subject = 9;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .SSDataDomain.SSContentType content_type = 10 [default = NORMAL];
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->content_type());
    }
    
    // optional bytes content = 11;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
  }
  // repeated string recievers = 6;
  total_size += 1 * this->recievers_size();
  for (int i = 0; i < this->recievers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recievers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSMessage::MergeFrom(const SSMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  recievers_.MergeFrom(from.recievers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_seq_number(from.seq_number());
    }
    if (from._has_bit(2)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(3)) {
      set_sender(from.sender());
    }
    if (from._has_bit(5)) {
      set_root_msgid(from.root_msgid());
    }
    if (from._has_bit(6)) {
      set_parent_msgid(from.parent_msgid());
    }
    if (from._has_bit(7)) {
      set_subject(from.subject());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_content_type(from.content_type());
    }
    if (from._has_bit(9)) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSMessage::CopyFrom(const SSMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000018c) != 0x0000018c) return false;
  
  return true;
}

void SSMessage::Swap(SSMessage* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(seq_number_, other->seq_number_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(sender_, other->sender_);
    recievers_.Swap(&other->recievers_);
    std::swap(root_msgid_, other->root_msgid_);
    std::swap(parent_msgid_, other->parent_msgid_);
    std::swap(subject_, other->subject_);
    std::swap(content_type_, other->content_type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSMessage_descriptor_;
  metadata.reflection = SSMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ServiceResult::_default_message_;
#ifndef _MSC_VER
const int ServiceResult::kCodeFieldNumber;
const int ServiceResult::kMessageFieldNumber;
#endif  // !_MSC_VER

ServiceResult::ServiceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceResult::InitAsDefaultInstance() {
}

ServiceResult::ServiceResult(const ServiceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceResult::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceResult::~ServiceResult() {
  SharedDtor();
}

void ServiceResult::SharedDtor() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ServiceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceResult_descriptor_;
}

const ServiceResult& ServiceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

ServiceResult* ServiceResult::default_instance_ = NULL;

ServiceResult* ServiceResult::New() const {
  return new ServiceResult;
}

void ServiceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (_has_bit(1)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceCode code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (SSDataDomain::ServiceCode_IsValid(value)) {
            set_code(static_cast< SSDataDomain::ServiceCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceCode code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceCode code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceCode code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }
    
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceResult::MergeFrom(const ServiceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_code(from.code());
    }
    if (from._has_bit(1)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceResult::CopyFrom(const ServiceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ServiceResult::Swap(ServiceResult* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceResult_descriptor_;
  metadata.reflection = ServiceResult_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CreateAccountRequest::_default_userid_;
const ::std::string CreateAccountRequest::_default_password_;
const ::std::string CreateAccountRequest::_default_email_;
const ::std::string CreateAccountRequest::_default_nickname_;
#ifndef _MSC_VER
const int CreateAccountRequest::kUseridFieldNumber;
const int CreateAccountRequest::kPasswordFieldNumber;
const int CreateAccountRequest::kEmailFieldNumber;
const int CreateAccountRequest::kNicknameFieldNumber;
#endif  // !_MSC_VER

CreateAccountRequest::CreateAccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateAccountRequest::InitAsDefaultInstance() {
}

CreateAccountRequest::CreateAccountRequest(const CreateAccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateAccountRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  password_ = const_cast< ::std::string*>(&_default_password_);
  email_ = const_cast< ::std::string*>(&_default_email_);
  nickname_ = const_cast< ::std::string*>(&_default_nickname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateAccountRequest::~CreateAccountRequest() {
  SharedDtor();
}

void CreateAccountRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (email_ != &_default_email_) {
    delete email_;
  }
  if (nickname_ != &_default_nickname_) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void CreateAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateAccountRequest_descriptor_;
}

const CreateAccountRequest& CreateAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

CreateAccountRequest* CreateAccountRequest::default_instance_ = NULL;

CreateAccountRequest* CreateAccountRequest::New() const {
  return new CreateAccountRequest;
}

void CreateAccountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
    if (_has_bit(2)) {
      if (email_ != &_default_email_) {
        email_->clear();
      }
    }
    if (_has_bit(3)) {
      if (nickname_ != &_default_nickname_) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }
      
      // required string email = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }
      
      // required string nickname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // required string password = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // required string email = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->email(), output);
  }
  
  // required string nickname = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nickname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // required string password = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // required string email = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }
  
  // required string nickname = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateAccountRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // required string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }
    
    // required string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateAccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateAccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateAccountRequest::MergeFrom(const CreateAccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_password(from.password());
    }
    if (from._has_bit(2)) {
      set_email(from.email());
    }
    if (from._has_bit(3)) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAccountRequest::CopyFrom(const CreateAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CreateAccountRequest::Swap(CreateAccountRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(email_, other->email_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateAccountRequest_descriptor_;
  metadata.reflection = CreateAccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateAccountResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CreateAccountResponse::CreateAccountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateAccountResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

CreateAccountResponse::CreateAccountResponse(const CreateAccountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateAccountResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateAccountResponse::~CreateAccountResponse() {
  SharedDtor();
}

void CreateAccountResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void CreateAccountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAccountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateAccountResponse_descriptor_;
}

const CreateAccountResponse& CreateAccountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

CreateAccountResponse* CreateAccountResponse::default_instance_ = NULL;

CreateAccountResponse* CreateAccountResponse::New() const {
  return new CreateAccountResponse;
}

void CreateAccountResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateAccountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateAccountResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateAccountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateAccountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateAccountResponse::MergeFrom(const CreateAccountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAccountResponse::CopyFrom(const CreateAccountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void CreateAccountResponse::Swap(CreateAccountResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateAccountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateAccountResponse_descriptor_;
  metadata.reflection = CreateAccountResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetAccountRequest::_default_userid_;
#ifndef _MSC_VER
const int GetAccountRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

GetAccountRequest::GetAccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAccountRequest::InitAsDefaultInstance() {
}

GetAccountRequest::GetAccountRequest(const GetAccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAccountRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountRequest::~GetAccountRequest() {
  SharedDtor();
}

void GetAccountRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountRequest_descriptor_;
}

const GetAccountRequest& GetAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetAccountRequest* GetAccountRequest::default_instance_ = NULL;

GetAccountRequest* GetAccountRequest::New() const {
  return new GetAccountRequest;
}

void GetAccountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAccountRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountRequest::MergeFrom(const GetAccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountRequest::CopyFrom(const GetAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetAccountRequest::Swap(GetAccountRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountRequest_descriptor_;
  metadata.reflection = GetAccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccountResponse::kResultFieldNumber;
const int GetAccountResponse::kAccountFieldNumber;
#endif  // !_MSC_VER

GetAccountResponse::GetAccountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAccountResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
  account_ = const_cast< ::SSDataDomain::SSAccount*>(&::SSDataDomain::SSAccount::default_instance());
}

GetAccountResponse::GetAccountResponse(const GetAccountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAccountResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountResponse::~GetAccountResponse() {
  SharedDtor();
}

void GetAccountResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete account_;
  }
}

void GetAccountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountResponse_descriptor_;
}

const GetAccountResponse& GetAccountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetAccountResponse* GetAccountResponse::default_instance_ = NULL;

GetAccountResponse* GetAccountResponse::New() const {
  return new GetAccountResponse;
}

void GetAccountResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
    if (_has_bit(1)) {
      if (account_ != NULL) account_->::SSDataDomain::SSAccount::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }
      
      // optional .SSDataDomain.SSAccount account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // optional .SSDataDomain.SSAccount account = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAccountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // optional .SSDataDomain.SSAccount account = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAccountResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
    // optional .SSDataDomain.SSAccount account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountResponse::MergeFrom(const GetAccountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
    if (from._has_bit(1)) {
      mutable_account()->::SSDataDomain::SSAccount::MergeFrom(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountResponse::CopyFrom(const GetAccountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_account()) {
    if (!this->account().IsInitialized()) return false;
  }
  return true;
}

void GetAccountResponse::Swap(GetAccountResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountResponse_descriptor_;
  metadata.reflection = GetAccountResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ChangePasswordRequest::_default_userid_;
const ::std::string ChangePasswordRequest::_default_new_password_;
#ifndef _MSC_VER
const int ChangePasswordRequest::kUseridFieldNumber;
const int ChangePasswordRequest::kNewPasswordFieldNumber;
#endif  // !_MSC_VER

ChangePasswordRequest::ChangePasswordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangePasswordRequest::InitAsDefaultInstance() {
}

ChangePasswordRequest::ChangePasswordRequest(const ChangePasswordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangePasswordRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  new_password_ = const_cast< ::std::string*>(&_default_new_password_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePasswordRequest::~ChangePasswordRequest() {
  SharedDtor();
}

void ChangePasswordRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (new_password_ != &_default_new_password_) {
    delete new_password_;
  }
  if (this != default_instance_) {
  }
}

void ChangePasswordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePasswordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePasswordRequest_descriptor_;
}

const ChangePasswordRequest& ChangePasswordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

ChangePasswordRequest* ChangePasswordRequest::default_instance_ = NULL;

ChangePasswordRequest* ChangePasswordRequest::New() const {
  return new ChangePasswordRequest;
}

void ChangePasswordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (new_password_ != &_default_new_password_) {
        new_password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePasswordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_password;
        break;
      }
      
      // required string new_password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_password().data(), this->new_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangePasswordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // required string new_password = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_password().data(), this->new_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangePasswordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // required string new_password = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_password().data(), this->new_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangePasswordRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required string new_password = 2;
    if (has_new_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePasswordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePasswordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePasswordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePasswordRequest::MergeFrom(const ChangePasswordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_new_password(from.new_password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePasswordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePasswordRequest::CopyFrom(const ChangePasswordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePasswordRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ChangePasswordRequest::Swap(ChangePasswordRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(new_password_, other->new_password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePasswordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePasswordRequest_descriptor_;
  metadata.reflection = ChangePasswordRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePasswordResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ChangePasswordResponse::ChangePasswordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangePasswordResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

ChangePasswordResponse::ChangePasswordResponse(const ChangePasswordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangePasswordResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePasswordResponse::~ChangePasswordResponse() {
  SharedDtor();
}

void ChangePasswordResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ChangePasswordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePasswordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePasswordResponse_descriptor_;
}

const ChangePasswordResponse& ChangePasswordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

ChangePasswordResponse* ChangePasswordResponse::default_instance_ = NULL;

ChangePasswordResponse* ChangePasswordResponse::New() const {
  return new ChangePasswordResponse;
}

void ChangePasswordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePasswordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangePasswordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangePasswordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangePasswordResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePasswordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePasswordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePasswordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePasswordResponse::MergeFrom(const ChangePasswordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePasswordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePasswordResponse::CopyFrom(const ChangePasswordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePasswordResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ChangePasswordResponse::Swap(ChangePasswordResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePasswordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePasswordResponse_descriptor_;
  metadata.reflection = ChangePasswordResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserExistRequest::kUseridListFieldNumber;
#endif  // !_MSC_VER

UserExistRequest::UserExistRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserExistRequest::InitAsDefaultInstance() {
}

UserExistRequest::UserExistRequest(const UserExistRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserExistRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserExistRequest::~UserExistRequest() {
  SharedDtor();
}

void UserExistRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserExistRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserExistRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserExistRequest_descriptor_;
}

const UserExistRequest& UserExistRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

UserExistRequest* UserExistRequest::default_instance_ = NULL;

UserExistRequest* UserExistRequest::New() const {
  return new UserExistRequest;
}

void UserExistRequest::Clear() {
  userid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserExistRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string userid_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_userid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid_list(0).data(), this->userid_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserExistRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string userid_list = 1;
  for (int i = 0; i < this->userid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->userid_list(i).data(), this->userid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserExistRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string userid_list = 1;
  for (int i = 0; i < this->userid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid_list(i).data(), this->userid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->userid_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserExistRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated string userid_list = 1;
  total_size += 1 * this->userid_list_size();
  for (int i = 0; i < this->userid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->userid_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserExistRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserExistRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserExistRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserExistRequest::MergeFrom(const UserExistRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  userid_list_.MergeFrom(from.userid_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserExistRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserExistRequest::CopyFrom(const UserExistRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserExistRequest::IsInitialized() const {
  
  return true;
}

void UserExistRequest::Swap(UserExistRequest* other) {
  if (other != this) {
    userid_list_.Swap(&other->userid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserExistRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserExistRequest_descriptor_;
  metadata.reflection = UserExistRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserExistResponse::kResultFieldNumber;
const int UserExistResponse::kExistUseridListFieldNumber;
#endif  // !_MSC_VER

UserExistResponse::UserExistResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserExistResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

UserExistResponse::UserExistResponse(const UserExistResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserExistResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserExistResponse::~UserExistResponse() {
  SharedDtor();
}

void UserExistResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void UserExistResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserExistResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserExistResponse_descriptor_;
}

const UserExistResponse& UserExistResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

UserExistResponse* UserExistResponse::default_instance_ = NULL;

UserExistResponse* UserExistResponse::New() const {
  return new UserExistResponse;
}

void UserExistResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  exist_userid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserExistResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exist_userid_list;
        break;
      }
      
      // repeated string exist_userid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exist_userid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exist_userid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exist_userid_list(0).data(), this->exist_userid_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exist_userid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserExistResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated string exist_userid_list = 2;
  for (int i = 0; i < this->exist_userid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->exist_userid_list(i).data(), this->exist_userid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exist_userid_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserExistResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated string exist_userid_list = 2;
  for (int i = 0; i < this->exist_userid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exist_userid_list(i).data(), this->exist_userid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->exist_userid_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserExistResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  // repeated string exist_userid_list = 2;
  total_size += 1 * this->exist_userid_list_size();
  for (int i = 0; i < this->exist_userid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exist_userid_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserExistResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserExistResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserExistResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserExistResponse::MergeFrom(const UserExistResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  exist_userid_list_.MergeFrom(from.exist_userid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserExistResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserExistResponse::CopyFrom(const UserExistResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserExistResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void UserExistResponse::Swap(UserExistResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    exist_userid_list_.Swap(&other->exist_userid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserExistResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserExistResponse_descriptor_;
  metadata.reflection = UserExistResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SetProfileRequest::_default_userid_;
#ifndef _MSC_VER
const int SetProfileRequest::kUseridFieldNumber;
const int SetProfileRequest::kProfileFieldNumber;
#endif  // !_MSC_VER

SetProfileRequest::SetProfileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetProfileRequest::InitAsDefaultInstance() {
  profile_ = const_cast< ::SSDataDomain::SSProfile*>(&::SSDataDomain::SSProfile::default_instance());
}

SetProfileRequest::SetProfileRequest(const SetProfileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetProfileRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  profile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetProfileRequest::~SetProfileRequest() {
  SharedDtor();
}

void SetProfileRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
    delete profile_;
  }
}

void SetProfileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetProfileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetProfileRequest_descriptor_;
}

const SetProfileRequest& SetProfileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SetProfileRequest* SetProfileRequest::default_instance_ = NULL;

SetProfileRequest* SetProfileRequest::New() const {
  return new SetProfileRequest;
}

void SetProfileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (profile_ != NULL) profile_->::SSDataDomain::SSProfile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetProfileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_profile;
        break;
      }
      
      // required .SSDataDomain.SSProfile profile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetProfileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // required .SSDataDomain.SSProfile profile = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->profile(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetProfileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // required .SSDataDomain.SSProfile profile = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->profile(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetProfileRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required .SSDataDomain.SSProfile profile = 2;
    if (has_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profile());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetProfileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetProfileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetProfileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetProfileRequest::MergeFrom(const SetProfileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      mutable_profile()->::SSDataDomain::SSProfile::MergeFrom(from.profile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetProfileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetProfileRequest::CopyFrom(const SetProfileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProfileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_profile()) {
    if (!this->profile().IsInitialized()) return false;
  }
  return true;
}

void SetProfileRequest::Swap(SetProfileRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(profile_, other->profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetProfileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetProfileRequest_descriptor_;
  metadata.reflection = SetProfileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetProfileResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SetProfileResponse::SetProfileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetProfileResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

SetProfileResponse::SetProfileResponse(const SetProfileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetProfileResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetProfileResponse::~SetProfileResponse() {
  SharedDtor();
}

void SetProfileResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SetProfileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetProfileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetProfileResponse_descriptor_;
}

const SetProfileResponse& SetProfileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SetProfileResponse* SetProfileResponse::default_instance_ = NULL;

SetProfileResponse* SetProfileResponse::New() const {
  return new SetProfileResponse;
}

void SetProfileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetProfileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetProfileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetProfileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetProfileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetProfileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetProfileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetProfileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetProfileResponse::MergeFrom(const SetProfileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetProfileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetProfileResponse::CopyFrom(const SetProfileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProfileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SetProfileResponse::Swap(SetProfileResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetProfileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetProfileResponse_descriptor_;
  metadata.reflection = SetProfileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetProfileRequest::kUseridListFieldNumber;
const int GetProfileRequest::kFlagFieldNumber;
#endif  // !_MSC_VER

GetProfileRequest::GetProfileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetProfileRequest::InitAsDefaultInstance() {
}

GetProfileRequest::GetProfileRequest(const GetProfileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetProfileRequest::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetProfileRequest::~GetProfileRequest() {
  SharedDtor();
}

void GetProfileRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetProfileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProfileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetProfileRequest_descriptor_;
}

const GetProfileRequest& GetProfileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetProfileRequest* GetProfileRequest::default_instance_ = NULL;

GetProfileRequest* GetProfileRequest::New() const {
  return new GetProfileRequest;
}

void GetProfileRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    flag_ = 2;
  }
  userid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetProfileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string userid_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_userid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid_list(0).data(), this->userid_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userid_list;
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetProfileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string userid_list = 1;
  for (int i = 0; i < this->userid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->userid_list(i).data(), this->userid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid_list(i), output);
  }
  
  // optional int32 flag = 2 [default = 2];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetProfileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string userid_list = 1;
  for (int i = 0; i < this->userid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid_list(i).data(), this->userid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->userid_list(i), target);
  }
  
  // optional int32 flag = 2 [default = 2];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetProfileRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 flag = 2 [default = 2];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
  }
  // repeated string userid_list = 1;
  total_size += 1 * this->userid_list_size();
  for (int i = 0; i < this->userid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->userid_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProfileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetProfileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetProfileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetProfileRequest::MergeFrom(const GetProfileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  userid_list_.MergeFrom(from.userid_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetProfileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProfileRequest::CopyFrom(const GetProfileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProfileRequest::IsInitialized() const {
  
  return true;
}

void GetProfileRequest::Swap(GetProfileRequest* other) {
  if (other != this) {
    userid_list_.Swap(&other->userid_list_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetProfileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetProfileRequest_descriptor_;
  metadata.reflection = GetProfileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetProfileResponse::kResultFieldNumber;
const int GetProfileResponse::kProfileListFieldNumber;
#endif  // !_MSC_VER

GetProfileResponse::GetProfileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetProfileResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetProfileResponse::GetProfileResponse(const GetProfileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetProfileResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetProfileResponse::~GetProfileResponse() {
  SharedDtor();
}

void GetProfileResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetProfileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProfileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetProfileResponse_descriptor_;
}

const GetProfileResponse& GetProfileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetProfileResponse* GetProfileResponse::default_instance_ = NULL;

GetProfileResponse* GetProfileResponse::New() const {
  return new GetProfileResponse;
}

void GetProfileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  profile_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetProfileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_profile_list;
        break;
      }
      
      // repeated .SSDataDomain.SSProfile profile_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profile_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_profile_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_profile_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetProfileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated .SSDataDomain.SSProfile profile_list = 2;
  for (int i = 0; i < this->profile_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->profile_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetProfileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated .SSDataDomain.SSProfile profile_list = 2;
  for (int i = 0; i < this->profile_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->profile_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetProfileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  // repeated .SSDataDomain.SSProfile profile_list = 2;
  total_size += 1 * this->profile_list_size();
  for (int i = 0; i < this->profile_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->profile_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProfileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetProfileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetProfileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetProfileResponse::MergeFrom(const GetProfileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  profile_list_.MergeFrom(from.profile_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetProfileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProfileResponse::CopyFrom(const GetProfileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProfileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < profile_list_size(); i++) {
    if (!this->profile_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetProfileResponse::Swap(GetProfileResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    profile_list_.Swap(&other->profile_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetProfileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetProfileResponse_descriptor_;
  metadata.reflection = GetProfileResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string FollowRequest::_default_follower_userid_;
#ifndef _MSC_VER
const int FollowRequest::kFollowerUseridFieldNumber;
const int FollowRequest::kFollowingUseridListFieldNumber;
#endif  // !_MSC_VER

FollowRequest::FollowRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FollowRequest::InitAsDefaultInstance() {
}

FollowRequest::FollowRequest(const FollowRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FollowRequest::SharedCtor() {
  _cached_size_ = 0;
  follower_userid_ = const_cast< ::std::string*>(&_default_follower_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FollowRequest::~FollowRequest() {
  SharedDtor();
}

void FollowRequest::SharedDtor() {
  if (follower_userid_ != &_default_follower_userid_) {
    delete follower_userid_;
  }
  if (this != default_instance_) {
  }
}

void FollowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FollowRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowRequest_descriptor_;
}

const FollowRequest& FollowRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

FollowRequest* FollowRequest::default_instance_ = NULL;

FollowRequest* FollowRequest::New() const {
  return new FollowRequest;
}

void FollowRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (follower_userid_ != &_default_follower_userid_) {
        follower_userid_->clear();
      }
    }
  }
  following_userid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FollowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string follower_userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_follower_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->follower_userid().data(), this->follower_userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_following_userid_list;
        break;
      }
      
      // repeated string following_userid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_following_userid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_following_userid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->following_userid_list(0).data(), this->following_userid_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_following_userid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FollowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string follower_userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->follower_userid().data(), this->follower_userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->follower_userid(), output);
  }
  
  // repeated string following_userid_list = 2;
  for (int i = 0; i < this->following_userid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->following_userid_list(i).data(), this->following_userid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->following_userid_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FollowRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string follower_userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->follower_userid().data(), this->follower_userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->follower_userid(), target);
  }
  
  // repeated string following_userid_list = 2;
  for (int i = 0; i < this->following_userid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->following_userid_list(i).data(), this->following_userid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->following_userid_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FollowRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string follower_userid = 1;
    if (has_follower_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->follower_userid());
    }
    
  }
  // repeated string following_userid_list = 2;
  total_size += 1 * this->following_userid_list_size();
  for (int i = 0; i < this->following_userid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->following_userid_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FollowRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FollowRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FollowRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FollowRequest::MergeFrom(const FollowRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  following_userid_list_.MergeFrom(from.following_userid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_follower_userid(from.follower_userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FollowRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowRequest::CopyFrom(const FollowRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FollowRequest::Swap(FollowRequest* other) {
  if (other != this) {
    std::swap(follower_userid_, other->follower_userid_);
    following_userid_list_.Swap(&other->following_userid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FollowRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FollowRequest_descriptor_;
  metadata.reflection = FollowRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FollowResponse::kResultFieldNumber;
#endif  // !_MSC_VER

FollowResponse::FollowResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FollowResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

FollowResponse::FollowResponse(const FollowResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FollowResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FollowResponse::~FollowResponse() {
  SharedDtor();
}

void FollowResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void FollowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FollowResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowResponse_descriptor_;
}

const FollowResponse& FollowResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

FollowResponse* FollowResponse::default_instance_ = NULL;

FollowResponse* FollowResponse::New() const {
  return new FollowResponse;
}

void FollowResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FollowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FollowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FollowResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FollowResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FollowResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FollowResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FollowResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FollowResponse::MergeFrom(const FollowResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FollowResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowResponse::CopyFrom(const FollowResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void FollowResponse::Swap(FollowResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FollowResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FollowResponse_descriptor_;
  metadata.reflection = FollowResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CancelFollowRequest::_default_follower_userid_;
#ifndef _MSC_VER
const int CancelFollowRequest::kFollowerUseridFieldNumber;
const int CancelFollowRequest::kFollowingUseridListFieldNumber;
#endif  // !_MSC_VER

CancelFollowRequest::CancelFollowRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancelFollowRequest::InitAsDefaultInstance() {
}

CancelFollowRequest::CancelFollowRequest(const CancelFollowRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancelFollowRequest::SharedCtor() {
  _cached_size_ = 0;
  follower_userid_ = const_cast< ::std::string*>(&_default_follower_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelFollowRequest::~CancelFollowRequest() {
  SharedDtor();
}

void CancelFollowRequest::SharedDtor() {
  if (follower_userid_ != &_default_follower_userid_) {
    delete follower_userid_;
  }
  if (this != default_instance_) {
  }
}

void CancelFollowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelFollowRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelFollowRequest_descriptor_;
}

const CancelFollowRequest& CancelFollowRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

CancelFollowRequest* CancelFollowRequest::default_instance_ = NULL;

CancelFollowRequest* CancelFollowRequest::New() const {
  return new CancelFollowRequest;
}

void CancelFollowRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (follower_userid_ != &_default_follower_userid_) {
        follower_userid_->clear();
      }
    }
  }
  following_userid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelFollowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string follower_userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_follower_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->follower_userid().data(), this->follower_userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_following_userid_list;
        break;
      }
      
      // repeated string following_userid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_following_userid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_following_userid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->following_userid_list(0).data(), this->following_userid_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_following_userid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CancelFollowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string follower_userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->follower_userid().data(), this->follower_userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->follower_userid(), output);
  }
  
  // repeated string following_userid_list = 2;
  for (int i = 0; i < this->following_userid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->following_userid_list(i).data(), this->following_userid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->following_userid_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancelFollowRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string follower_userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->follower_userid().data(), this->follower_userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->follower_userid(), target);
  }
  
  // repeated string following_userid_list = 2;
  for (int i = 0; i < this->following_userid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->following_userid_list(i).data(), this->following_userid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->following_userid_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancelFollowRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string follower_userid = 1;
    if (has_follower_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->follower_userid());
    }
    
  }
  // repeated string following_userid_list = 2;
  total_size += 1 * this->following_userid_list_size();
  for (int i = 0; i < this->following_userid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->following_userid_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelFollowRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelFollowRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelFollowRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelFollowRequest::MergeFrom(const CancelFollowRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  following_userid_list_.MergeFrom(from.following_userid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_follower_userid(from.follower_userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelFollowRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelFollowRequest::CopyFrom(const CancelFollowRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelFollowRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CancelFollowRequest::Swap(CancelFollowRequest* other) {
  if (other != this) {
    std::swap(follower_userid_, other->follower_userid_);
    following_userid_list_.Swap(&other->following_userid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelFollowRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelFollowRequest_descriptor_;
  metadata.reflection = CancelFollowRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelFollowResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CancelFollowResponse::CancelFollowResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancelFollowResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

CancelFollowResponse::CancelFollowResponse(const CancelFollowResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancelFollowResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelFollowResponse::~CancelFollowResponse() {
  SharedDtor();
}

void CancelFollowResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void CancelFollowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelFollowResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelFollowResponse_descriptor_;
}

const CancelFollowResponse& CancelFollowResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

CancelFollowResponse* CancelFollowResponse::default_instance_ = NULL;

CancelFollowResponse* CancelFollowResponse::New() const {
  return new CancelFollowResponse;
}

void CancelFollowResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelFollowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CancelFollowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancelFollowResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancelFollowResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelFollowResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelFollowResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelFollowResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelFollowResponse::MergeFrom(const CancelFollowResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelFollowResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelFollowResponse::CopyFrom(const CancelFollowResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelFollowResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void CancelFollowResponse::Swap(CancelFollowResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelFollowResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelFollowResponse_descriptor_;
  metadata.reflection = CancelFollowResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetFollowingRequest::_default_userid_;
#ifndef _MSC_VER
const int GetFollowingRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

GetFollowingRequest::GetFollowingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFollowingRequest::InitAsDefaultInstance() {
}

GetFollowingRequest::GetFollowingRequest(const GetFollowingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFollowingRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFollowingRequest::~GetFollowingRequest() {
  SharedDtor();
}

void GetFollowingRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetFollowingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFollowingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFollowingRequest_descriptor_;
}

const GetFollowingRequest& GetFollowingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetFollowingRequest* GetFollowingRequest::default_instance_ = NULL;

GetFollowingRequest* GetFollowingRequest::New() const {
  return new GetFollowingRequest;
}

void GetFollowingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFollowingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFollowingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFollowingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFollowingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFollowingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFollowingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFollowingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFollowingRequest::MergeFrom(const GetFollowingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFollowingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFollowingRequest::CopyFrom(const GetFollowingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetFollowingRequest::Swap(GetFollowingRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFollowingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFollowingRequest_descriptor_;
  metadata.reflection = GetFollowingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFollowingResponse::kResultFieldNumber;
const int GetFollowingResponse::kFollowingUseridListFieldNumber;
#endif  // !_MSC_VER

GetFollowingResponse::GetFollowingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFollowingResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetFollowingResponse::GetFollowingResponse(const GetFollowingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFollowingResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFollowingResponse::~GetFollowingResponse() {
  SharedDtor();
}

void GetFollowingResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetFollowingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFollowingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFollowingResponse_descriptor_;
}

const GetFollowingResponse& GetFollowingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetFollowingResponse* GetFollowingResponse::default_instance_ = NULL;

GetFollowingResponse* GetFollowingResponse::New() const {
  return new GetFollowingResponse;
}

void GetFollowingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  following_userid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFollowingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_following_userid_list;
        break;
      }
      
      // repeated string following_userid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_following_userid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_following_userid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->following_userid_list(0).data(), this->following_userid_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_following_userid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFollowingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated string following_userid_list = 2;
  for (int i = 0; i < this->following_userid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->following_userid_list(i).data(), this->following_userid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->following_userid_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFollowingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated string following_userid_list = 2;
  for (int i = 0; i < this->following_userid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->following_userid_list(i).data(), this->following_userid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->following_userid_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFollowingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  // repeated string following_userid_list = 2;
  total_size += 1 * this->following_userid_list_size();
  for (int i = 0; i < this->following_userid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->following_userid_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFollowingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFollowingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFollowingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFollowingResponse::MergeFrom(const GetFollowingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  following_userid_list_.MergeFrom(from.following_userid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFollowingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFollowingResponse::CopyFrom(const GetFollowingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetFollowingResponse::Swap(GetFollowingResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    following_userid_list_.Swap(&other->following_userid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFollowingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFollowingResponse_descriptor_;
  metadata.reflection = GetFollowingResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetFollowerCountRequest::_default_userid_;
#ifndef _MSC_VER
const int GetFollowerCountRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

GetFollowerCountRequest::GetFollowerCountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFollowerCountRequest::InitAsDefaultInstance() {
}

GetFollowerCountRequest::GetFollowerCountRequest(const GetFollowerCountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFollowerCountRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFollowerCountRequest::~GetFollowerCountRequest() {
  SharedDtor();
}

void GetFollowerCountRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetFollowerCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFollowerCountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFollowerCountRequest_descriptor_;
}

const GetFollowerCountRequest& GetFollowerCountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetFollowerCountRequest* GetFollowerCountRequest::default_instance_ = NULL;

GetFollowerCountRequest* GetFollowerCountRequest::New() const {
  return new GetFollowerCountRequest;
}

void GetFollowerCountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFollowerCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFollowerCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFollowerCountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFollowerCountRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFollowerCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFollowerCountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFollowerCountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFollowerCountRequest::MergeFrom(const GetFollowerCountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFollowerCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFollowerCountRequest::CopyFrom(const GetFollowerCountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowerCountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetFollowerCountRequest::Swap(GetFollowerCountRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFollowerCountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFollowerCountRequest_descriptor_;
  metadata.reflection = GetFollowerCountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFollowerCountResponse::kResultFieldNumber;
const int GetFollowerCountResponse::kCountFieldNumber;
#endif  // !_MSC_VER

GetFollowerCountResponse::GetFollowerCountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFollowerCountResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetFollowerCountResponse::GetFollowerCountResponse(const GetFollowerCountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFollowerCountResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFollowerCountResponse::~GetFollowerCountResponse() {
  SharedDtor();
}

void GetFollowerCountResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetFollowerCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFollowerCountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFollowerCountResponse_descriptor_;
}

const GetFollowerCountResponse& GetFollowerCountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetFollowerCountResponse* GetFollowerCountResponse::default_instance_ = NULL;

GetFollowerCountResponse* GetFollowerCountResponse::New() const {
  return new GetFollowerCountResponse;
}

void GetFollowerCountResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFollowerCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFollowerCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // optional int32 count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFollowerCountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // optional int32 count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFollowerCountResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFollowerCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFollowerCountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFollowerCountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFollowerCountResponse::MergeFrom(const GetFollowerCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFollowerCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFollowerCountResponse::CopyFrom(const GetFollowerCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowerCountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetFollowerCountResponse::Swap(GetFollowerCountResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFollowerCountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFollowerCountResponse_descriptor_;
  metadata.reflection = GetFollowerCountResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetFollowerRequest::_default_userid_;
const ::std::string GetFollowerRequest::_default_cursor_id_;
#ifndef _MSC_VER
const int GetFollowerRequest::kUseridFieldNumber;
const int GetFollowerRequest::kCursorIdFieldNumber;
const int GetFollowerRequest::kCountFieldNumber;
#endif  // !_MSC_VER

GetFollowerRequest::GetFollowerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFollowerRequest::InitAsDefaultInstance() {
}

GetFollowerRequest::GetFollowerRequest(const GetFollowerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFollowerRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  cursor_id_ = const_cast< ::std::string*>(&_default_cursor_id_);
  count_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFollowerRequest::~GetFollowerRequest() {
  SharedDtor();
}

void GetFollowerRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (cursor_id_ != &_default_cursor_id_) {
    delete cursor_id_;
  }
  if (this != default_instance_) {
  }
}

void GetFollowerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFollowerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFollowerRequest_descriptor_;
}

const GetFollowerRequest& GetFollowerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetFollowerRequest* GetFollowerRequest::default_instance_ = NULL;

GetFollowerRequest* GetFollowerRequest::New() const {
  return new GetFollowerRequest;
}

void GetFollowerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (cursor_id_ != &_default_cursor_id_) {
        cursor_id_->clear();
      }
    }
    count_ = 100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFollowerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cursor_id;
        break;
      }
      
      // optional string cursor_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cursor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cursor_id().data(), this->cursor_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3 [default = 100];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFollowerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // optional string cursor_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cursor_id().data(), this->cursor_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cursor_id(), output);
  }
  
  // optional int32 count = 3 [default = 100];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFollowerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // optional string cursor_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cursor_id().data(), this->cursor_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cursor_id(), target);
  }
  
  // optional int32 count = 3 [default = 100];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFollowerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string cursor_id = 2;
    if (has_cursor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cursor_id());
    }
    
    // optional int32 count = 3 [default = 100];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFollowerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFollowerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFollowerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFollowerRequest::MergeFrom(const GetFollowerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_cursor_id(from.cursor_id());
    }
    if (from._has_bit(2)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFollowerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFollowerRequest::CopyFrom(const GetFollowerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetFollowerRequest::Swap(GetFollowerRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(cursor_id_, other->cursor_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFollowerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFollowerRequest_descriptor_;
  metadata.reflection = GetFollowerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFollowerResponse::kResultFieldNumber;
const int GetFollowerResponse::kFollowerUseridListFieldNumber;
const int GetFollowerResponse::kEolFieldNumber;
#endif  // !_MSC_VER

GetFollowerResponse::GetFollowerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFollowerResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetFollowerResponse::GetFollowerResponse(const GetFollowerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFollowerResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  eol_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFollowerResponse::~GetFollowerResponse() {
  SharedDtor();
}

void GetFollowerResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetFollowerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFollowerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFollowerResponse_descriptor_;
}

const GetFollowerResponse& GetFollowerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetFollowerResponse* GetFollowerResponse::default_instance_ = NULL;

GetFollowerResponse* GetFollowerResponse::New() const {
  return new GetFollowerResponse;
}

void GetFollowerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
    eol_ = false;
  }
  follower_userid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFollowerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_follower_userid_list;
        break;
      }
      
      // repeated string follower_userid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_follower_userid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_follower_userid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->follower_userid_list(0).data(), this->follower_userid_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_follower_userid_list;
        if (input->ExpectTag(24)) goto parse_eol;
        break;
      }
      
      // optional bool eol = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eol_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFollowerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated string follower_userid_list = 2;
  for (int i = 0; i < this->follower_userid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->follower_userid_list(i).data(), this->follower_userid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->follower_userid_list(i), output);
  }
  
  // optional bool eol = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->eol(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFollowerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated string follower_userid_list = 2;
  for (int i = 0; i < this->follower_userid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->follower_userid_list(i).data(), this->follower_userid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->follower_userid_list(i), target);
  }
  
  // optional bool eol = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->eol(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFollowerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
    // optional bool eol = 3 [default = false];
    if (has_eol()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string follower_userid_list = 2;
  total_size += 1 * this->follower_userid_list_size();
  for (int i = 0; i < this->follower_userid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->follower_userid_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFollowerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFollowerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFollowerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFollowerResponse::MergeFrom(const GetFollowerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  follower_userid_list_.MergeFrom(from.follower_userid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
    if (from._has_bit(2)) {
      set_eol(from.eol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFollowerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFollowerResponse::CopyFrom(const GetFollowerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetFollowerResponse::Swap(GetFollowerResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    follower_userid_list_.Swap(&other->follower_userid_list_);
    std::swap(eol_, other->eol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFollowerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFollowerResponse_descriptor_;
  metadata.reflection = GetFollowerResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string InviteRequest::_default_inviter_userid_;
#ifndef _MSC_VER
const int InviteRequest::kInviterUseridFieldNumber;
const int InviteRequest::kInvitingUseridListFieldNumber;
#endif  // !_MSC_VER

InviteRequest::InviteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteRequest::InitAsDefaultInstance() {
}

InviteRequest::InviteRequest(const InviteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteRequest::SharedCtor() {
  _cached_size_ = 0;
  inviter_userid_ = const_cast< ::std::string*>(&_default_inviter_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteRequest::~InviteRequest() {
  SharedDtor();
}

void InviteRequest::SharedDtor() {
  if (inviter_userid_ != &_default_inviter_userid_) {
    delete inviter_userid_;
  }
  if (this != default_instance_) {
  }
}

void InviteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteRequest_descriptor_;
}

const InviteRequest& InviteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

InviteRequest* InviteRequest::default_instance_ = NULL;

InviteRequest* InviteRequest::New() const {
  return new InviteRequest;
}

void InviteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (inviter_userid_ != &_default_inviter_userid_) {
        inviter_userid_->clear();
      }
    }
  }
  inviting_userid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string inviter_userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviter_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inviter_userid().data(), this->inviter_userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inviting_userid_list;
        break;
      }
      
      // repeated string inviting_userid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviting_userid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_inviting_userid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inviting_userid_list(0).data(), this->inviting_userid_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inviting_userid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string inviter_userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviter_userid().data(), this->inviter_userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->inviter_userid(), output);
  }
  
  // repeated string inviting_userid_list = 2;
  for (int i = 0; i < this->inviting_userid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->inviting_userid_list(i).data(), this->inviting_userid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->inviting_userid_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string inviter_userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviter_userid().data(), this->inviter_userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inviter_userid(), target);
  }
  
  // repeated string inviting_userid_list = 2;
  for (int i = 0; i < this->inviting_userid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviting_userid_list(i).data(), this->inviting_userid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->inviting_userid_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string inviter_userid = 1;
    if (has_inviter_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviter_userid());
    }
    
  }
  // repeated string inviting_userid_list = 2;
  total_size += 1 * this->inviting_userid_list_size();
  for (int i = 0; i < this->inviting_userid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->inviting_userid_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteRequest::MergeFrom(const InviteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  inviting_userid_list_.MergeFrom(from.inviting_userid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_inviter_userid(from.inviter_userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteRequest::CopyFrom(const InviteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InviteRequest::Swap(InviteRequest* other) {
  if (other != this) {
    std::swap(inviter_userid_, other->inviter_userid_);
    inviting_userid_list_.Swap(&other->inviting_userid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteRequest_descriptor_;
  metadata.reflection = InviteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteResponse::kResultFieldNumber;
#endif  // !_MSC_VER

InviteResponse::InviteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

InviteResponse::InviteResponse(const InviteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteResponse::~InviteResponse() {
  SharedDtor();
}

void InviteResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void InviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteResponse_descriptor_;
}

const InviteResponse& InviteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

InviteResponse* InviteResponse::default_instance_ = NULL;

InviteResponse* InviteResponse::New() const {
  return new InviteResponse;
}

void InviteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteResponse::MergeFrom(const InviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteResponse::CopyFrom(const InviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void InviteResponse::Swap(InviteResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteResponse_descriptor_;
  metadata.reflection = InviteResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetInvitingRequest::_default_userid_;
#ifndef _MSC_VER
const int GetInvitingRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

GetInvitingRequest::GetInvitingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInvitingRequest::InitAsDefaultInstance() {
}

GetInvitingRequest::GetInvitingRequest(const GetInvitingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInvitingRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInvitingRequest::~GetInvitingRequest() {
  SharedDtor();
}

void GetInvitingRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetInvitingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInvitingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInvitingRequest_descriptor_;
}

const GetInvitingRequest& GetInvitingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetInvitingRequest* GetInvitingRequest::default_instance_ = NULL;

GetInvitingRequest* GetInvitingRequest::New() const {
  return new GetInvitingRequest;
}

void GetInvitingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInvitingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInvitingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInvitingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInvitingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInvitingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInvitingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInvitingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInvitingRequest::MergeFrom(const GetInvitingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInvitingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInvitingRequest::CopyFrom(const GetInvitingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvitingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetInvitingRequest::Swap(GetInvitingRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInvitingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInvitingRequest_descriptor_;
  metadata.reflection = GetInvitingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInvitingResponse::kResultFieldNumber;
const int GetInvitingResponse::kInvitingUseridListFieldNumber;
#endif  // !_MSC_VER

GetInvitingResponse::GetInvitingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInvitingResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetInvitingResponse::GetInvitingResponse(const GetInvitingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInvitingResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInvitingResponse::~GetInvitingResponse() {
  SharedDtor();
}

void GetInvitingResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetInvitingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInvitingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInvitingResponse_descriptor_;
}

const GetInvitingResponse& GetInvitingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetInvitingResponse* GetInvitingResponse::default_instance_ = NULL;

GetInvitingResponse* GetInvitingResponse::New() const {
  return new GetInvitingResponse;
}

void GetInvitingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  inviting_userid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInvitingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inviting_userid_list;
        break;
      }
      
      // repeated string inviting_userid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviting_userid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_inviting_userid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inviting_userid_list(0).data(), this->inviting_userid_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inviting_userid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInvitingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated string inviting_userid_list = 2;
  for (int i = 0; i < this->inviting_userid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->inviting_userid_list(i).data(), this->inviting_userid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->inviting_userid_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInvitingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated string inviting_userid_list = 2;
  for (int i = 0; i < this->inviting_userid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviting_userid_list(i).data(), this->inviting_userid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->inviting_userid_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInvitingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  // repeated string inviting_userid_list = 2;
  total_size += 1 * this->inviting_userid_list_size();
  for (int i = 0; i < this->inviting_userid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->inviting_userid_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInvitingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInvitingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInvitingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInvitingResponse::MergeFrom(const GetInvitingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  inviting_userid_list_.MergeFrom(from.inviting_userid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInvitingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInvitingResponse::CopyFrom(const GetInvitingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvitingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetInvitingResponse::Swap(GetInvitingResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    inviting_userid_list_.Swap(&other->inviting_userid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInvitingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInvitingResponse_descriptor_;
  metadata.reflection = GetInvitingResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetInviterRequest::_default_userid_;
#ifndef _MSC_VER
const int GetInviterRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

GetInviterRequest::GetInviterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInviterRequest::InitAsDefaultInstance() {
}

GetInviterRequest::GetInviterRequest(const GetInviterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInviterRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInviterRequest::~GetInviterRequest() {
  SharedDtor();
}

void GetInviterRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetInviterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInviterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInviterRequest_descriptor_;
}

const GetInviterRequest& GetInviterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetInviterRequest* GetInviterRequest::default_instance_ = NULL;

GetInviterRequest* GetInviterRequest::New() const {
  return new GetInviterRequest;
}

void GetInviterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInviterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInviterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInviterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInviterRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInviterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInviterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInviterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInviterRequest::MergeFrom(const GetInviterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInviterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInviterRequest::CopyFrom(const GetInviterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInviterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetInviterRequest::Swap(GetInviterRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInviterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInviterRequest_descriptor_;
  metadata.reflection = GetInviterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInviterResponse::kResultFieldNumber;
const int GetInviterResponse::kInviterUseridListFieldNumber;
#endif  // !_MSC_VER

GetInviterResponse::GetInviterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInviterResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetInviterResponse::GetInviterResponse(const GetInviterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInviterResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInviterResponse::~GetInviterResponse() {
  SharedDtor();
}

void GetInviterResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetInviterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInviterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInviterResponse_descriptor_;
}

const GetInviterResponse& GetInviterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetInviterResponse* GetInviterResponse::default_instance_ = NULL;

GetInviterResponse* GetInviterResponse::New() const {
  return new GetInviterResponse;
}

void GetInviterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  inviter_userid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInviterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inviter_userid_list;
        break;
      }
      
      // repeated string inviter_userid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviter_userid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_inviter_userid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inviter_userid_list(0).data(), this->inviter_userid_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inviter_userid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInviterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated string inviter_userid_list = 2;
  for (int i = 0; i < this->inviter_userid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->inviter_userid_list(i).data(), this->inviter_userid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->inviter_userid_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInviterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated string inviter_userid_list = 2;
  for (int i = 0; i < this->inviter_userid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviter_userid_list(i).data(), this->inviter_userid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->inviter_userid_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInviterResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  // repeated string inviter_userid_list = 2;
  total_size += 1 * this->inviter_userid_list_size();
  for (int i = 0; i < this->inviter_userid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->inviter_userid_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInviterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInviterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInviterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInviterResponse::MergeFrom(const GetInviterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  inviter_userid_list_.MergeFrom(from.inviter_userid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInviterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInviterResponse::CopyFrom(const GetInviterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInviterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetInviterResponse::Swap(GetInviterResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    inviter_userid_list_.Swap(&other->inviter_userid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInviterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInviterResponse_descriptor_;
  metadata.reflection = GetInviterResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SetSessionInfoRequest::_default_userid_;
#ifndef _MSC_VER
const int SetSessionInfoRequest::kUseridFieldNumber;
const int SetSessionInfoRequest::kSessionInfoFieldNumber;
#endif  // !_MSC_VER

SetSessionInfoRequest::SetSessionInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetSessionInfoRequest::InitAsDefaultInstance() {
  session_info_ = const_cast< ::SSDataDomain::SSSessionInfo*>(&::SSDataDomain::SSSessionInfo::default_instance());
}

SetSessionInfoRequest::SetSessionInfoRequest(const SetSessionInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetSessionInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  session_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetSessionInfoRequest::~SetSessionInfoRequest() {
  SharedDtor();
}

void SetSessionInfoRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
    delete session_info_;
  }
}

void SetSessionInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetSessionInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetSessionInfoRequest_descriptor_;
}

const SetSessionInfoRequest& SetSessionInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SetSessionInfoRequest* SetSessionInfoRequest::default_instance_ = NULL;

SetSessionInfoRequest* SetSessionInfoRequest::New() const {
  return new SetSessionInfoRequest;
}

void SetSessionInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (session_info_ != NULL) session_info_->::SSDataDomain::SSSessionInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetSessionInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_info;
        break;
      }
      
      // required .SSDataDomain.SSSessionInfo session_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetSessionInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // required .SSDataDomain.SSSessionInfo session_info = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->session_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetSessionInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // required .SSDataDomain.SSSessionInfo session_info = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->session_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetSessionInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required .SSDataDomain.SSSessionInfo session_info = 2;
    if (has_session_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSessionInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetSessionInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetSessionInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetSessionInfoRequest::MergeFrom(const SetSessionInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      mutable_session_info()->::SSDataDomain::SSSessionInfo::MergeFrom(from.session_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetSessionInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSessionInfoRequest::CopyFrom(const SetSessionInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSessionInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_session_info()) {
    if (!this->session_info().IsInitialized()) return false;
  }
  return true;
}

void SetSessionInfoRequest::Swap(SetSessionInfoRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(session_info_, other->session_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetSessionInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetSessionInfoRequest_descriptor_;
  metadata.reflection = SetSessionInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetSessionInfoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SetSessionInfoResponse::SetSessionInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetSessionInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

SetSessionInfoResponse::SetSessionInfoResponse(const SetSessionInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetSessionInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetSessionInfoResponse::~SetSessionInfoResponse() {
  SharedDtor();
}

void SetSessionInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SetSessionInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetSessionInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetSessionInfoResponse_descriptor_;
}

const SetSessionInfoResponse& SetSessionInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SetSessionInfoResponse* SetSessionInfoResponse::default_instance_ = NULL;

SetSessionInfoResponse* SetSessionInfoResponse::New() const {
  return new SetSessionInfoResponse;
}

void SetSessionInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetSessionInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetSessionInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetSessionInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetSessionInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSessionInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetSessionInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetSessionInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetSessionInfoResponse::MergeFrom(const SetSessionInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetSessionInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSessionInfoResponse::CopyFrom(const SetSessionInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSessionInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SetSessionInfoResponse::Swap(SetSessionInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetSessionInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetSessionInfoResponse_descriptor_;
  metadata.reflection = SetSessionInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetSessionInfoRequest::_default_userid_;
#ifndef _MSC_VER
const int GetSessionInfoRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

GetSessionInfoRequest::GetSessionInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSessionInfoRequest::InitAsDefaultInstance() {
}

GetSessionInfoRequest::GetSessionInfoRequest(const GetSessionInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSessionInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSessionInfoRequest::~GetSessionInfoRequest() {
  SharedDtor();
}

void GetSessionInfoRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetSessionInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSessionInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSessionInfoRequest_descriptor_;
}

const GetSessionInfoRequest& GetSessionInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetSessionInfoRequest* GetSessionInfoRequest::default_instance_ = NULL;

GetSessionInfoRequest* GetSessionInfoRequest::New() const {
  return new GetSessionInfoRequest;
}

void GetSessionInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSessionInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSessionInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSessionInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSessionInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSessionInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSessionInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSessionInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSessionInfoRequest::MergeFrom(const GetSessionInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSessionInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSessionInfoRequest::CopyFrom(const GetSessionInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSessionInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetSessionInfoRequest::Swap(GetSessionInfoRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSessionInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSessionInfoRequest_descriptor_;
  metadata.reflection = GetSessionInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSessionInfoResponse::kResultFieldNumber;
const int GetSessionInfoResponse::kSessionInfoFieldNumber;
#endif  // !_MSC_VER

GetSessionInfoResponse::GetSessionInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSessionInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
  session_info_ = const_cast< ::SSDataDomain::SSSessionInfo*>(&::SSDataDomain::SSSessionInfo::default_instance());
}

GetSessionInfoResponse::GetSessionInfoResponse(const GetSessionInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSessionInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  session_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSessionInfoResponse::~GetSessionInfoResponse() {
  SharedDtor();
}

void GetSessionInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete session_info_;
  }
}

void GetSessionInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSessionInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSessionInfoResponse_descriptor_;
}

const GetSessionInfoResponse& GetSessionInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetSessionInfoResponse* GetSessionInfoResponse::default_instance_ = NULL;

GetSessionInfoResponse* GetSessionInfoResponse::New() const {
  return new GetSessionInfoResponse;
}

void GetSessionInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
    if (_has_bit(1)) {
      if (session_info_ != NULL) session_info_->::SSDataDomain::SSSessionInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSessionInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_info;
        break;
      }
      
      // optional .SSDataDomain.SSSessionInfo session_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSessionInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // optional .SSDataDomain.SSSessionInfo session_info = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->session_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSessionInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // optional .SSDataDomain.SSSessionInfo session_info = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->session_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSessionInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
    // optional .SSDataDomain.SSSessionInfo session_info = 2;
    if (has_session_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSessionInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSessionInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSessionInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSessionInfoResponse::MergeFrom(const GetSessionInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
    if (from._has_bit(1)) {
      mutable_session_info()->::SSDataDomain::SSSessionInfo::MergeFrom(from.session_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSessionInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSessionInfoResponse::CopyFrom(const GetSessionInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSessionInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_session_info()) {
    if (!this->session_info().IsInitialized()) return false;
  }
  return true;
}

void GetSessionInfoResponse::Swap(GetSessionInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(session_info_, other->session_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSessionInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSessionInfoResponse_descriptor_;
  metadata.reflection = GetSessionInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetMessageRequest::_default_userid_;
const ::std::string GetMessageRequest::_default_cursor_id_;
#ifndef _MSC_VER
const int GetMessageRequest::kUseridFieldNumber;
const int GetMessageRequest::kSourceBoxFieldNumber;
const int GetMessageRequest::kCursorIdFieldNumber;
const int GetMessageRequest::kCountFieldNumber;
#endif  // !_MSC_VER

GetMessageRequest::GetMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMessageRequest::InitAsDefaultInstance() {
}

GetMessageRequest::GetMessageRequest(const GetMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  source_box_ = 0;
  cursor_id_ = const_cast< ::std::string*>(&_default_cursor_id_);
  count_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMessageRequest::~GetMessageRequest() {
  SharedDtor();
}

void GetMessageRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (cursor_id_ != &_default_cursor_id_) {
    delete cursor_id_;
  }
  if (this != default_instance_) {
  }
}

void GetMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMessageRequest_descriptor_;
}

const GetMessageRequest& GetMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetMessageRequest* GetMessageRequest::default_instance_ = NULL;

GetMessageRequest* GetMessageRequest::New() const {
  return new GetMessageRequest;
}

void GetMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    source_box_ = 0;
    if (_has_bit(2)) {
      if (cursor_id_ != &_default_cursor_id_) {
        cursor_id_->clear();
      }
    }
    count_ = 100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source_box;
        break;
      }
      
      // required .SSDataDomain.SSBOX source_box = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_box:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (SSDataDomain::SSBOX_IsValid(value)) {
            set_source_box(static_cast< SSDataDomain::SSBOX >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cursor_id;
        break;
      }
      
      // optional string cursor_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cursor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cursor_id().data(), this->cursor_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }
      
      // optional int32 count = 4 [default = 100];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // required .SSDataDomain.SSBOX source_box = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->source_box(), output);
  }
  
  // optional string cursor_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cursor_id().data(), this->cursor_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cursor_id(), output);
  }
  
  // optional int32 count = 4 [default = 100];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // required .SSDataDomain.SSBOX source_box = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->source_box(), target);
  }
  
  // optional string cursor_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cursor_id().data(), this->cursor_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cursor_id(), target);
  }
  
  // optional int32 count = 4 [default = 100];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMessageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required .SSDataDomain.SSBOX source_box = 2;
    if (has_source_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_box());
    }
    
    // optional string cursor_id = 3;
    if (has_cursor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cursor_id());
    }
    
    // optional int32 count = 4 [default = 100];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMessageRequest::MergeFrom(const GetMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_source_box(from.source_box());
    }
    if (from._has_bit(2)) {
      set_cursor_id(from.cursor_id());
    }
    if (from._has_bit(3)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageRequest::CopyFrom(const GetMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetMessageRequest::Swap(GetMessageRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(source_box_, other->source_box_);
    std::swap(cursor_id_, other->cursor_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMessageRequest_descriptor_;
  metadata.reflection = GetMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMessageResponse::kResultFieldNumber;
const int GetMessageResponse::kMsgListFieldNumber;
const int GetMessageResponse::kEolFieldNumber;
#endif  // !_MSC_VER

GetMessageResponse::GetMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMessageResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetMessageResponse::GetMessageResponse(const GetMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  eol_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMessageResponse::~GetMessageResponse() {
  SharedDtor();
}

void GetMessageResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMessageResponse_descriptor_;
}

const GetMessageResponse& GetMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetMessageResponse* GetMessageResponse::default_instance_ = NULL;

GetMessageResponse* GetMessageResponse::New() const {
  return new GetMessageResponse;
}

void GetMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
    eol_ = false;
  }
  msg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_list;
        break;
      }
      
      // repeated .SSDataDomain.SSMessage msg_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_list;
        if (input->ExpectTag(24)) goto parse_eol;
        break;
      }
      
      // optional bool eol = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eol_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated .SSDataDomain.SSMessage msg_list = 2;
  for (int i = 0; i < this->msg_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg_list(i), output);
  }
  
  // optional bool eol = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->eol(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated .SSDataDomain.SSMessage msg_list = 2;
  for (int i = 0; i < this->msg_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg_list(i), target);
  }
  
  // optional bool eol = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->eol(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMessageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
    // optional bool eol = 3 [default = false];
    if (has_eol()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .SSDataDomain.SSMessage msg_list = 2;
  total_size += 1 * this->msg_list_size();
  for (int i = 0; i < this->msg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMessageResponse::MergeFrom(const GetMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_list_.MergeFrom(from.msg_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
    if (from._has_bit(2)) {
      set_eol(from.eol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageResponse::CopyFrom(const GetMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < msg_list_size(); i++) {
    if (!this->msg_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetMessageResponse::Swap(GetMessageResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    msg_list_.Swap(&other->msg_list_);
    std::swap(eol_, other->eol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMessageResponse_descriptor_;
  metadata.reflection = GetMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetMessageByTimestampRequest::_default_userid_;
#ifndef _MSC_VER
const int GetMessageByTimestampRequest::kUseridFieldNumber;
const int GetMessageByTimestampRequest::kSourceBoxFieldNumber;
const int GetMessageByTimestampRequest::kStartTimestampFieldNumber;
const int GetMessageByTimestampRequest::kEndTimestampFieldNumber;
const int GetMessageByTimestampRequest::kCountFieldNumber;
#endif  // !_MSC_VER

GetMessageByTimestampRequest::GetMessageByTimestampRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMessageByTimestampRequest::InitAsDefaultInstance() {
}

GetMessageByTimestampRequest::GetMessageByTimestampRequest(const GetMessageByTimestampRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMessageByTimestampRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  source_box_ = 0;
  start_timestamp_ = GOOGLE_LONGLONG(0);
  end_timestamp_ = GOOGLE_LONGLONG(0);
  count_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMessageByTimestampRequest::~GetMessageByTimestampRequest() {
  SharedDtor();
}

void GetMessageByTimestampRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetMessageByTimestampRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMessageByTimestampRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMessageByTimestampRequest_descriptor_;
}

const GetMessageByTimestampRequest& GetMessageByTimestampRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetMessageByTimestampRequest* GetMessageByTimestampRequest::default_instance_ = NULL;

GetMessageByTimestampRequest* GetMessageByTimestampRequest::New() const {
  return new GetMessageByTimestampRequest;
}

void GetMessageByTimestampRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    source_box_ = 0;
    start_timestamp_ = GOOGLE_LONGLONG(0);
    end_timestamp_ = GOOGLE_LONGLONG(0);
    count_ = 100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMessageByTimestampRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source_box;
        break;
      }
      
      // required .SSDataDomain.SSBOX source_box = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_box:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (SSDataDomain::SSBOX_IsValid(value)) {
            set_source_box(static_cast< SSDataDomain::SSBOX >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_timestamp;
        break;
      }
      
      // optional int64 start_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_timestamp_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_timestamp;
        break;
      }
      
      // optional int64 end_timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_timestamp_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }
      
      // optional int32 count = 5 [default = 100];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMessageByTimestampRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // required .SSDataDomain.SSBOX source_box = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->source_box(), output);
  }
  
  // optional int64 start_timestamp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_timestamp(), output);
  }
  
  // optional int64 end_timestamp = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end_timestamp(), output);
  }
  
  // optional int32 count = 5 [default = 100];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMessageByTimestampRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // required .SSDataDomain.SSBOX source_box = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->source_box(), target);
  }
  
  // optional int64 start_timestamp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_timestamp(), target);
  }
  
  // optional int64 end_timestamp = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end_timestamp(), target);
  }
  
  // optional int32 count = 5 [default = 100];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMessageByTimestampRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required .SSDataDomain.SSBOX source_box = 2;
    if (has_source_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_box());
    }
    
    // optional int64 start_timestamp = 3;
    if (has_start_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_timestamp());
    }
    
    // optional int64 end_timestamp = 4;
    if (has_end_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_timestamp());
    }
    
    // optional int32 count = 5 [default = 100];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMessageByTimestampRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMessageByTimestampRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMessageByTimestampRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMessageByTimestampRequest::MergeFrom(const GetMessageByTimestampRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_source_box(from.source_box());
    }
    if (from._has_bit(2)) {
      set_start_timestamp(from.start_timestamp());
    }
    if (from._has_bit(3)) {
      set_end_timestamp(from.end_timestamp());
    }
    if (from._has_bit(4)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMessageByTimestampRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageByTimestampRequest::CopyFrom(const GetMessageByTimestampRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageByTimestampRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetMessageByTimestampRequest::Swap(GetMessageByTimestampRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(source_box_, other->source_box_);
    std::swap(start_timestamp_, other->start_timestamp_);
    std::swap(end_timestamp_, other->end_timestamp_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMessageByTimestampRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMessageByTimestampRequest_descriptor_;
  metadata.reflection = GetMessageByTimestampRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMessageByTimestampResponse::kResultFieldNumber;
const int GetMessageByTimestampResponse::kMsgListFieldNumber;
#endif  // !_MSC_VER

GetMessageByTimestampResponse::GetMessageByTimestampResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMessageByTimestampResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetMessageByTimestampResponse::GetMessageByTimestampResponse(const GetMessageByTimestampResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMessageByTimestampResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMessageByTimestampResponse::~GetMessageByTimestampResponse() {
  SharedDtor();
}

void GetMessageByTimestampResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetMessageByTimestampResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMessageByTimestampResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMessageByTimestampResponse_descriptor_;
}

const GetMessageByTimestampResponse& GetMessageByTimestampResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetMessageByTimestampResponse* GetMessageByTimestampResponse::default_instance_ = NULL;

GetMessageByTimestampResponse* GetMessageByTimestampResponse::New() const {
  return new GetMessageByTimestampResponse;
}

void GetMessageByTimestampResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  msg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMessageByTimestampResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_list;
        break;
      }
      
      // repeated .SSDataDomain.SSMessage msg_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMessageByTimestampResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated .SSDataDomain.SSMessage msg_list = 2;
  for (int i = 0; i < this->msg_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMessageByTimestampResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated .SSDataDomain.SSMessage msg_list = 2;
  for (int i = 0; i < this->msg_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMessageByTimestampResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  // repeated .SSDataDomain.SSMessage msg_list = 2;
  total_size += 1 * this->msg_list_size();
  for (int i = 0; i < this->msg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMessageByTimestampResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMessageByTimestampResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMessageByTimestampResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMessageByTimestampResponse::MergeFrom(const GetMessageByTimestampResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_list_.MergeFrom(from.msg_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMessageByTimestampResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageByTimestampResponse::CopyFrom(const GetMessageByTimestampResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageByTimestampResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < msg_list_size(); i++) {
    if (!this->msg_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetMessageByTimestampResponse::Swap(GetMessageByTimestampResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    msg_list_.Swap(&other->msg_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMessageByTimestampResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMessageByTimestampResponse_descriptor_;
  metadata.reflection = GetMessageByTimestampResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendPublicMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

SendPublicMessageRequest::SendPublicMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendPublicMessageRequest::InitAsDefaultInstance() {
  msg_ = const_cast< ::SSDataDomain::SSMessage*>(&::SSDataDomain::SSMessage::default_instance());
}

SendPublicMessageRequest::SendPublicMessageRequest(const SendPublicMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendPublicMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendPublicMessageRequest::~SendPublicMessageRequest() {
  SharedDtor();
}

void SendPublicMessageRequest::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void SendPublicMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendPublicMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendPublicMessageRequest_descriptor_;
}

const SendPublicMessageRequest& SendPublicMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SendPublicMessageRequest* SendPublicMessageRequest::default_instance_ = NULL;

SendPublicMessageRequest* SendPublicMessageRequest::New() const {
  return new SendPublicMessageRequest;
}

void SendPublicMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != NULL) msg_->::SSDataDomain::SSMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendPublicMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.SSMessage msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendPublicMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.SSMessage msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendPublicMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.SSMessage msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendPublicMessageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.SSMessage msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendPublicMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendPublicMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendPublicMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendPublicMessageRequest::MergeFrom(const SendPublicMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_msg()->::SSDataDomain::SSMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendPublicMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPublicMessageRequest::CopyFrom(const SendPublicMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPublicMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void SendPublicMessageRequest::Swap(SendPublicMessageRequest* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendPublicMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendPublicMessageRequest_descriptor_;
  metadata.reflection = SendPublicMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SendPublicMessageResponse::_default_msgid_;
#ifndef _MSC_VER
const int SendPublicMessageResponse::kResultFieldNumber;
const int SendPublicMessageResponse::kMsgidFieldNumber;
#endif  // !_MSC_VER

SendPublicMessageResponse::SendPublicMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendPublicMessageResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

SendPublicMessageResponse::SendPublicMessageResponse(const SendPublicMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendPublicMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  msgid_ = const_cast< ::std::string*>(&_default_msgid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendPublicMessageResponse::~SendPublicMessageResponse() {
  SharedDtor();
}

void SendPublicMessageResponse::SharedDtor() {
  if (msgid_ != &_default_msgid_) {
    delete msgid_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void SendPublicMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendPublicMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendPublicMessageResponse_descriptor_;
}

const SendPublicMessageResponse& SendPublicMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SendPublicMessageResponse* SendPublicMessageResponse::default_instance_ = NULL;

SendPublicMessageResponse* SendPublicMessageResponse::New() const {
  return new SendPublicMessageResponse;
}

void SendPublicMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
    if (_has_bit(1)) {
      if (msgid_ != &_default_msgid_) {
        msgid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendPublicMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgid;
        break;
      }
      
      // required string msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendPublicMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // required string msgid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendPublicMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // required string msgid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendPublicMessageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
    // required string msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendPublicMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendPublicMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendPublicMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendPublicMessageResponse::MergeFrom(const SendPublicMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
    if (from._has_bit(1)) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendPublicMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPublicMessageResponse::CopyFrom(const SendPublicMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPublicMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SendPublicMessageResponse::Swap(SendPublicMessageResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendPublicMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendPublicMessageResponse_descriptor_;
  metadata.reflection = SendPublicMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

SendMessageRequest::SendMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendMessageRequest::InitAsDefaultInstance() {
  msg_ = const_cast< ::SSDataDomain::SSMessage*>(&::SSDataDomain::SSMessage::default_instance());
}

SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMessageRequest::~SendMessageRequest() {
  SharedDtor();
}

void SendMessageRequest::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void SendMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageRequest_descriptor_;
}

const SendMessageRequest& SendMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SendMessageRequest* SendMessageRequest::default_instance_ = NULL;

SendMessageRequest* SendMessageRequest::New() const {
  return new SendMessageRequest;
}

void SendMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != NULL) msg_->::SSDataDomain::SSMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.SSMessage msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.SSMessage msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.SSMessage msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendMessageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.SSMessage msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMessageRequest::MergeFrom(const SendMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_msg()->::SSDataDomain::SSMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageRequest::CopyFrom(const SendMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void SendMessageRequest::Swap(SendMessageRequest* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageRequest_descriptor_;
  metadata.reflection = SendMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SendMessageResponse::_default_msgid_;
#ifndef _MSC_VER
const int SendMessageResponse::kResultFieldNumber;
const int SendMessageResponse::kMsgidFieldNumber;
#endif  // !_MSC_VER

SendMessageResponse::SendMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendMessageResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

SendMessageResponse::SendMessageResponse(const SendMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  msgid_ = const_cast< ::std::string*>(&_default_msgid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMessageResponse::~SendMessageResponse() {
  SharedDtor();
}

void SendMessageResponse::SharedDtor() {
  if (msgid_ != &_default_msgid_) {
    delete msgid_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void SendMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageResponse_descriptor_;
}

const SendMessageResponse& SendMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

SendMessageResponse* SendMessageResponse::default_instance_ = NULL;

SendMessageResponse* SendMessageResponse::New() const {
  return new SendMessageResponse;
}

void SendMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
    if (_has_bit(1)) {
      if (msgid_ != &_default_msgid_) {
        msgid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgid;
        break;
      }
      
      // required string msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // required string msgid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // required string msgid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendMessageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
    // required string msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMessageResponse::MergeFrom(const SendMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
    if (from._has_bit(1)) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageResponse::CopyFrom(const SendMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SendMessageResponse::Swap(SendMessageResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageResponse_descriptor_;
  metadata.reflection = SendMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFavoriteMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

AddFavoriteMessageRequest::AddFavoriteMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFavoriteMessageRequest::InitAsDefaultInstance() {
  msg_ = const_cast< ::SSDataDomain::SSMessage*>(&::SSDataDomain::SSMessage::default_instance());
}

AddFavoriteMessageRequest::AddFavoriteMessageRequest(const AddFavoriteMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFavoriteMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFavoriteMessageRequest::~AddFavoriteMessageRequest() {
  SharedDtor();
}

void AddFavoriteMessageRequest::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void AddFavoriteMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFavoriteMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFavoriteMessageRequest_descriptor_;
}

const AddFavoriteMessageRequest& AddFavoriteMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

AddFavoriteMessageRequest* AddFavoriteMessageRequest::default_instance_ = NULL;

AddFavoriteMessageRequest* AddFavoriteMessageRequest::New() const {
  return new AddFavoriteMessageRequest;
}

void AddFavoriteMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != NULL) msg_->::SSDataDomain::SSMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFavoriteMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.SSMessage msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFavoriteMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.SSMessage msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFavoriteMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.SSMessage msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFavoriteMessageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.SSMessage msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFavoriteMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFavoriteMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFavoriteMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFavoriteMessageRequest::MergeFrom(const AddFavoriteMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_msg()->::SSDataDomain::SSMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFavoriteMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFavoriteMessageRequest::CopyFrom(const AddFavoriteMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFavoriteMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void AddFavoriteMessageRequest::Swap(AddFavoriteMessageRequest* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFavoriteMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFavoriteMessageRequest_descriptor_;
  metadata.reflection = AddFavoriteMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AddFavoriteMessageResponse::_default_msgid_;
#ifndef _MSC_VER
const int AddFavoriteMessageResponse::kResultFieldNumber;
const int AddFavoriteMessageResponse::kMsgidFieldNumber;
#endif  // !_MSC_VER

AddFavoriteMessageResponse::AddFavoriteMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFavoriteMessageResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

AddFavoriteMessageResponse::AddFavoriteMessageResponse(const AddFavoriteMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFavoriteMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  msgid_ = const_cast< ::std::string*>(&_default_msgid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFavoriteMessageResponse::~AddFavoriteMessageResponse() {
  SharedDtor();
}

void AddFavoriteMessageResponse::SharedDtor() {
  if (msgid_ != &_default_msgid_) {
    delete msgid_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void AddFavoriteMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFavoriteMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFavoriteMessageResponse_descriptor_;
}

const AddFavoriteMessageResponse& AddFavoriteMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

AddFavoriteMessageResponse* AddFavoriteMessageResponse::default_instance_ = NULL;

AddFavoriteMessageResponse* AddFavoriteMessageResponse::New() const {
  return new AddFavoriteMessageResponse;
}

void AddFavoriteMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
    if (_has_bit(1)) {
      if (msgid_ != &_default_msgid_) {
        msgid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFavoriteMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgid;
        break;
      }
      
      // required string msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFavoriteMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // required string msgid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFavoriteMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // required string msgid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFavoriteMessageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
    // required string msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFavoriteMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFavoriteMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFavoriteMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFavoriteMessageResponse::MergeFrom(const AddFavoriteMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
    if (from._has_bit(1)) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFavoriteMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFavoriteMessageResponse::CopyFrom(const AddFavoriteMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFavoriteMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void AddFavoriteMessageResponse::Swap(AddFavoriteMessageResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFavoriteMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFavoriteMessageResponse_descriptor_;
  metadata.reflection = AddFavoriteMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AddContactRequest::_default_userid_;
#ifndef _MSC_VER
const int AddContactRequest::kUseridFieldNumber;
const int AddContactRequest::kContactListFieldNumber;
#endif  // !_MSC_VER

AddContactRequest::AddContactRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddContactRequest::InitAsDefaultInstance() {
}

AddContactRequest::AddContactRequest(const AddContactRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddContactRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddContactRequest::~AddContactRequest() {
  SharedDtor();
}

void AddContactRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void AddContactRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddContactRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddContactRequest_descriptor_;
}

const AddContactRequest& AddContactRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

AddContactRequest* AddContactRequest::default_instance_ = NULL;

AddContactRequest* AddContactRequest::New() const {
  return new AddContactRequest;
}

void AddContactRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  contact_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddContactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contact_list;
        break;
      }
      
      // repeated .SSDataDomain.SSContact contact_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contact_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddContactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // repeated .SSDataDomain.SSContact contact_list = 2;
  for (int i = 0; i < this->contact_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contact_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddContactRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // repeated .SSDataDomain.SSContact contact_list = 2;
  for (int i = 0; i < this->contact_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contact_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddContactRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  // repeated .SSDataDomain.SSContact contact_list = 2;
  total_size += 1 * this->contact_list_size();
  for (int i = 0; i < this->contact_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddContactRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddContactRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddContactRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddContactRequest::MergeFrom(const AddContactRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_list_.MergeFrom(from.contact_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddContactRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddContactRequest::CopyFrom(const AddContactRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddContactRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < contact_list_size(); i++) {
    if (!this->contact_list(i).IsInitialized()) return false;
  }
  return true;
}

void AddContactRequest::Swap(AddContactRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    contact_list_.Swap(&other->contact_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddContactRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddContactRequest_descriptor_;
  metadata.reflection = AddContactRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddContactResponse::kResultFieldNumber;
#endif  // !_MSC_VER

AddContactResponse::AddContactResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddContactResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

AddContactResponse::AddContactResponse(const AddContactResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddContactResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddContactResponse::~AddContactResponse() {
  SharedDtor();
}

void AddContactResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void AddContactResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddContactResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddContactResponse_descriptor_;
}

const AddContactResponse& AddContactResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

AddContactResponse* AddContactResponse::default_instance_ = NULL;

AddContactResponse* AddContactResponse::New() const {
  return new AddContactResponse;
}

void AddContactResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddContactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddContactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddContactResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddContactResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddContactResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddContactResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddContactResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddContactResponse::MergeFrom(const AddContactResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddContactResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddContactResponse::CopyFrom(const AddContactResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddContactResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void AddContactResponse::Swap(AddContactResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddContactResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddContactResponse_descriptor_;
  metadata.reflection = AddContactResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RemoveContactRequest::_default_userid_;
#ifndef _MSC_VER
const int RemoveContactRequest::kUseridFieldNumber;
const int RemoveContactRequest::kContactidListFieldNumber;
#endif  // !_MSC_VER

RemoveContactRequest::RemoveContactRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveContactRequest::InitAsDefaultInstance() {
}

RemoveContactRequest::RemoveContactRequest(const RemoveContactRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveContactRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveContactRequest::~RemoveContactRequest() {
  SharedDtor();
}

void RemoveContactRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void RemoveContactRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveContactRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveContactRequest_descriptor_;
}

const RemoveContactRequest& RemoveContactRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

RemoveContactRequest* RemoveContactRequest::default_instance_ = NULL;

RemoveContactRequest* RemoveContactRequest::New() const {
  return new RemoveContactRequest;
}

void RemoveContactRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  contactid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveContactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contactid_list;
        break;
      }
      
      // repeated string contactid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contactid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_contactid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contactid_list(0).data(), this->contactid_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contactid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveContactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // repeated string contactid_list = 2;
  for (int i = 0; i < this->contactid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->contactid_list(i).data(), this->contactid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contactid_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveContactRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // repeated string contactid_list = 2;
  for (int i = 0; i < this->contactid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactid_list(i).data(), this->contactid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->contactid_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveContactRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  // repeated string contactid_list = 2;
  total_size += 1 * this->contactid_list_size();
  for (int i = 0; i < this->contactid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->contactid_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveContactRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveContactRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveContactRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveContactRequest::MergeFrom(const RemoveContactRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  contactid_list_.MergeFrom(from.contactid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveContactRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveContactRequest::CopyFrom(const RemoveContactRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveContactRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RemoveContactRequest::Swap(RemoveContactRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    contactid_list_.Swap(&other->contactid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveContactRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveContactRequest_descriptor_;
  metadata.reflection = RemoveContactRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveContactResponse::kResultFieldNumber;
#endif  // !_MSC_VER

RemoveContactResponse::RemoveContactResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveContactResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

RemoveContactResponse::RemoveContactResponse(const RemoveContactResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveContactResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveContactResponse::~RemoveContactResponse() {
  SharedDtor();
}

void RemoveContactResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void RemoveContactResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveContactResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveContactResponse_descriptor_;
}

const RemoveContactResponse& RemoveContactResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

RemoveContactResponse* RemoveContactResponse::default_instance_ = NULL;

RemoveContactResponse* RemoveContactResponse::New() const {
  return new RemoveContactResponse;
}

void RemoveContactResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveContactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveContactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveContactResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveContactResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveContactResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveContactResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveContactResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveContactResponse::MergeFrom(const RemoveContactResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveContactResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveContactResponse::CopyFrom(const RemoveContactResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveContactResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void RemoveContactResponse::Swap(RemoveContactResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveContactResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveContactResponse_descriptor_;
  metadata.reflection = RemoveContactResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetContactRequest::_default_userid_;
#ifndef _MSC_VER
const int GetContactRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

GetContactRequest::GetContactRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetContactRequest::InitAsDefaultInstance() {
}

GetContactRequest::GetContactRequest(const GetContactRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetContactRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetContactRequest::~GetContactRequest() {
  SharedDtor();
}

void GetContactRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetContactRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetContactRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetContactRequest_descriptor_;
}

const GetContactRequest& GetContactRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetContactRequest* GetContactRequest::default_instance_ = NULL;

GetContactRequest* GetContactRequest::New() const {
  return new GetContactRequest;
}

void GetContactRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetContactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetContactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetContactRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetContactRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetContactRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetContactRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetContactRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetContactRequest::MergeFrom(const GetContactRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetContactRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContactRequest::CopyFrom(const GetContactRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContactRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetContactRequest::Swap(GetContactRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetContactRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetContactRequest_descriptor_;
  metadata.reflection = GetContactRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetContactResponse::kResultFieldNumber;
const int GetContactResponse::kContactListFieldNumber;
#endif  // !_MSC_VER

GetContactResponse::GetContactResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetContactResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetContactResponse::GetContactResponse(const GetContactResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetContactResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetContactResponse::~GetContactResponse() {
  SharedDtor();
}

void GetContactResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetContactResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetContactResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetContactResponse_descriptor_;
}

const GetContactResponse& GetContactResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetContactResponse* GetContactResponse::default_instance_ = NULL;

GetContactResponse* GetContactResponse::New() const {
  return new GetContactResponse;
}

void GetContactResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  contact_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetContactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contact_list;
        break;
      }
      
      // repeated .SSDataDomain.SSContact contact_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contact_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetContactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated .SSDataDomain.SSContact contact_list = 2;
  for (int i = 0; i < this->contact_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contact_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetContactResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated .SSDataDomain.SSContact contact_list = 2;
  for (int i = 0; i < this->contact_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contact_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetContactResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  // repeated .SSDataDomain.SSContact contact_list = 2;
  total_size += 1 * this->contact_list_size();
  for (int i = 0; i < this->contact_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetContactResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetContactResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetContactResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetContactResponse::MergeFrom(const GetContactResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_list_.MergeFrom(from.contact_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetContactResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContactResponse::CopyFrom(const GetContactResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContactResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < contact_list_size(); i++) {
    if (!this->contact_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetContactResponse::Swap(GetContactResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    contact_list_.Swap(&other->contact_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetContactResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetContactResponse_descriptor_;
  metadata.reflection = GetContactResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AddGroupRequest::_default_userid_;
#ifndef _MSC_VER
const int AddGroupRequest::kUseridFieldNumber;
const int AddGroupRequest::kGroupListFieldNumber;
#endif  // !_MSC_VER

AddGroupRequest::AddGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddGroupRequest::InitAsDefaultInstance() {
}

AddGroupRequest::AddGroupRequest(const AddGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddGroupRequest::~AddGroupRequest() {
  SharedDtor();
}

void AddGroupRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void AddGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddGroupRequest_descriptor_;
}

const AddGroupRequest& AddGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

AddGroupRequest* AddGroupRequest::default_instance_ = NULL;

AddGroupRequest* AddGroupRequest::New() const {
  return new AddGroupRequest;
}

void AddGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  group_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_list;
        break;
      }
      
      // repeated .SSDataDomain.SSGroup group_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // repeated .SSDataDomain.SSGroup group_list = 2;
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // repeated .SSDataDomain.SSGroup group_list = 2;
  for (int i = 0; i < this->group_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddGroupRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  // repeated .SSDataDomain.SSGroup group_list = 2;
  total_size += 1 * this->group_list_size();
  for (int i = 0; i < this->group_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddGroupRequest::MergeFrom(const AddGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_list_.MergeFrom(from.group_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroupRequest::CopyFrom(const AddGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < group_list_size(); i++) {
    if (!this->group_list(i).IsInitialized()) return false;
  }
  return true;
}

void AddGroupRequest::Swap(AddGroupRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    group_list_.Swap(&other->group_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddGroupRequest_descriptor_;
  metadata.reflection = AddGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddGroupResponse::kResultFieldNumber;
#endif  // !_MSC_VER

AddGroupResponse::AddGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddGroupResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

AddGroupResponse::AddGroupResponse(const AddGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddGroupResponse::~AddGroupResponse() {
  SharedDtor();
}

void AddGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void AddGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddGroupResponse_descriptor_;
}

const AddGroupResponse& AddGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

AddGroupResponse* AddGroupResponse::default_instance_ = NULL;

AddGroupResponse* AddGroupResponse::New() const {
  return new AddGroupResponse;
}

void AddGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddGroupResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddGroupResponse::MergeFrom(const AddGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroupResponse::CopyFrom(const AddGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void AddGroupResponse::Swap(AddGroupResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddGroupResponse_descriptor_;
  metadata.reflection = AddGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RemoveGroupRequest::_default_userid_;
#ifndef _MSC_VER
const int RemoveGroupRequest::kUseridFieldNumber;
const int RemoveGroupRequest::kGroupidListFieldNumber;
#endif  // !_MSC_VER

RemoveGroupRequest::RemoveGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveGroupRequest::InitAsDefaultInstance() {
}

RemoveGroupRequest::RemoveGroupRequest(const RemoveGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveGroupRequest::~RemoveGroupRequest() {
  SharedDtor();
}

void RemoveGroupRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void RemoveGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveGroupRequest_descriptor_;
}

const RemoveGroupRequest& RemoveGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

RemoveGroupRequest* RemoveGroupRequest::default_instance_ = NULL;

RemoveGroupRequest* RemoveGroupRequest::New() const {
  return new RemoveGroupRequest;
}

void RemoveGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  groupid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupid_list;
        break;
      }
      
      // repeated string groupid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_groupid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid_list(0).data(), this->groupid_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // repeated string groupid_list = 2;
  for (int i = 0; i < this->groupid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->groupid_list(i).data(), this->groupid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->groupid_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // repeated string groupid_list = 2;
  for (int i = 0; i < this->groupid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid_list(i).data(), this->groupid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->groupid_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveGroupRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  // repeated string groupid_list = 2;
  total_size += 1 * this->groupid_list_size();
  for (int i = 0; i < this->groupid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->groupid_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveGroupRequest::MergeFrom(const RemoveGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupid_list_.MergeFrom(from.groupid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveGroupRequest::CopyFrom(const RemoveGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RemoveGroupRequest::Swap(RemoveGroupRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    groupid_list_.Swap(&other->groupid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveGroupRequest_descriptor_;
  metadata.reflection = RemoveGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveGroupResponse::kResultFieldNumber;
#endif  // !_MSC_VER

RemoveGroupResponse::RemoveGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveGroupResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

RemoveGroupResponse::RemoveGroupResponse(const RemoveGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveGroupResponse::~RemoveGroupResponse() {
  SharedDtor();
}

void RemoveGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void RemoveGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveGroupResponse_descriptor_;
}

const RemoveGroupResponse& RemoveGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

RemoveGroupResponse* RemoveGroupResponse::default_instance_ = NULL;

RemoveGroupResponse* RemoveGroupResponse::New() const {
  return new RemoveGroupResponse;
}

void RemoveGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveGroupResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveGroupResponse::MergeFrom(const RemoveGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveGroupResponse::CopyFrom(const RemoveGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void RemoveGroupResponse::Swap(RemoveGroupResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveGroupResponse_descriptor_;
  metadata.reflection = RemoveGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetGroupRequest::_default_userid_;
#ifndef _MSC_VER
const int GetGroupRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

GetGroupRequest::GetGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGroupRequest::InitAsDefaultInstance() {
}

GetGroupRequest::GetGroupRequest(const GetGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupRequest::~GetGroupRequest() {
  SharedDtor();
}

void GetGroupRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupRequest_descriptor_;
}

const GetGroupRequest& GetGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetGroupRequest* GetGroupRequest::default_instance_ = NULL;

GetGroupRequest* GetGroupRequest::New() const {
  return new GetGroupRequest;
}

void GetGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGroupRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupRequest::MergeFrom(const GetGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupRequest::CopyFrom(const GetGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetGroupRequest::Swap(GetGroupRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupRequest_descriptor_;
  metadata.reflection = GetGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupResponse::kResultFieldNumber;
const int GetGroupResponse::kGroupListFieldNumber;
#endif  // !_MSC_VER

GetGroupResponse::GetGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGroupResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetGroupResponse::GetGroupResponse(const GetGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupResponse::~GetGroupResponse() {
  SharedDtor();
}

void GetGroupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupResponse_descriptor_;
}

const GetGroupResponse& GetGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetGroupResponse* GetGroupResponse::default_instance_ = NULL;

GetGroupResponse* GetGroupResponse::New() const {
  return new GetGroupResponse;
}

void GetGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  group_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_list;
        break;
      }
      
      // repeated .SSDataDomain.SSGroup group_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated .SSDataDomain.SSGroup group_list = 2;
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated .SSDataDomain.SSGroup group_list = 2;
  for (int i = 0; i < this->group_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGroupResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  // repeated .SSDataDomain.SSGroup group_list = 2;
  total_size += 1 * this->group_list_size();
  for (int i = 0; i < this->group_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupResponse::MergeFrom(const GetGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_list_.MergeFrom(from.group_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupResponse::CopyFrom(const GetGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < group_list_size(); i++) {
    if (!this->group_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetGroupResponse::Swap(GetGroupResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    group_list_.Swap(&other->group_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupResponse_descriptor_;
  metadata.reflection = GetGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AddMemberRequest::_default_userid_;
#ifndef _MSC_VER
const int AddMemberRequest::kUseridFieldNumber;
const int AddMemberRequest::kMemberListFieldNumber;
#endif  // !_MSC_VER

AddMemberRequest::AddMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddMemberRequest::InitAsDefaultInstance() {
}

AddMemberRequest::AddMemberRequest(const AddMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMemberRequest::~AddMemberRequest() {
  SharedDtor();
}

void AddMemberRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void AddMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMemberRequest_descriptor_;
}

const AddMemberRequest& AddMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

AddMemberRequest* AddMemberRequest::default_instance_ = NULL;

AddMemberRequest* AddMemberRequest::New() const {
  return new AddMemberRequest;
}

void AddMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_list;
        break;
      }
      
      // repeated .SSDataDomain.SSMember member_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // repeated .SSDataDomain.SSMember member_list = 2;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // repeated .SSDataDomain.SSMember member_list = 2;
  for (int i = 0; i < this->member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  // repeated .SSDataDomain.SSMember member_list = 2;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMemberRequest::MergeFrom(const AddMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMemberRequest::CopyFrom(const AddMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < member_list_size(); i++) {
    if (!this->member_list(i).IsInitialized()) return false;
  }
  return true;
}

void AddMemberRequest::Swap(AddMemberRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMemberRequest_descriptor_;
  metadata.reflection = AddMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMemberResponse::kResultFieldNumber;
#endif  // !_MSC_VER

AddMemberResponse::AddMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddMemberResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

AddMemberResponse::AddMemberResponse(const AddMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMemberResponse::~AddMemberResponse() {
  SharedDtor();
}

void AddMemberResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void AddMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMemberResponse_descriptor_;
}

const AddMemberResponse& AddMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

AddMemberResponse* AddMemberResponse::default_instance_ = NULL;

AddMemberResponse* AddMemberResponse::New() const {
  return new AddMemberResponse;
}

void AddMemberResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddMemberResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMemberResponse::MergeFrom(const AddMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMemberResponse::CopyFrom(const AddMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMemberResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void AddMemberResponse::Swap(AddMemberResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMemberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMemberResponse_descriptor_;
  metadata.reflection = AddMemberResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RemoveMemberRequest::_default_userid_;
#ifndef _MSC_VER
const int RemoveMemberRequest::kUseridFieldNumber;
const int RemoveMemberRequest::kMemberListFieldNumber;
#endif  // !_MSC_VER

RemoveMemberRequest::RemoveMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveMemberRequest::InitAsDefaultInstance() {
}

RemoveMemberRequest::RemoveMemberRequest(const RemoveMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveMemberRequest::~RemoveMemberRequest() {
  SharedDtor();
}

void RemoveMemberRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void RemoveMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveMemberRequest_descriptor_;
}

const RemoveMemberRequest& RemoveMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

RemoveMemberRequest* RemoveMemberRequest::default_instance_ = NULL;

RemoveMemberRequest* RemoveMemberRequest::New() const {
  return new RemoveMemberRequest;
}

void RemoveMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_list;
        break;
      }
      
      // repeated .SSDataDomain.SSMember member_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // repeated .SSDataDomain.SSMember member_list = 2;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // repeated .SSDataDomain.SSMember member_list = 2;
  for (int i = 0; i < this->member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  // repeated .SSDataDomain.SSMember member_list = 2;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveMemberRequest::MergeFrom(const RemoveMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMemberRequest::CopyFrom(const RemoveMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < member_list_size(); i++) {
    if (!this->member_list(i).IsInitialized()) return false;
  }
  return true;
}

void RemoveMemberRequest::Swap(RemoveMemberRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveMemberRequest_descriptor_;
  metadata.reflection = RemoveMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveMemberResponse::kResultFieldNumber;
#endif  // !_MSC_VER

RemoveMemberResponse::RemoveMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveMemberResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

RemoveMemberResponse::RemoveMemberResponse(const RemoveMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveMemberResponse::~RemoveMemberResponse() {
  SharedDtor();
}

void RemoveMemberResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void RemoveMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveMemberResponse_descriptor_;
}

const RemoveMemberResponse& RemoveMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

RemoveMemberResponse* RemoveMemberResponse::default_instance_ = NULL;

RemoveMemberResponse* RemoveMemberResponse::New() const {
  return new RemoveMemberResponse;
}

void RemoveMemberResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveMemberResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveMemberResponse::MergeFrom(const RemoveMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMemberResponse::CopyFrom(const RemoveMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMemberResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void RemoveMemberResponse::Swap(RemoveMemberResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveMemberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveMemberResponse_descriptor_;
  metadata.reflection = RemoveMemberResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetMemberRequest::_default_userid_;
#ifndef _MSC_VER
const int GetMemberRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

GetMemberRequest::GetMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMemberRequest::InitAsDefaultInstance() {
}

GetMemberRequest::GetMemberRequest(const GetMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMemberRequest::~GetMemberRequest() {
  SharedDtor();
}

void GetMemberRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMemberRequest_descriptor_;
}

const GetMemberRequest& GetMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetMemberRequest* GetMemberRequest::default_instance_ = NULL;

GetMemberRequest* GetMemberRequest::New() const {
  return new GetMemberRequest;
}

void GetMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMemberRequest::MergeFrom(const GetMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMemberRequest::CopyFrom(const GetMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetMemberRequest::Swap(GetMemberRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMemberRequest_descriptor_;
  metadata.reflection = GetMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMemberResponse::kResultFieldNumber;
const int GetMemberResponse::kMemberListFieldNumber;
#endif  // !_MSC_VER

GetMemberResponse::GetMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMemberResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetMemberResponse::GetMemberResponse(const GetMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMemberResponse::~GetMemberResponse() {
  SharedDtor();
}

void GetMemberResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMemberResponse_descriptor_;
}

const GetMemberResponse& GetMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetMemberResponse* GetMemberResponse::default_instance_ = NULL;

GetMemberResponse* GetMemberResponse::New() const {
  return new GetMemberResponse;
}

void GetMemberResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_list;
        break;
      }
      
      // repeated .SSDataDomain.SSMember member_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated .SSDataDomain.SSMember member_list = 2;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated .SSDataDomain.SSMember member_list = 2;
  for (int i = 0; i < this->member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMemberResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  // repeated .SSDataDomain.SSMember member_list = 2;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMemberResponse::MergeFrom(const GetMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMemberResponse::CopyFrom(const GetMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMemberResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < member_list_size(); i++) {
    if (!this->member_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetMemberResponse::Swap(GetMemberResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMemberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMemberResponse_descriptor_;
  metadata.reflection = GetMemberResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string QueryAndUpdateRequest::_default_key_;
const ::std::string QueryAndUpdateRequest::_default_update_value_;
#ifndef _MSC_VER
const int QueryAndUpdateRequest::kKeyFieldNumber;
const int QueryAndUpdateRequest::kUpdateValueFieldNumber;
const int QueryAndUpdateRequest::kIsUpdateFieldNumber;
const int QueryAndUpdateRequest::kConsistencyLevelFieldNumber;
#endif  // !_MSC_VER

QueryAndUpdateRequest::QueryAndUpdateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryAndUpdateRequest::InitAsDefaultInstance() {
}

QueryAndUpdateRequest::QueryAndUpdateRequest(const QueryAndUpdateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryAndUpdateRequest::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  update_value_ = const_cast< ::std::string*>(&_default_update_value_);
  is_update_ = false;
  consistency_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAndUpdateRequest::~QueryAndUpdateRequest() {
  SharedDtor();
}

void QueryAndUpdateRequest::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (update_value_ != &_default_update_value_) {
    delete update_value_;
  }
  if (this != default_instance_) {
  }
}

void QueryAndUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAndUpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAndUpdateRequest_descriptor_;
}

const QueryAndUpdateRequest& QueryAndUpdateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

QueryAndUpdateRequest* QueryAndUpdateRequest::default_instance_ = NULL;

QueryAndUpdateRequest* QueryAndUpdateRequest::New() const {
  return new QueryAndUpdateRequest;
}

void QueryAndUpdateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (update_value_ != &_default_update_value_) {
        update_value_->clear();
      }
    }
    is_update_ = false;
    consistency_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAndUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_update_value;
        break;
      }
      
      // optional bytes update_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_update;
        break;
      }
      
      // optional bool is_update = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_update_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_consistency_level;
        break;
      }
      
      // optional int32 consistency_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consistency_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consistency_level_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryAndUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // optional bytes update_value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->update_value(), output);
  }
  
  // optional bool is_update = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_update(), output);
  }
  
  // optional int32 consistency_level = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->consistency_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryAndUpdateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // optional bytes update_value = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->update_value(), target);
  }
  
  // optional bool is_update = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_update(), target);
  }
  
  // optional int32 consistency_level = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->consistency_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryAndUpdateRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional bytes update_value = 2;
    if (has_update_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_value());
    }
    
    // optional bool is_update = 3 [default = false];
    if (has_is_update()) {
      total_size += 1 + 1;
    }
    
    // optional int32 consistency_level = 4;
    if (has_consistency_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consistency_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAndUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAndUpdateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAndUpdateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAndUpdateRequest::MergeFrom(const QueryAndUpdateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_update_value(from.update_value());
    }
    if (from._has_bit(2)) {
      set_is_update(from.is_update());
    }
    if (from._has_bit(3)) {
      set_consistency_level(from.consistency_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAndUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAndUpdateRequest::CopyFrom(const QueryAndUpdateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAndUpdateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void QueryAndUpdateRequest::Swap(QueryAndUpdateRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(update_value_, other->update_value_);
    std::swap(is_update_, other->is_update_);
    std::swap(consistency_level_, other->consistency_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAndUpdateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAndUpdateRequest_descriptor_;
  metadata.reflection = QueryAndUpdateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string QueryAndUpdateResponse::_default_value_;
#ifndef _MSC_VER
const int QueryAndUpdateResponse::kResultFieldNumber;
const int QueryAndUpdateResponse::kValueFieldNumber;
#endif  // !_MSC_VER

QueryAndUpdateResponse::QueryAndUpdateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryAndUpdateResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

QueryAndUpdateResponse::QueryAndUpdateResponse(const QueryAndUpdateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryAndUpdateResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAndUpdateResponse::~QueryAndUpdateResponse() {
  SharedDtor();
}

void QueryAndUpdateResponse::SharedDtor() {
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void QueryAndUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAndUpdateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAndUpdateResponse_descriptor_;
}

const QueryAndUpdateResponse& QueryAndUpdateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

QueryAndUpdateResponse* QueryAndUpdateResponse::default_instance_ = NULL;

QueryAndUpdateResponse* QueryAndUpdateResponse::New() const {
  return new QueryAndUpdateResponse;
}

void QueryAndUpdateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAndUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryAndUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // optional bytes value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryAndUpdateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // optional bytes value = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryAndUpdateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAndUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAndUpdateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAndUpdateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAndUpdateResponse::MergeFrom(const QueryAndUpdateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAndUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAndUpdateResponse::CopyFrom(const QueryAndUpdateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAndUpdateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void QueryAndUpdateResponse::Swap(QueryAndUpdateResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAndUpdateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAndUpdateResponse_descriptor_;
  metadata.reflection = QueryAndUpdateResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string QueryAndDeleteRequest::_default_key_;
#ifndef _MSC_VER
const int QueryAndDeleteRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

QueryAndDeleteRequest::QueryAndDeleteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryAndDeleteRequest::InitAsDefaultInstance() {
}

QueryAndDeleteRequest::QueryAndDeleteRequest(const QueryAndDeleteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryAndDeleteRequest::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAndDeleteRequest::~QueryAndDeleteRequest() {
  SharedDtor();
}

void QueryAndDeleteRequest::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void QueryAndDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAndDeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAndDeleteRequest_descriptor_;
}

const QueryAndDeleteRequest& QueryAndDeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

QueryAndDeleteRequest* QueryAndDeleteRequest::default_instance_ = NULL;

QueryAndDeleteRequest* QueryAndDeleteRequest::New() const {
  return new QueryAndDeleteRequest;
}

void QueryAndDeleteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAndDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryAndDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryAndDeleteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryAndDeleteRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAndDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAndDeleteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAndDeleteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAndDeleteRequest::MergeFrom(const QueryAndDeleteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAndDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAndDeleteRequest::CopyFrom(const QueryAndDeleteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAndDeleteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void QueryAndDeleteRequest::Swap(QueryAndDeleteRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAndDeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAndDeleteRequest_descriptor_;
  metadata.reflection = QueryAndDeleteRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string QueryAndDeleteResponse::_default_value_;
#ifndef _MSC_VER
const int QueryAndDeleteResponse::kResultFieldNumber;
const int QueryAndDeleteResponse::kValueFieldNumber;
#endif  // !_MSC_VER

QueryAndDeleteResponse::QueryAndDeleteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryAndDeleteResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

QueryAndDeleteResponse::QueryAndDeleteResponse(const QueryAndDeleteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryAndDeleteResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAndDeleteResponse::~QueryAndDeleteResponse() {
  SharedDtor();
}

void QueryAndDeleteResponse::SharedDtor() {
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void QueryAndDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAndDeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAndDeleteResponse_descriptor_;
}

const QueryAndDeleteResponse& QueryAndDeleteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

QueryAndDeleteResponse* QueryAndDeleteResponse::default_instance_ = NULL;

QueryAndDeleteResponse* QueryAndDeleteResponse::New() const {
  return new QueryAndDeleteResponse;
}

void QueryAndDeleteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAndDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryAndDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // optional bytes value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryAndDeleteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // optional bytes value = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryAndDeleteResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAndDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAndDeleteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAndDeleteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAndDeleteResponse::MergeFrom(const QueryAndDeleteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAndDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAndDeleteResponse::CopyFrom(const QueryAndDeleteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAndDeleteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void QueryAndDeleteResponse::Swap(QueryAndDeleteResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAndDeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAndDeleteResponse_descriptor_;
  metadata.reflection = QueryAndDeleteResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AddLogicNodeSubscribeInfoRequest::_default_userid_;
#ifndef _MSC_VER
const int AddLogicNodeSubscribeInfoRequest::kUseridFieldNumber;
const int AddLogicNodeSubscribeInfoRequest::kLogicNodeListFieldNumber;
#endif  // !_MSC_VER

AddLogicNodeSubscribeInfoRequest::AddLogicNodeSubscribeInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddLogicNodeSubscribeInfoRequest::InitAsDefaultInstance() {
}

AddLogicNodeSubscribeInfoRequest::AddLogicNodeSubscribeInfoRequest(const AddLogicNodeSubscribeInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddLogicNodeSubscribeInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddLogicNodeSubscribeInfoRequest::~AddLogicNodeSubscribeInfoRequest() {
  SharedDtor();
}

void AddLogicNodeSubscribeInfoRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void AddLogicNodeSubscribeInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddLogicNodeSubscribeInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddLogicNodeSubscribeInfoRequest_descriptor_;
}

const AddLogicNodeSubscribeInfoRequest& AddLogicNodeSubscribeInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

AddLogicNodeSubscribeInfoRequest* AddLogicNodeSubscribeInfoRequest::default_instance_ = NULL;

AddLogicNodeSubscribeInfoRequest* AddLogicNodeSubscribeInfoRequest::New() const {
  return new AddLogicNodeSubscribeInfoRequest;
}

void AddLogicNodeSubscribeInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  logic_node_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddLogicNodeSubscribeInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logic_node_list;
        break;
      }
      
      // repeated string logic_node_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logic_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_logic_node_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logic_node_list(0).data(), this->logic_node_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logic_node_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddLogicNodeSubscribeInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // repeated string logic_node_list = 2;
  for (int i = 0; i < this->logic_node_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->logic_node_list(i).data(), this->logic_node_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->logic_node_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddLogicNodeSubscribeInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // repeated string logic_node_list = 2;
  for (int i = 0; i < this->logic_node_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logic_node_list(i).data(), this->logic_node_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->logic_node_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddLogicNodeSubscribeInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  // repeated string logic_node_list = 2;
  total_size += 1 * this->logic_node_list_size();
  for (int i = 0; i < this->logic_node_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->logic_node_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddLogicNodeSubscribeInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddLogicNodeSubscribeInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddLogicNodeSubscribeInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddLogicNodeSubscribeInfoRequest::MergeFrom(const AddLogicNodeSubscribeInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  logic_node_list_.MergeFrom(from.logic_node_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddLogicNodeSubscribeInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddLogicNodeSubscribeInfoRequest::CopyFrom(const AddLogicNodeSubscribeInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLogicNodeSubscribeInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AddLogicNodeSubscribeInfoRequest::Swap(AddLogicNodeSubscribeInfoRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    logic_node_list_.Swap(&other->logic_node_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddLogicNodeSubscribeInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddLogicNodeSubscribeInfoRequest_descriptor_;
  metadata.reflection = AddLogicNodeSubscribeInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddLogicNodeSubscribeInfoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

AddLogicNodeSubscribeInfoResponse::AddLogicNodeSubscribeInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddLogicNodeSubscribeInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

AddLogicNodeSubscribeInfoResponse::AddLogicNodeSubscribeInfoResponse(const AddLogicNodeSubscribeInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddLogicNodeSubscribeInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddLogicNodeSubscribeInfoResponse::~AddLogicNodeSubscribeInfoResponse() {
  SharedDtor();
}

void AddLogicNodeSubscribeInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void AddLogicNodeSubscribeInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddLogicNodeSubscribeInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddLogicNodeSubscribeInfoResponse_descriptor_;
}

const AddLogicNodeSubscribeInfoResponse& AddLogicNodeSubscribeInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

AddLogicNodeSubscribeInfoResponse* AddLogicNodeSubscribeInfoResponse::default_instance_ = NULL;

AddLogicNodeSubscribeInfoResponse* AddLogicNodeSubscribeInfoResponse::New() const {
  return new AddLogicNodeSubscribeInfoResponse;
}

void AddLogicNodeSubscribeInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddLogicNodeSubscribeInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddLogicNodeSubscribeInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddLogicNodeSubscribeInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddLogicNodeSubscribeInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddLogicNodeSubscribeInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddLogicNodeSubscribeInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddLogicNodeSubscribeInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddLogicNodeSubscribeInfoResponse::MergeFrom(const AddLogicNodeSubscribeInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddLogicNodeSubscribeInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddLogicNodeSubscribeInfoResponse::CopyFrom(const AddLogicNodeSubscribeInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLogicNodeSubscribeInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void AddLogicNodeSubscribeInfoResponse::Swap(AddLogicNodeSubscribeInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddLogicNodeSubscribeInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddLogicNodeSubscribeInfoResponse_descriptor_;
  metadata.reflection = AddLogicNodeSubscribeInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RemoveLogicNodeSubscribeInfoRequest::_default_userid_;
#ifndef _MSC_VER
const int RemoveLogicNodeSubscribeInfoRequest::kUseridFieldNumber;
const int RemoveLogicNodeSubscribeInfoRequest::kLogicNodeListFieldNumber;
#endif  // !_MSC_VER

RemoveLogicNodeSubscribeInfoRequest::RemoveLogicNodeSubscribeInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveLogicNodeSubscribeInfoRequest::InitAsDefaultInstance() {
}

RemoveLogicNodeSubscribeInfoRequest::RemoveLogicNodeSubscribeInfoRequest(const RemoveLogicNodeSubscribeInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveLogicNodeSubscribeInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveLogicNodeSubscribeInfoRequest::~RemoveLogicNodeSubscribeInfoRequest() {
  SharedDtor();
}

void RemoveLogicNodeSubscribeInfoRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void RemoveLogicNodeSubscribeInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveLogicNodeSubscribeInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveLogicNodeSubscribeInfoRequest_descriptor_;
}

const RemoveLogicNodeSubscribeInfoRequest& RemoveLogicNodeSubscribeInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

RemoveLogicNodeSubscribeInfoRequest* RemoveLogicNodeSubscribeInfoRequest::default_instance_ = NULL;

RemoveLogicNodeSubscribeInfoRequest* RemoveLogicNodeSubscribeInfoRequest::New() const {
  return new RemoveLogicNodeSubscribeInfoRequest;
}

void RemoveLogicNodeSubscribeInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  logic_node_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveLogicNodeSubscribeInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logic_node_list;
        break;
      }
      
      // repeated string logic_node_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logic_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_logic_node_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logic_node_list(0).data(), this->logic_node_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logic_node_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveLogicNodeSubscribeInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // repeated string logic_node_list = 2;
  for (int i = 0; i < this->logic_node_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->logic_node_list(i).data(), this->logic_node_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->logic_node_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveLogicNodeSubscribeInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // repeated string logic_node_list = 2;
  for (int i = 0; i < this->logic_node_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logic_node_list(i).data(), this->logic_node_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->logic_node_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveLogicNodeSubscribeInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  // repeated string logic_node_list = 2;
  total_size += 1 * this->logic_node_list_size();
  for (int i = 0; i < this->logic_node_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->logic_node_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveLogicNodeSubscribeInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveLogicNodeSubscribeInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveLogicNodeSubscribeInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveLogicNodeSubscribeInfoRequest::MergeFrom(const RemoveLogicNodeSubscribeInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  logic_node_list_.MergeFrom(from.logic_node_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveLogicNodeSubscribeInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveLogicNodeSubscribeInfoRequest::CopyFrom(const RemoveLogicNodeSubscribeInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveLogicNodeSubscribeInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RemoveLogicNodeSubscribeInfoRequest::Swap(RemoveLogicNodeSubscribeInfoRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    logic_node_list_.Swap(&other->logic_node_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveLogicNodeSubscribeInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveLogicNodeSubscribeInfoRequest_descriptor_;
  metadata.reflection = RemoveLogicNodeSubscribeInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveLogicNodeSubscribeInfoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

RemoveLogicNodeSubscribeInfoResponse::RemoveLogicNodeSubscribeInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveLogicNodeSubscribeInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

RemoveLogicNodeSubscribeInfoResponse::RemoveLogicNodeSubscribeInfoResponse(const RemoveLogicNodeSubscribeInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveLogicNodeSubscribeInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveLogicNodeSubscribeInfoResponse::~RemoveLogicNodeSubscribeInfoResponse() {
  SharedDtor();
}

void RemoveLogicNodeSubscribeInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void RemoveLogicNodeSubscribeInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveLogicNodeSubscribeInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveLogicNodeSubscribeInfoResponse_descriptor_;
}

const RemoveLogicNodeSubscribeInfoResponse& RemoveLogicNodeSubscribeInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

RemoveLogicNodeSubscribeInfoResponse* RemoveLogicNodeSubscribeInfoResponse::default_instance_ = NULL;

RemoveLogicNodeSubscribeInfoResponse* RemoveLogicNodeSubscribeInfoResponse::New() const {
  return new RemoveLogicNodeSubscribeInfoResponse;
}

void RemoveLogicNodeSubscribeInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveLogicNodeSubscribeInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveLogicNodeSubscribeInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveLogicNodeSubscribeInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveLogicNodeSubscribeInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveLogicNodeSubscribeInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveLogicNodeSubscribeInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveLogicNodeSubscribeInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveLogicNodeSubscribeInfoResponse::MergeFrom(const RemoveLogicNodeSubscribeInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveLogicNodeSubscribeInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveLogicNodeSubscribeInfoResponse::CopyFrom(const RemoveLogicNodeSubscribeInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveLogicNodeSubscribeInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void RemoveLogicNodeSubscribeInfoResponse::Swap(RemoveLogicNodeSubscribeInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveLogicNodeSubscribeInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveLogicNodeSubscribeInfoResponse_descriptor_;
  metadata.reflection = RemoveLogicNodeSubscribeInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetLogicNodeSubscribeInfoRequest::_default_userid_;
#ifndef _MSC_VER
const int GetLogicNodeSubscribeInfoRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

GetLogicNodeSubscribeInfoRequest::GetLogicNodeSubscribeInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLogicNodeSubscribeInfoRequest::InitAsDefaultInstance() {
}

GetLogicNodeSubscribeInfoRequest::GetLogicNodeSubscribeInfoRequest(const GetLogicNodeSubscribeInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLogicNodeSubscribeInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLogicNodeSubscribeInfoRequest::~GetLogicNodeSubscribeInfoRequest() {
  SharedDtor();
}

void GetLogicNodeSubscribeInfoRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetLogicNodeSubscribeInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLogicNodeSubscribeInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLogicNodeSubscribeInfoRequest_descriptor_;
}

const GetLogicNodeSubscribeInfoRequest& GetLogicNodeSubscribeInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetLogicNodeSubscribeInfoRequest* GetLogicNodeSubscribeInfoRequest::default_instance_ = NULL;

GetLogicNodeSubscribeInfoRequest* GetLogicNodeSubscribeInfoRequest::New() const {
  return new GetLogicNodeSubscribeInfoRequest;
}

void GetLogicNodeSubscribeInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLogicNodeSubscribeInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLogicNodeSubscribeInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLogicNodeSubscribeInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLogicNodeSubscribeInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLogicNodeSubscribeInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLogicNodeSubscribeInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLogicNodeSubscribeInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLogicNodeSubscribeInfoRequest::MergeFrom(const GetLogicNodeSubscribeInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLogicNodeSubscribeInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLogicNodeSubscribeInfoRequest::CopyFrom(const GetLogicNodeSubscribeInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLogicNodeSubscribeInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetLogicNodeSubscribeInfoRequest::Swap(GetLogicNodeSubscribeInfoRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLogicNodeSubscribeInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLogicNodeSubscribeInfoRequest_descriptor_;
  metadata.reflection = GetLogicNodeSubscribeInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLogicNodeSubscribeInfoResponse::kResultFieldNumber;
const int GetLogicNodeSubscribeInfoResponse::kLogicNodeListFieldNumber;
#endif  // !_MSC_VER

GetLogicNodeSubscribeInfoResponse::GetLogicNodeSubscribeInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLogicNodeSubscribeInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetLogicNodeSubscribeInfoResponse::GetLogicNodeSubscribeInfoResponse(const GetLogicNodeSubscribeInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLogicNodeSubscribeInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLogicNodeSubscribeInfoResponse::~GetLogicNodeSubscribeInfoResponse() {
  SharedDtor();
}

void GetLogicNodeSubscribeInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetLogicNodeSubscribeInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLogicNodeSubscribeInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLogicNodeSubscribeInfoResponse_descriptor_;
}

const GetLogicNodeSubscribeInfoResponse& GetLogicNodeSubscribeInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetLogicNodeSubscribeInfoResponse* GetLogicNodeSubscribeInfoResponse::default_instance_ = NULL;

GetLogicNodeSubscribeInfoResponse* GetLogicNodeSubscribeInfoResponse::New() const {
  return new GetLogicNodeSubscribeInfoResponse;
}

void GetLogicNodeSubscribeInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  logic_node_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLogicNodeSubscribeInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logic_node_list;
        break;
      }
      
      // repeated string logic_node_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logic_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_logic_node_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logic_node_list(0).data(), this->logic_node_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logic_node_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLogicNodeSubscribeInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated string logic_node_list = 2;
  for (int i = 0; i < this->logic_node_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->logic_node_list(i).data(), this->logic_node_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->logic_node_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLogicNodeSubscribeInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated string logic_node_list = 2;
  for (int i = 0; i < this->logic_node_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logic_node_list(i).data(), this->logic_node_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->logic_node_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLogicNodeSubscribeInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  // repeated string logic_node_list = 2;
  total_size += 1 * this->logic_node_list_size();
  for (int i = 0; i < this->logic_node_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->logic_node_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLogicNodeSubscribeInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLogicNodeSubscribeInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLogicNodeSubscribeInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLogicNodeSubscribeInfoResponse::MergeFrom(const GetLogicNodeSubscribeInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  logic_node_list_.MergeFrom(from.logic_node_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLogicNodeSubscribeInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLogicNodeSubscribeInfoResponse::CopyFrom(const GetLogicNodeSubscribeInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLogicNodeSubscribeInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void GetLogicNodeSubscribeInfoResponse::Swap(GetLogicNodeSubscribeInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    logic_node_list_.Swap(&other->logic_node_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLogicNodeSubscribeInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLogicNodeSubscribeInfoResponse_descriptor_;
  metadata.reflection = GetLogicNodeSubscribeInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetFollowerWithProfileRequest::_default_userid_;
const ::std::string GetFollowerWithProfileRequest::_default_cursor_id_;
#ifndef _MSC_VER
const int GetFollowerWithProfileRequest::kUseridFieldNumber;
const int GetFollowerWithProfileRequest::kCursorIdFieldNumber;
const int GetFollowerWithProfileRequest::kCountFieldNumber;
const int GetFollowerWithProfileRequest::kExcludeIconFieldNumber;
#endif  // !_MSC_VER

GetFollowerWithProfileRequest::GetFollowerWithProfileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFollowerWithProfileRequest::InitAsDefaultInstance() {
}

GetFollowerWithProfileRequest::GetFollowerWithProfileRequest(const GetFollowerWithProfileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFollowerWithProfileRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  cursor_id_ = const_cast< ::std::string*>(&_default_cursor_id_);
  count_ = 100;
  exclude_icon_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFollowerWithProfileRequest::~GetFollowerWithProfileRequest() {
  SharedDtor();
}

void GetFollowerWithProfileRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (cursor_id_ != &_default_cursor_id_) {
    delete cursor_id_;
  }
  if (this != default_instance_) {
  }
}

void GetFollowerWithProfileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFollowerWithProfileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFollowerWithProfileRequest_descriptor_;
}

const GetFollowerWithProfileRequest& GetFollowerWithProfileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetFollowerWithProfileRequest* GetFollowerWithProfileRequest::default_instance_ = NULL;

GetFollowerWithProfileRequest* GetFollowerWithProfileRequest::New() const {
  return new GetFollowerWithProfileRequest;
}

void GetFollowerWithProfileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (cursor_id_ != &_default_cursor_id_) {
        cursor_id_->clear();
      }
    }
    count_ = 100;
    exclude_icon_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFollowerWithProfileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cursor_id;
        break;
      }
      
      // optional string cursor_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cursor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cursor_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cursor_id().data(), this->cursor_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3 [default = 100];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exclude_icon;
        break;
      }
      
      // optional bool exclude_icon = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exclude_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_icon_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFollowerWithProfileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // optional string cursor_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cursor_id().data(), this->cursor_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cursor_id(), output);
  }
  
  // optional int32 count = 3 [default = 100];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  // optional bool exclude_icon = 4 [default = true];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->exclude_icon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFollowerWithProfileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // optional string cursor_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cursor_id().data(), this->cursor_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cursor_id(), target);
  }
  
  // optional int32 count = 3 [default = 100];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  // optional bool exclude_icon = 4 [default = true];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->exclude_icon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFollowerWithProfileRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string cursor_id = 2;
    if (has_cursor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cursor_id());
    }
    
    // optional int32 count = 3 [default = 100];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional bool exclude_icon = 4 [default = true];
    if (has_exclude_icon()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFollowerWithProfileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFollowerWithProfileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFollowerWithProfileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFollowerWithProfileRequest::MergeFrom(const GetFollowerWithProfileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_cursor_id(from.cursor_id());
    }
    if (from._has_bit(2)) {
      set_count(from.count());
    }
    if (from._has_bit(3)) {
      set_exclude_icon(from.exclude_icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFollowerWithProfileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFollowerWithProfileRequest::CopyFrom(const GetFollowerWithProfileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowerWithProfileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetFollowerWithProfileRequest::Swap(GetFollowerWithProfileRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(cursor_id_, other->cursor_id_);
    std::swap(count_, other->count_);
    std::swap(exclude_icon_, other->exclude_icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFollowerWithProfileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFollowerWithProfileRequest_descriptor_;
  metadata.reflection = GetFollowerWithProfileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFollowerWithProfileResponse::kResultFieldNumber;
const int GetFollowerWithProfileResponse::kFollowerListFieldNumber;
const int GetFollowerWithProfileResponse::kEolFieldNumber;
#endif  // !_MSC_VER

GetFollowerWithProfileResponse::GetFollowerWithProfileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFollowerWithProfileResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetFollowerWithProfileResponse::GetFollowerWithProfileResponse(const GetFollowerWithProfileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFollowerWithProfileResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  eol_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFollowerWithProfileResponse::~GetFollowerWithProfileResponse() {
  SharedDtor();
}

void GetFollowerWithProfileResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetFollowerWithProfileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFollowerWithProfileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFollowerWithProfileResponse_descriptor_;
}

const GetFollowerWithProfileResponse& GetFollowerWithProfileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetFollowerWithProfileResponse* GetFollowerWithProfileResponse::default_instance_ = NULL;

GetFollowerWithProfileResponse* GetFollowerWithProfileResponse::New() const {
  return new GetFollowerWithProfileResponse;
}

void GetFollowerWithProfileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
    eol_ = false;
  }
  follower_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFollowerWithProfileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_follower_list;
        break;
      }
      
      // repeated .SSDataDomain.SSProfile follower_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_follower_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_follower_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_follower_list;
        if (input->ExpectTag(24)) goto parse_eol;
        break;
      }
      
      // optional bool eol = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eol_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFollowerWithProfileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated .SSDataDomain.SSProfile follower_list = 2;
  for (int i = 0; i < this->follower_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->follower_list(i), output);
  }
  
  // optional bool eol = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->eol(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFollowerWithProfileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated .SSDataDomain.SSProfile follower_list = 2;
  for (int i = 0; i < this->follower_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->follower_list(i), target);
  }
  
  // optional bool eol = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->eol(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFollowerWithProfileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
    // optional bool eol = 3 [default = false];
    if (has_eol()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .SSDataDomain.SSProfile follower_list = 2;
  total_size += 1 * this->follower_list_size();
  for (int i = 0; i < this->follower_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->follower_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFollowerWithProfileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFollowerWithProfileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFollowerWithProfileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFollowerWithProfileResponse::MergeFrom(const GetFollowerWithProfileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  follower_list_.MergeFrom(from.follower_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
    if (from._has_bit(2)) {
      set_eol(from.eol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFollowerWithProfileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFollowerWithProfileResponse::CopyFrom(const GetFollowerWithProfileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowerWithProfileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < follower_list_size(); i++) {
    if (!this->follower_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetFollowerWithProfileResponse::Swap(GetFollowerWithProfileResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    follower_list_.Swap(&other->follower_list_);
    std::swap(eol_, other->eol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFollowerWithProfileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFollowerWithProfileResponse_descriptor_;
  metadata.reflection = GetFollowerWithProfileResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetFollowingWithProfileRequest::_default_userid_;
#ifndef _MSC_VER
const int GetFollowingWithProfileRequest::kUseridFieldNumber;
const int GetFollowingWithProfileRequest::kExcludeIconFieldNumber;
#endif  // !_MSC_VER

GetFollowingWithProfileRequest::GetFollowingWithProfileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFollowingWithProfileRequest::InitAsDefaultInstance() {
}

GetFollowingWithProfileRequest::GetFollowingWithProfileRequest(const GetFollowingWithProfileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFollowingWithProfileRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  exclude_icon_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFollowingWithProfileRequest::~GetFollowingWithProfileRequest() {
  SharedDtor();
}

void GetFollowingWithProfileRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetFollowingWithProfileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFollowingWithProfileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFollowingWithProfileRequest_descriptor_;
}

const GetFollowingWithProfileRequest& GetFollowingWithProfileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetFollowingWithProfileRequest* GetFollowingWithProfileRequest::default_instance_ = NULL;

GetFollowingWithProfileRequest* GetFollowingWithProfileRequest::New() const {
  return new GetFollowingWithProfileRequest;
}

void GetFollowingWithProfileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
    exclude_icon_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFollowingWithProfileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exclude_icon;
        break;
      }
      
      // optional bool exclude_icon = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exclude_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_icon_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFollowingWithProfileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // optional bool exclude_icon = 2 [default = true];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->exclude_icon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFollowingWithProfileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // optional bool exclude_icon = 2 [default = true];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->exclude_icon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFollowingWithProfileRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional bool exclude_icon = 2 [default = true];
    if (has_exclude_icon()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFollowingWithProfileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFollowingWithProfileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFollowingWithProfileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFollowingWithProfileRequest::MergeFrom(const GetFollowingWithProfileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
    if (from._has_bit(1)) {
      set_exclude_icon(from.exclude_icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFollowingWithProfileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFollowingWithProfileRequest::CopyFrom(const GetFollowingWithProfileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowingWithProfileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetFollowingWithProfileRequest::Swap(GetFollowingWithProfileRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(exclude_icon_, other->exclude_icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFollowingWithProfileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFollowingWithProfileRequest_descriptor_;
  metadata.reflection = GetFollowingWithProfileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFollowingWithProfileResponse::kResultFieldNumber;
const int GetFollowingWithProfileResponse::kFollowingListFieldNumber;
#endif  // !_MSC_VER

GetFollowingWithProfileResponse::GetFollowingWithProfileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFollowingWithProfileResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetFollowingWithProfileResponse::GetFollowingWithProfileResponse(const GetFollowingWithProfileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFollowingWithProfileResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFollowingWithProfileResponse::~GetFollowingWithProfileResponse() {
  SharedDtor();
}

void GetFollowingWithProfileResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetFollowingWithProfileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFollowingWithProfileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFollowingWithProfileResponse_descriptor_;
}

const GetFollowingWithProfileResponse& GetFollowingWithProfileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetFollowingWithProfileResponse* GetFollowingWithProfileResponse::default_instance_ = NULL;

GetFollowingWithProfileResponse* GetFollowingWithProfileResponse::New() const {
  return new GetFollowingWithProfileResponse;
}

void GetFollowingWithProfileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  following_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFollowingWithProfileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_following_list;
        break;
      }
      
      // repeated .SSDataDomain.SSProfile following_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_following_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_following_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_following_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFollowingWithProfileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated .SSDataDomain.SSProfile following_list = 2;
  for (int i = 0; i < this->following_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->following_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFollowingWithProfileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated .SSDataDomain.SSProfile following_list = 2;
  for (int i = 0; i < this->following_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->following_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFollowingWithProfileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  // repeated .SSDataDomain.SSProfile following_list = 2;
  total_size += 1 * this->following_list_size();
  for (int i = 0; i < this->following_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->following_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFollowingWithProfileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFollowingWithProfileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFollowingWithProfileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFollowingWithProfileResponse::MergeFrom(const GetFollowingWithProfileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  following_list_.MergeFrom(from.following_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFollowingWithProfileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFollowingWithProfileResponse::CopyFrom(const GetFollowingWithProfileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowingWithProfileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < following_list_size(); i++) {
    if (!this->following_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetFollowingWithProfileResponse::Swap(GetFollowingWithProfileResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    following_list_.Swap(&other->following_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFollowingWithProfileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFollowingWithProfileResponse_descriptor_;
  metadata.reflection = GetFollowingWithProfileResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetContactExRequest::_default_userid_;
#ifndef _MSC_VER
const int GetContactExRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

GetContactExRequest::GetContactExRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetContactExRequest::InitAsDefaultInstance() {
}

GetContactExRequest::GetContactExRequest(const GetContactExRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetContactExRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&_default_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetContactExRequest::~GetContactExRequest() {
  SharedDtor();
}

void GetContactExRequest::SharedDtor() {
  if (userid_ != &_default_userid_) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetContactExRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetContactExRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetContactExRequest_descriptor_;
}

const GetContactExRequest& GetContactExRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetContactExRequest* GetContactExRequest::default_instance_ = NULL;

GetContactExRequest* GetContactExRequest::New() const {
  return new GetContactExRequest;
}

void GetContactExRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (userid_ != &_default_userid_) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetContactExRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetContactExRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetContactExRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetContactExRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetContactExRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetContactExRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetContactExRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetContactExRequest::MergeFrom(const GetContactExRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetContactExRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContactExRequest::CopyFrom(const GetContactExRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContactExRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetContactExRequest::Swap(GetContactExRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetContactExRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetContactExRequest_descriptor_;
  metadata.reflection = GetContactExRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetContactExResponse::kResultFieldNumber;
const int GetContactExResponse::kContactExListFieldNumber;
#endif  // !_MSC_VER

GetContactExResponse::GetContactExResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetContactExResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::SSDataDomain::ServiceResult*>(&::SSDataDomain::ServiceResult::default_instance());
}

GetContactExResponse::GetContactExResponse(const GetContactExResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetContactExResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetContactExResponse::~GetContactExResponse() {
  SharedDtor();
}

void GetContactExResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetContactExResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetContactExResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetContactExResponse_descriptor_;
}

const GetContactExResponse& GetContactExResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssdatadomain_2eproto();  return *default_instance_;
}

GetContactExResponse* GetContactExResponse::default_instance_ = NULL;

GetContactExResponse* GetContactExResponse::New() const {
  return new GetContactExResponse;
}

void GetContactExResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
    }
  }
  contact_ex_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetContactExResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSDataDomain.ServiceResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contact_ex_list;
        break;
      }
      
      // repeated .SSDataDomain.SSContactEx contact_ex_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact_ex_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact_ex_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contact_ex_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetContactExResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // repeated .SSDataDomain.SSContactEx contact_ex_list = 2;
  for (int i = 0; i < this->contact_ex_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contact_ex_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetContactExResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSDataDomain.ServiceResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // repeated .SSDataDomain.SSContactEx contact_ex_list = 2;
  for (int i = 0; i < this->contact_ex_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contact_ex_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetContactExResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSDataDomain.ServiceResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  // repeated .SSDataDomain.SSContactEx contact_ex_list = 2;
  total_size += 1 * this->contact_ex_list_size();
  for (int i = 0; i < this->contact_ex_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact_ex_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetContactExResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetContactExResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetContactExResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetContactExResponse::MergeFrom(const GetContactExResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_ex_list_.MergeFrom(from.contact_ex_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_result()->::SSDataDomain::ServiceResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetContactExResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContactExResponse::CopyFrom(const GetContactExResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContactExResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < contact_ex_list_size(); i++) {
    if (!this->contact_ex_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetContactExResponse::Swap(GetContactExResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    contact_ex_list_.Swap(&other->contact_ex_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetContactExResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetContactExResponse_descriptor_;
  metadata.reflection = GetContactExResponse_reflection_;
  return metadata;
}


// ===================================================================

SSDataDomainSvc::~SSDataDomainSvc() {}

const ::google::protobuf::ServiceDescriptor* SSDataDomainSvc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSDataDomainSvc_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* SSDataDomainSvc::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSDataDomainSvc_descriptor_;
}

void SSDataDomainSvc::CreateAccount(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::CreateAccountRequest*,
                         ::SSDataDomain::CreateAccountResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateAccount() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetAccount(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetAccountRequest*,
                         ::SSDataDomain::GetAccountResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAccount() not implemented.");
  done->Run();
}

void SSDataDomainSvc::ChangePassword(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::ChangePasswordRequest*,
                         ::SSDataDomain::ChangePasswordResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ChangePassword() not implemented.");
  done->Run();
}

void SSDataDomainSvc::UserExist(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::UserExistRequest*,
                         ::SSDataDomain::UserExistResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserExist() not implemented.");
  done->Run();
}

void SSDataDomainSvc::SetProfile(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::SetProfileRequest*,
                         ::SSDataDomain::SetProfileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetProfile() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetProfile(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetProfileRequest*,
                         ::SSDataDomain::GetProfileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetProfile() not implemented.");
  done->Run();
}

void SSDataDomainSvc::Follow(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::FollowRequest*,
                         ::SSDataDomain::FollowResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Follow() not implemented.");
  done->Run();
}

void SSDataDomainSvc::CancelFollow(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::CancelFollowRequest*,
                         ::SSDataDomain::CancelFollowResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CancelFollow() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetFollowing(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetFollowingRequest*,
                         ::SSDataDomain::GetFollowingResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFollowing() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetFollowerCount(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetFollowerCountRequest*,
                         ::SSDataDomain::GetFollowerCountResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFollowerCount() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetFollower(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetFollowerRequest*,
                         ::SSDataDomain::GetFollowerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFollower() not implemented.");
  done->Run();
}

void SSDataDomainSvc::Invite(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::InviteRequest*,
                         ::SSDataDomain::InviteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Invite() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetInviting(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetInvitingRequest*,
                         ::SSDataDomain::GetInvitingResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInviting() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetInviter(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetInviterRequest*,
                         ::SSDataDomain::GetInviterResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInviter() not implemented.");
  done->Run();
}

void SSDataDomainSvc::SetSessionInfo(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::SetSessionInfoRequest*,
                         ::SSDataDomain::SetSessionInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetSessionInfo() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetSessionInfo(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetSessionInfoRequest*,
                         ::SSDataDomain::GetSessionInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSessionInfo() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetMessage(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetMessageRequest*,
                         ::SSDataDomain::GetMessageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMessage() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetMessageByTimestamp(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetMessageByTimestampRequest*,
                         ::SSDataDomain::GetMessageByTimestampResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMessageByTimestamp() not implemented.");
  done->Run();
}

void SSDataDomainSvc::SendPublicMessage(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::SendPublicMessageRequest*,
                         ::SSDataDomain::SendPublicMessageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendPublicMessage() not implemented.");
  done->Run();
}

void SSDataDomainSvc::SendMessage(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::SendMessageRequest*,
                         ::SSDataDomain::SendMessageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendMessage() not implemented.");
  done->Run();
}

void SSDataDomainSvc::AddFavoriteMessage(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::AddFavoriteMessageRequest*,
                         ::SSDataDomain::AddFavoriteMessageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddFavoriteMessage() not implemented.");
  done->Run();
}

void SSDataDomainSvc::AddContact(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::AddContactRequest*,
                         ::SSDataDomain::AddContactResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddContact() not implemented.");
  done->Run();
}

void SSDataDomainSvc::RemoveContact(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::RemoveContactRequest*,
                         ::SSDataDomain::RemoveContactResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveContact() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetContact(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetContactRequest*,
                         ::SSDataDomain::GetContactResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetContact() not implemented.");
  done->Run();
}

void SSDataDomainSvc::AddGroup(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::AddGroupRequest*,
                         ::SSDataDomain::AddGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddGroup() not implemented.");
  done->Run();
}

void SSDataDomainSvc::RemoveGroup(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::RemoveGroupRequest*,
                         ::SSDataDomain::RemoveGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveGroup() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetGroup(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetGroupRequest*,
                         ::SSDataDomain::GetGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGroup() not implemented.");
  done->Run();
}

void SSDataDomainSvc::AddMember(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::AddMemberRequest*,
                         ::SSDataDomain::AddMemberResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddMember() not implemented.");
  done->Run();
}

void SSDataDomainSvc::RemoveMember(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::RemoveMemberRequest*,
                         ::SSDataDomain::RemoveMemberResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveMember() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetMember(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetMemberRequest*,
                         ::SSDataDomain::GetMemberResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMember() not implemented.");
  done->Run();
}

void SSDataDomainSvc::QueryAndUpdate(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::QueryAndUpdateRequest*,
                         ::SSDataDomain::QueryAndUpdateResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryAndUpdate() not implemented.");
  done->Run();
}

void SSDataDomainSvc::QueryAndDelete(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::QueryAndDeleteRequest*,
                         ::SSDataDomain::QueryAndDeleteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryAndDelete() not implemented.");
  done->Run();
}

void SSDataDomainSvc::AddLogicNodeSubscribeInfo(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::AddLogicNodeSubscribeInfoRequest*,
                         ::SSDataDomain::AddLogicNodeSubscribeInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddLogicNodeSubscribeInfo() not implemented.");
  done->Run();
}

void SSDataDomainSvc::RemoveLogicNodeSubscribeInfo(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::RemoveLogicNodeSubscribeInfoRequest*,
                         ::SSDataDomain::RemoveLogicNodeSubscribeInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveLogicNodeSubscribeInfo() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetLogicNodeSubscribeInfo(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetLogicNodeSubscribeInfoRequest*,
                         ::SSDataDomain::GetLogicNodeSubscribeInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLogicNodeSubscribeInfo() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetFollowingWithProfile(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetFollowingWithProfileRequest*,
                         ::SSDataDomain::GetFollowingWithProfileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFollowingWithProfile() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetFollowerWithProfile(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetFollowerWithProfileRequest*,
                         ::SSDataDomain::GetFollowerWithProfileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFollowerWithProfile() not implemented.");
  done->Run();
}

void SSDataDomainSvc::GetContactEx(::google::protobuf::RpcController* controller,
                         const ::SSDataDomain::GetContactExRequest*,
                         ::SSDataDomain::GetContactExResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetContactEx() not implemented.");
  done->Run();
}

void SSDataDomainSvc::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), SSDataDomainSvc_descriptor_);
  switch(method->index()) {
    case 0:
      CreateAccount(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::CreateAccountRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::CreateAccountResponse*>(response),
             done);
      break;
    case 1:
      GetAccount(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetAccountRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetAccountResponse*>(response),
             done);
      break;
    case 2:
      ChangePassword(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::ChangePasswordRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::ChangePasswordResponse*>(response),
             done);
      break;
    case 3:
      UserExist(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::UserExistRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::UserExistResponse*>(response),
             done);
      break;
    case 4:
      SetProfile(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::SetProfileRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::SetProfileResponse*>(response),
             done);
      break;
    case 5:
      GetProfile(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetProfileRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetProfileResponse*>(response),
             done);
      break;
    case 6:
      Follow(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::FollowRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::FollowResponse*>(response),
             done);
      break;
    case 7:
      CancelFollow(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::CancelFollowRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::CancelFollowResponse*>(response),
             done);
      break;
    case 8:
      GetFollowing(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetFollowingRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetFollowingResponse*>(response),
             done);
      break;
    case 9:
      GetFollowerCount(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetFollowerCountRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetFollowerCountResponse*>(response),
             done);
      break;
    case 10:
      GetFollower(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetFollowerRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetFollowerResponse*>(response),
             done);
      break;
    case 11:
      Invite(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::InviteRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::InviteResponse*>(response),
             done);
      break;
    case 12:
      GetInviting(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetInvitingRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetInvitingResponse*>(response),
             done);
      break;
    case 13:
      GetInviter(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetInviterRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetInviterResponse*>(response),
             done);
      break;
    case 14:
      SetSessionInfo(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::SetSessionInfoRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::SetSessionInfoResponse*>(response),
             done);
      break;
    case 15:
      GetSessionInfo(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetSessionInfoRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetSessionInfoResponse*>(response),
             done);
      break;
    case 16:
      GetMessage(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetMessageRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetMessageResponse*>(response),
             done);
      break;
    case 17:
      GetMessageByTimestamp(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetMessageByTimestampRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetMessageByTimestampResponse*>(response),
             done);
      break;
    case 18:
      SendPublicMessage(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::SendPublicMessageRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::SendPublicMessageResponse*>(response),
             done);
      break;
    case 19:
      SendMessage(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::SendMessageRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::SendMessageResponse*>(response),
             done);
      break;
    case 20:
      AddFavoriteMessage(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::AddFavoriteMessageRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::AddFavoriteMessageResponse*>(response),
             done);
      break;
    case 21:
      AddContact(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::AddContactRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::AddContactResponse*>(response),
             done);
      break;
    case 22:
      RemoveContact(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::RemoveContactRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::RemoveContactResponse*>(response),
             done);
      break;
    case 23:
      GetContact(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetContactRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetContactResponse*>(response),
             done);
      break;
    case 24:
      AddGroup(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::AddGroupRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::AddGroupResponse*>(response),
             done);
      break;
    case 25:
      RemoveGroup(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::RemoveGroupRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::RemoveGroupResponse*>(response),
             done);
      break;
    case 26:
      GetGroup(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetGroupRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetGroupResponse*>(response),
             done);
      break;
    case 27:
      AddMember(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::AddMemberRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::AddMemberResponse*>(response),
             done);
      break;
    case 28:
      RemoveMember(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::RemoveMemberRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::RemoveMemberResponse*>(response),
             done);
      break;
    case 29:
      GetMember(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetMemberRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetMemberResponse*>(response),
             done);
      break;
    case 30:
      QueryAndUpdate(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::QueryAndUpdateRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::QueryAndUpdateResponse*>(response),
             done);
      break;
    case 31:
      QueryAndDelete(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::QueryAndDeleteRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::QueryAndDeleteResponse*>(response),
             done);
      break;
    case 32:
      AddLogicNodeSubscribeInfo(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::AddLogicNodeSubscribeInfoRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::AddLogicNodeSubscribeInfoResponse*>(response),
             done);
      break;
    case 33:
      RemoveLogicNodeSubscribeInfo(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::RemoveLogicNodeSubscribeInfoRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::RemoveLogicNodeSubscribeInfoResponse*>(response),
             done);
      break;
    case 34:
      GetLogicNodeSubscribeInfo(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetLogicNodeSubscribeInfoRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetLogicNodeSubscribeInfoResponse*>(response),
             done);
      break;
    case 35:
      GetFollowingWithProfile(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetFollowingWithProfileRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetFollowingWithProfileResponse*>(response),
             done);
      break;
    case 36:
      GetFollowerWithProfile(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetFollowerWithProfileRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetFollowerWithProfileResponse*>(response),
             done);
      break;
    case 37:
      GetContactEx(controller,
             ::google::protobuf::down_cast<const ::SSDataDomain::GetContactExRequest*>(request),
             ::google::protobuf::down_cast< ::SSDataDomain::GetContactExResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SSDataDomainSvc::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SSDataDomain::CreateAccountRequest::default_instance();
    case 1:
      return ::SSDataDomain::GetAccountRequest::default_instance();
    case 2:
      return ::SSDataDomain::ChangePasswordRequest::default_instance();
    case 3:
      return ::SSDataDomain::UserExistRequest::default_instance();
    case 4:
      return ::SSDataDomain::SetProfileRequest::default_instance();
    case 5:
      return ::SSDataDomain::GetProfileRequest::default_instance();
    case 6:
      return ::SSDataDomain::FollowRequest::default_instance();
    case 7:
      return ::SSDataDomain::CancelFollowRequest::default_instance();
    case 8:
      return ::SSDataDomain::GetFollowingRequest::default_instance();
    case 9:
      return ::SSDataDomain::GetFollowerCountRequest::default_instance();
    case 10:
      return ::SSDataDomain::GetFollowerRequest::default_instance();
    case 11:
      return ::SSDataDomain::InviteRequest::default_instance();
    case 12:
      return ::SSDataDomain::GetInvitingRequest::default_instance();
    case 13:
      return ::SSDataDomain::GetInviterRequest::default_instance();
    case 14:
      return ::SSDataDomain::SetSessionInfoRequest::default_instance();
    case 15:
      return ::SSDataDomain::GetSessionInfoRequest::default_instance();
    case 16:
      return ::SSDataDomain::GetMessageRequest::default_instance();
    case 17:
      return ::SSDataDomain::GetMessageByTimestampRequest::default_instance();
    case 18:
      return ::SSDataDomain::SendPublicMessageRequest::default_instance();
    case 19:
      return ::SSDataDomain::SendMessageRequest::default_instance();
    case 20:
      return ::SSDataDomain::AddFavoriteMessageRequest::default_instance();
    case 21:
      return ::SSDataDomain::AddContactRequest::default_instance();
    case 22:
      return ::SSDataDomain::RemoveContactRequest::default_instance();
    case 23:
      return ::SSDataDomain::GetContactRequest::default_instance();
    case 24:
      return ::SSDataDomain::AddGroupRequest::default_instance();
    case 25:
      return ::SSDataDomain::RemoveGroupRequest::default_instance();
    case 26:
      return ::SSDataDomain::GetGroupRequest::default_instance();
    case 27:
      return ::SSDataDomain::AddMemberRequest::default_instance();
    case 28:
      return ::SSDataDomain::RemoveMemberRequest::default_instance();
    case 29:
      return ::SSDataDomain::GetMemberRequest::default_instance();
    case 30:
      return ::SSDataDomain::QueryAndUpdateRequest::default_instance();
    case 31:
      return ::SSDataDomain::QueryAndDeleteRequest::default_instance();
    case 32:
      return ::SSDataDomain::AddLogicNodeSubscribeInfoRequest::default_instance();
    case 33:
      return ::SSDataDomain::RemoveLogicNodeSubscribeInfoRequest::default_instance();
    case 34:
      return ::SSDataDomain::GetLogicNodeSubscribeInfoRequest::default_instance();
    case 35:
      return ::SSDataDomain::GetFollowingWithProfileRequest::default_instance();
    case 36:
      return ::SSDataDomain::GetFollowerWithProfileRequest::default_instance();
    case 37:
      return ::SSDataDomain::GetContactExRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& SSDataDomainSvc::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SSDataDomain::CreateAccountResponse::default_instance();
    case 1:
      return ::SSDataDomain::GetAccountResponse::default_instance();
    case 2:
      return ::SSDataDomain::ChangePasswordResponse::default_instance();
    case 3:
      return ::SSDataDomain::UserExistResponse::default_instance();
    case 4:
      return ::SSDataDomain::SetProfileResponse::default_instance();
    case 5:
      return ::SSDataDomain::GetProfileResponse::default_instance();
    case 6:
      return ::SSDataDomain::FollowResponse::default_instance();
    case 7:
      return ::SSDataDomain::CancelFollowResponse::default_instance();
    case 8:
      return ::SSDataDomain::GetFollowingResponse::default_instance();
    case 9:
      return ::SSDataDomain::GetFollowerCountResponse::default_instance();
    case 10:
      return ::SSDataDomain::GetFollowerResponse::default_instance();
    case 11:
      return ::SSDataDomain::InviteResponse::default_instance();
    case 12:
      return ::SSDataDomain::GetInvitingResponse::default_instance();
    case 13:
      return ::SSDataDomain::GetInviterResponse::default_instance();
    case 14:
      return ::SSDataDomain::SetSessionInfoResponse::default_instance();
    case 15:
      return ::SSDataDomain::GetSessionInfoResponse::default_instance();
    case 16:
      return ::SSDataDomain::GetMessageResponse::default_instance();
    case 17:
      return ::SSDataDomain::GetMessageByTimestampResponse::default_instance();
    case 18:
      return ::SSDataDomain::SendPublicMessageResponse::default_instance();
    case 19:
      return ::SSDataDomain::SendMessageResponse::default_instance();
    case 20:
      return ::SSDataDomain::AddFavoriteMessageResponse::default_instance();
    case 21:
      return ::SSDataDomain::AddContactResponse::default_instance();
    case 22:
      return ::SSDataDomain::RemoveContactResponse::default_instance();
    case 23:
      return ::SSDataDomain::GetContactResponse::default_instance();
    case 24:
      return ::SSDataDomain::AddGroupResponse::default_instance();
    case 25:
      return ::SSDataDomain::RemoveGroupResponse::default_instance();
    case 26:
      return ::SSDataDomain::GetGroupResponse::default_instance();
    case 27:
      return ::SSDataDomain::AddMemberResponse::default_instance();
    case 28:
      return ::SSDataDomain::RemoveMemberResponse::default_instance();
    case 29:
      return ::SSDataDomain::GetMemberResponse::default_instance();
    case 30:
      return ::SSDataDomain::QueryAndUpdateResponse::default_instance();
    case 31:
      return ::SSDataDomain::QueryAndDeleteResponse::default_instance();
    case 32:
      return ::SSDataDomain::AddLogicNodeSubscribeInfoResponse::default_instance();
    case 33:
      return ::SSDataDomain::RemoveLogicNodeSubscribeInfoResponse::default_instance();
    case 34:
      return ::SSDataDomain::GetLogicNodeSubscribeInfoResponse::default_instance();
    case 35:
      return ::SSDataDomain::GetFollowingWithProfileResponse::default_instance();
    case 36:
      return ::SSDataDomain::GetFollowerWithProfileResponse::default_instance();
    case 37:
      return ::SSDataDomain::GetContactExResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

SSDataDomainSvc_Stub::SSDataDomainSvc_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SSDataDomainSvc_Stub::SSDataDomainSvc_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SSDataDomainSvc_Stub::~SSDataDomainSvc_Stub() {
  if (owns_channel_) delete channel_;
}

void SSDataDomainSvc_Stub::CreateAccount(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::CreateAccountRequest* request,
                              ::SSDataDomain::CreateAccountResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetAccount(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetAccountRequest* request,
                              ::SSDataDomain::GetAccountResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::ChangePassword(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::ChangePasswordRequest* request,
                              ::SSDataDomain::ChangePasswordResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::UserExist(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::UserExistRequest* request,
                              ::SSDataDomain::UserExistResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::SetProfile(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::SetProfileRequest* request,
                              ::SSDataDomain::SetProfileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetProfile(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetProfileRequest* request,
                              ::SSDataDomain::GetProfileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::Follow(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::FollowRequest* request,
                              ::SSDataDomain::FollowResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::CancelFollow(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::CancelFollowRequest* request,
                              ::SSDataDomain::CancelFollowResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetFollowing(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetFollowingRequest* request,
                              ::SSDataDomain::GetFollowingResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetFollowerCount(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetFollowerCountRequest* request,
                              ::SSDataDomain::GetFollowerCountResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetFollower(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetFollowerRequest* request,
                              ::SSDataDomain::GetFollowerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::Invite(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::InviteRequest* request,
                              ::SSDataDomain::InviteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetInviting(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetInvitingRequest* request,
                              ::SSDataDomain::GetInvitingResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetInviter(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetInviterRequest* request,
                              ::SSDataDomain::GetInviterResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::SetSessionInfo(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::SetSessionInfoRequest* request,
                              ::SSDataDomain::SetSessionInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetSessionInfo(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetSessionInfoRequest* request,
                              ::SSDataDomain::GetSessionInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetMessage(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetMessageRequest* request,
                              ::SSDataDomain::GetMessageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetMessageByTimestamp(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetMessageByTimestampRequest* request,
                              ::SSDataDomain::GetMessageByTimestampResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::SendPublicMessage(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::SendPublicMessageRequest* request,
                              ::SSDataDomain::SendPublicMessageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::SendMessage(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::SendMessageRequest* request,
                              ::SSDataDomain::SendMessageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::AddFavoriteMessage(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::AddFavoriteMessageRequest* request,
                              ::SSDataDomain::AddFavoriteMessageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::AddContact(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::AddContactRequest* request,
                              ::SSDataDomain::AddContactResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::RemoveContact(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::RemoveContactRequest* request,
                              ::SSDataDomain::RemoveContactResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(22),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetContact(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetContactRequest* request,
                              ::SSDataDomain::GetContactResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(23),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::AddGroup(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::AddGroupRequest* request,
                              ::SSDataDomain::AddGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(24),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::RemoveGroup(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::RemoveGroupRequest* request,
                              ::SSDataDomain::RemoveGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(25),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetGroup(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetGroupRequest* request,
                              ::SSDataDomain::GetGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(26),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::AddMember(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::AddMemberRequest* request,
                              ::SSDataDomain::AddMemberResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(27),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::RemoveMember(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::RemoveMemberRequest* request,
                              ::SSDataDomain::RemoveMemberResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(28),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetMember(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetMemberRequest* request,
                              ::SSDataDomain::GetMemberResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(29),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::QueryAndUpdate(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::QueryAndUpdateRequest* request,
                              ::SSDataDomain::QueryAndUpdateResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(30),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::QueryAndDelete(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::QueryAndDeleteRequest* request,
                              ::SSDataDomain::QueryAndDeleteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(31),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::AddLogicNodeSubscribeInfo(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::AddLogicNodeSubscribeInfoRequest* request,
                              ::SSDataDomain::AddLogicNodeSubscribeInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(32),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::RemoveLogicNodeSubscribeInfo(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::RemoveLogicNodeSubscribeInfoRequest* request,
                              ::SSDataDomain::RemoveLogicNodeSubscribeInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(33),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetLogicNodeSubscribeInfo(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetLogicNodeSubscribeInfoRequest* request,
                              ::SSDataDomain::GetLogicNodeSubscribeInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(34),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetFollowingWithProfile(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetFollowingWithProfileRequest* request,
                              ::SSDataDomain::GetFollowingWithProfileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(35),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetFollowerWithProfile(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetFollowerWithProfileRequest* request,
                              ::SSDataDomain::GetFollowerWithProfileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(36),
                       controller, request, response, done);
}
void SSDataDomainSvc_Stub::GetContactEx(::google::protobuf::RpcController* controller,
                              const ::SSDataDomain::GetContactExRequest* request,
                              ::SSDataDomain::GetContactExResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(37),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace SSDataDomain

// @@protoc_insertion_point(global_scope)
