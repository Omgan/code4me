// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssdatadomain.proto

#ifndef PROTOBUF_ssdatadomain_2eproto_API__INCLUDED
#define PROTOBUF_ssdatadomain_2eproto_API__INCLUDED

#ifndef DLLAPI
    #define DLLAPI __declspec(dllimport)
#else
    #define DLLAPI __declspec(dllexport)
#endif


namespace SSDataDomainClient {

// ===================================================================
// 初始化/释放函数
// ===================================================================
DLLAPI void Initialize();
DLLAPI void Uninitialize();

// ===================================================================
// 基本类型定义
// ===================================================================
typedef int int32;
typedef unsigned int uint32;
typedef __int64 int64;
typedef unsigned __int64 uint64;

// ===================================================================
// 类的声明
// ===================================================================
class SSAccount;
class SSProfile;
class SSContact;
class SSContactEx;
class SSGroup;
class SSMember;
class SSClientState;
class SSMessageState;
class SSSessionInfo;
class SSMessage;
class ServiceResult;
class CreateAccountRequest;
class CreateAccountResponse;
class GetAccountRequest;
class GetAccountResponse;
class ChangePasswordRequest;
class ChangePasswordResponse;
class UserExistRequest;
class UserExistResponse;
class SetProfileRequest;
class SetProfileResponse;
class GetProfileRequest;
class GetProfileResponse;
class FollowRequest;
class FollowResponse;
class CancelFollowRequest;
class CancelFollowResponse;
class GetFollowingRequest;
class GetFollowingResponse;
class GetFollowerCountRequest;
class GetFollowerCountResponse;
class GetFollowingCountRequest;
class GetFollowingCountResponse;
class GetFollowerRequest;
class GetFollowerResponse;
class InviteRequest;
class InviteResponse;
class GetInvitingRequest;
class GetInvitingResponse;
class GetInviterRequest;
class GetInviterResponse;
class SetSessionInfoRequest;
class SetSessionInfoResponse;
class GetSessionInfoRequest;
class GetSessionInfoResponse;
class GetMessageRequest;
class GetMessageResponse;
class GetMessageByTimestampRequest;
class GetMessageByTimestampResponse;
class SendPublicMessageRequest;
class SendPublicMessageResponse;
class SendMessageRequest;
class SendMessageResponse;
class AddFavoriteMessageRequest;
class AddFavoriteMessageResponse;
class AddContactRequest;
class AddContactResponse;
class RemoveContactRequest;
class RemoveContactResponse;
class GetContactRequest;
class GetContactResponse;
class AddGroupRequest;
class AddGroupResponse;
class RemoveGroupRequest;
class RemoveGroupResponse;
class GetGroupRequest;
class GetGroupResponse;
class AddMemberRequest;
class AddMemberResponse;
class RemoveMemberRequest;
class RemoveMemberResponse;
class GetMemberRequest;
class GetMemberResponse;
class QueryAndUpdateRequest;
class QueryAndUpdateResponse;
class QueryAndDeleteRequest;
class QueryAndDeleteResponse;
class AddLogicNodeSubscribeInfoRequest;
class AddLogicNodeSubscribeInfoResponse;
class RemoveLogicNodeSubscribeInfoRequest;
class RemoveLogicNodeSubscribeInfoResponse;
class GetLogicNodeSubscribeInfoRequest;
class GetLogicNodeSubscribeInfoResponse;
class SetSecurityCodeRequest;
class SetSecurityCodeResponse;
class GetSecurityCodeRequest;
class GetSecurityCodeResponse;
class GetFollowerWithProfileRequest;
class GetFollowerWithProfileResponse;
class GetFollowingWithProfileRequest;
class GetFollowingWithProfileResponse;
class GetInviterWithProfileRequest;
class GetInviterWithProfileResponse;
class GetInvitingWithProfileRequest;
class GetInvitingWithProfileResponse;
class GetContactExRequest;
class GetContactExResponse;

// ===================================================================
// 枚举定义
// ===================================================================
enum SSGender {
  GENDER_UNKNOWN = 0,
  GENDER_MALE = 1,
  GENDER_FEMAIL = 2
};
DLLAPI bool SSGender_IsValid(int value);
const SSGender SSGender_MIN = GENDER_UNKNOWN;
const SSGender SSGender_MAX = GENDER_FEMAIL;
const int SSGender_ARRAYSIZE = SSGender_MAX + 1;


// -------------------------------------------------------------------
enum SSBOX {
  PUBBOX = 0,
  OUTBOX = 1,
  INBOX = 2,
  FAVBOX = 3
};
DLLAPI bool SSBOX_IsValid(int value);
const SSBOX SSBOX_MIN = PUBBOX;
const SSBOX SSBOX_MAX = FAVBOX;
const int SSBOX_ARRAYSIZE = SSBOX_MAX + 1;


// -------------------------------------------------------------------
enum SSContentType {
  CONTENT_TYPE_NORMAL = 0,
  CONTENT_TYPE_COMMAND = 100,
  MAX_CONTENT_TYPE = 65535
};
DLLAPI bool SSContentType_IsValid(int value);
const SSContentType SSContentType_MIN = CONTENT_TYPE_NORMAL;
const SSContentType SSContentType_MAX = MAX_CONTENT_TYPE;
const int SSContentType_ARRAYSIZE = SSContentType_MAX + 1;


// -------------------------------------------------------------------
enum ServiceCode {
  SC_OK = 0,
  SC_NO_SUCH_OBJECT = 1,
  SC_METHOD_NOT_IMPLEMENT = 2,
  SC_INTERNAL_ERROR = 3
};
DLLAPI bool ServiceCode_IsValid(int value);
const ServiceCode ServiceCode_MIN = SC_OK;
const ServiceCode ServiceCode_MAX = SC_INTERNAL_ERROR;
const int ServiceCode_ARRAYSIZE = ServiceCode_MAX + 1;



// ===================================================================
// 消息类定义
// ===================================================================
class DLLAPI  SSAccount {
  public:
  SSAccount();
  ~SSAccount();
  
  private:
  SSAccount(const SSAccount& from);
  SSAccount& operator=(const SSAccount& from);
  
  public:
  static SSAccount* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // required string password = 2;
  virtual bool has_password() const = 0;
  virtual void clear_password() = 0;
  virtual void set_password(const char* value) = 0;
  virtual const char* get_password() const = 0;
  
  // required string email = 3;
  virtual bool has_email() const = 0;
  virtual void clear_email() = 0;
  virtual void set_email(const char* value) = 0;
  virtual const char* get_email() const = 0;
  
  // optional bytes binary = 100;
  virtual bool has_binary() const = 0;
  virtual void clear_binary() = 0;
  virtual const void* get_binary(size_t* p_size) const = 0;
  virtual void set_binary(const void* value, size_t size) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SSProfile {
  public:
  SSProfile();
  ~SSProfile();
  
  private:
  SSProfile(const SSProfile& from);
  SSProfile& operator=(const SSProfile& from);
  
  public:
  static SSProfile* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // optional string nickname = 2;
  virtual bool has_nickname() const = 0;
  virtual void clear_nickname() = 0;
  virtual void set_nickname(const char* value) = 0;
  virtual const char* get_nickname() const = 0;
  
  // optional int32 age = 3;
  virtual bool has_age() const = 0;
  virtual void clear_age() = 0;
  virtual int32 get_age() const = 0;
  virtual void set_age(int32 value) = 0;
  
  // optional .SSDataDomain.SSGender gender = 4;
  virtual bool has_gender() const = 0;
  virtual void clear_gender() = 0;
  virtual SSGender get_gender() const = 0;
  virtual void set_gender(SSGender value) = 0;
  
  // optional bytes icon = 5;
  virtual bool has_icon() const = 0;
  virtual void clear_icon() = 0;
  virtual const void* get_icon(size_t* p_size) const = 0;
  virtual void set_icon(const void* value, size_t size) = 0;
  
  // optional string icon_name = 6 [default = "default.jpg"];
  virtual bool has_icon_name() const = 0;
  virtual void clear_icon_name() = 0;
  virtual void set_icon_name(const char* value) = 0;
  virtual const char* get_icon_name() const = 0;
  
  // optional string introduction = 9;
  virtual bool has_introduction() const = 0;
  virtual void clear_introduction() = 0;
  virtual void set_introduction(const char* value) = 0;
  virtual const char* get_introduction() const = 0;
  
  // optional int32 following_count = 10;
  virtual bool has_following_count() const = 0;
  virtual void clear_following_count() = 0;
  virtual int32 get_following_count() const = 0;
  virtual void set_following_count(int32 value) = 0;
  
  // optional int32 follower_count = 11;
  virtual bool has_follower_count() const = 0;
  virtual void clear_follower_count() = 0;
  virtual int32 get_follower_count() const = 0;
  virtual void set_follower_count(int32 value) = 0;
  
  // optional bytes binary = 100;
  virtual bool has_binary() const = 0;
  virtual void clear_binary() = 0;
  virtual const void* get_binary(size_t* p_size) const = 0;
  virtual void set_binary(const void* value, size_t size) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SSContact {
  public:
  SSContact();
  ~SSContact();
  
  private:
  SSContact(const SSContact& from);
  SSContact& operator=(const SSContact& from);
  
  public:
  static SSContact* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string contactid = 1;
  virtual bool has_contactid() const = 0;
  virtual void clear_contactid() = 0;
  virtual void set_contactid(const char* value) = 0;
  virtual const char* get_contactid() const = 0;
  
  // optional string email = 2;
  virtual bool has_email() const = 0;
  virtual void clear_email() = 0;
  virtual void set_email(const char* value) = 0;
  virtual const char* get_email() const = 0;
  
  // optional string userid = 3;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // optional string alias_nickname = 4;
  virtual bool has_alias_nickname() const = 0;
  virtual void clear_alias_nickname() = 0;
  virtual void set_alias_nickname(const char* value) = 0;
  virtual const char* get_alias_nickname() const = 0;
  
  // optional bytes binary = 100;
  virtual bool has_binary() const = 0;
  virtual void clear_binary() = 0;
  virtual const void* get_binary(size_t* p_size) const = 0;
  virtual void set_binary(const void* value, size_t size) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SSContactEx {
  public:
  SSContactEx();
  ~SSContactEx();
  
  private:
  SSContactEx(const SSContactEx& from);
  SSContactEx& operator=(const SSContactEx& from);
  
  public:
  static SSContactEx* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string contactid = 1;
  virtual bool has_contactid() const = 0;
  virtual void clear_contactid() = 0;
  virtual void set_contactid(const char* value) = 0;
  virtual const char* get_contactid() const = 0;
  
  // optional int32 is_member = 2;
  virtual bool has_is_member() const = 0;
  virtual void clear_is_member() = 0;
  virtual int32 get_is_member() const = 0;
  virtual void set_is_member(int32 value) = 0;
  
  // optional int32 is_following = 3;
  virtual bool has_is_following() const = 0;
  virtual void clear_is_following() = 0;
  virtual int32 get_is_following() const = 0;
  virtual void set_is_following(int32 value) = 0;
  
  // optional int32 is_follower = 8;
  virtual bool has_is_follower() const = 0;
  virtual void clear_is_follower() = 0;
  virtual int32 get_is_follower() const = 0;
  virtual void set_is_follower(int32 value) = 0;
  
  // optional int32 is_inviting = 13;
  virtual bool has_is_inviting() const = 0;
  virtual void clear_is_inviting() = 0;
  virtual int32 get_is_inviting() const = 0;
  virtual void set_is_inviting(int32 value) = 0;
  
  // optional string email = 4;
  virtual bool has_email() const = 0;
  virtual void clear_email() = 0;
  virtual void set_email(const char* value) = 0;
  virtual const char* get_email() const = 0;
  
  // optional string userid = 5;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // optional string alias_nickname = 6;
  virtual bool has_alias_nickname() const = 0;
  virtual void clear_alias_nickname() = 0;
  virtual void set_alias_nickname(const char* value) = 0;
  virtual const char* get_alias_nickname() const = 0;
  
  // optional string nickname = 7;
  virtual bool has_nickname() const = 0;
  virtual void clear_nickname() = 0;
  virtual void set_nickname(const char* value) = 0;
  virtual const char* get_nickname() const = 0;
  
  // optional .SSDataDomain.SSGender gender = 9;
  virtual bool has_gender() const = 0;
  virtual void clear_gender() = 0;
  virtual SSGender get_gender() const = 0;
  virtual void set_gender(SSGender value) = 0;
  
  // optional int32 age = 10;
  virtual bool has_age() const = 0;
  virtual void clear_age() = 0;
  virtual int32 get_age() const = 0;
  virtual void set_age(int32 value) = 0;
  
  // optional string icon_name = 11;
  virtual bool has_icon_name() const = 0;
  virtual void clear_icon_name() = 0;
  virtual void set_icon_name(const char* value) = 0;
  virtual const char* get_icon_name() const = 0;
  
  // optional string introduction = 12;
  virtual bool has_introduction() const = 0;
  virtual void clear_introduction() = 0;
  virtual void set_introduction(const char* value) = 0;
  virtual const char* get_introduction() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SSGroup {
  public:
  SSGroup();
  ~SSGroup();
  
  private:
  SSGroup(const SSGroup& from);
  SSGroup& operator=(const SSGroup& from);
  
  public:
  static SSGroup* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string groupid = 1;
  virtual bool has_groupid() const = 0;
  virtual void clear_groupid() = 0;
  virtual void set_groupid(const char* value) = 0;
  virtual const char* get_groupid() const = 0;
  
  // optional string name = 2;
  virtual bool has_name() const = 0;
  virtual void clear_name() = 0;
  virtual void set_name(const char* value) = 0;
  virtual const char* get_name() const = 0;
  
  // optional int32 system = 3;
  virtual bool has_system() const = 0;
  virtual void clear_system() = 0;
  virtual int32 get_system() const = 0;
  virtual void set_system(int32 value) = 0;
  
  // optional bytes binary = 100;
  virtual bool has_binary() const = 0;
  virtual void clear_binary() = 0;
  virtual const void* get_binary(size_t* p_size) const = 0;
  virtual void set_binary(const void* value, size_t size) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SSMember {
  public:
  SSMember();
  ~SSMember();
  
  private:
  SSMember(const SSMember& from);
  SSMember& operator=(const SSMember& from);
  
  public:
  static SSMember* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string groupid = 1;
  virtual bool has_groupid() const = 0;
  virtual void clear_groupid() = 0;
  virtual void set_groupid(const char* value) = 0;
  virtual const char* get_groupid() const = 0;
  
  // repeated string members = 2;
  virtual int get_members_size() const = 0;
  virtual void clear_members() = 0;
  virtual const char* get_members(int index) const = 0;
  virtual void add_members(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SSClientState {
  public:
  SSClientState();
  ~SSClientState();
  
  private:
  SSClientState(const SSClientState& from);
  SSClientState& operator=(const SSClientState& from);
  
  public:
  static SSClientState* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // optional int64 last_send_time = 1;
  virtual bool has_last_send_time() const = 0;
  virtual void clear_last_send_time() = 0;
  virtual int64 get_last_send_time() const = 0;
  virtual void set_last_send_time(int64 value) = 0;
  
  // optional string last_recieved_message = 2;
  virtual bool has_last_recieved_message() const = 0;
  virtual void clear_last_recieved_message() = 0;
  virtual void set_last_recieved_message(const char* value) = 0;
  virtual const char* get_last_recieved_message() const = 0;
  
  // optional int64 last_fetch_time = 3;
  virtual bool has_last_fetch_time() const = 0;
  virtual void clear_last_fetch_time() = 0;
  virtual int64 get_last_fetch_time() const = 0;
  virtual void set_last_fetch_time(int64 value) = 0;
  
  // optional int32 last_seq_number = 4;
  virtual bool has_last_seq_number() const = 0;
  virtual void clear_last_seq_number() = 0;
  virtual int32 get_last_seq_number() const = 0;
  virtual void set_last_seq_number(int32 value) = 0;
  
  // optional int64 last_logout_time = 5;
  virtual bool has_last_logout_time() const = 0;
  virtual void clear_last_logout_time() = 0;
  virtual int64 get_last_logout_time() const = 0;
  virtual void set_last_logout_time(int64 value) = 0;
  
  // optional string last_client_identifier = 6;
  virtual bool has_last_client_identifier() const = 0;
  virtual void clear_last_client_identifier() = 0;
  virtual void set_last_client_identifier(const char* value) = 0;
  virtual const char* get_last_client_identifier() const = 0;
  
  // optional string sc_last_user_time = 7;
  virtual bool has_sc_last_user_time() const = 0;
  virtual void clear_sc_last_user_time() = 0;
  virtual void set_sc_last_user_time(const char* value) = 0;
  virtual const char* get_sc_last_user_time() const = 0;
  
  // optional string sc_last_group_time = 8;
  virtual bool has_sc_last_group_time() const = 0;
  virtual void clear_sc_last_group_time() = 0;
  virtual void set_sc_last_group_time(const char* value) = 0;
  virtual const char* get_sc_last_group_time() const = 0;
  
  // optional string sc_last_contact_time = 9;
  virtual bool has_sc_last_contact_time() const = 0;
  virtual void clear_sc_last_contact_time() = 0;
  virtual void set_sc_last_contact_time(const char* value) = 0;
  virtual const char* get_sc_last_contact_time() const = 0;
  
  // optional string sc_last_member_time = 10;
  virtual bool has_sc_last_member_time() const = 0;
  virtual void clear_sc_last_member_time() = 0;
  virtual void set_sc_last_member_time(const char* value) = 0;
  virtual const char* get_sc_last_member_time() const = 0;
  
  // optional string sc_last_follow_time = 11;
  virtual bool has_sc_last_follow_time() const = 0;
  virtual void clear_sc_last_follow_time() = 0;
  virtual void set_sc_last_follow_time(const char* value) = 0;
  virtual const char* get_sc_last_follow_time() const = 0;
  
  // optional string sc_last_send_time = 12;
  virtual bool has_sc_last_send_time() const = 0;
  virtual void clear_sc_last_send_time() = 0;
  virtual void set_sc_last_send_time(const char* value) = 0;
  virtual const char* get_sc_last_send_time() const = 0;
  
  // optional string sc_last_recv_time = 13;
  virtual bool has_sc_last_recv_time() const = 0;
  virtual void clear_sc_last_recv_time() = 0;
  virtual void set_sc_last_recv_time(const char* value) = 0;
  virtual const char* get_sc_last_recv_time() const = 0;
  
  // optional string sc_last_favo_time = 14;
  virtual bool has_sc_last_favo_time() const = 0;
  virtual void clear_sc_last_favo_time() = 0;
  virtual void set_sc_last_favo_time(const char* value) = 0;
  virtual const char* get_sc_last_favo_time() const = 0;
  
  // optional bytes binary = 100;
  virtual bool has_binary() const = 0;
  virtual void clear_binary() = 0;
  virtual const void* get_binary(size_t* p_size) const = 0;
  virtual void set_binary(const void* value, size_t size) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SSMessageState {
  public:
  SSMessageState();
  ~SSMessageState();
  
  private:
  SSMessageState(const SSMessageState& from);
  SSMessageState& operator=(const SSMessageState& from);
  
  public:
  static SSMessageState* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // required int32 seq_number = 2;
  virtual bool has_seq_number() const = 0;
  virtual void clear_seq_number() = 0;
  virtual int32 get_seq_number() const = 0;
  virtual void set_seq_number(int32 value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SSSessionInfo {
  public:
  SSSessionInfo();
  ~SSSessionInfo();
  
  private:
  SSSessionInfo(const SSSessionInfo& from);
  SSSessionInfo& operator=(const SSSessionInfo& from);
  
  public:
  static SSSessionInfo* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // optional .SSDataDomain.SSClientState client_state = 2;
  virtual bool has_client_state() const = 0;
  virtual void clear_client_state() = 0;
  virtual const SSClientState* get_client_state() const = 0;
  virtual void set_client_state(SSClientState* value) = 0;
  
  // repeated .SSDataDomain.SSMessageState message_state = 3;
  virtual int get_message_state_size() const = 0;
  virtual void clear_message_state() = 0;
  virtual const SSMessageState* get_message_state(int index) const = 0;
  virtual void add_message_state(SSMessageState* item) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SSMessage {
  public:
  SSMessage();
  ~SSMessage();
  
  private:
  SSMessage(const SSMessage& from);
  SSMessage& operator=(const SSMessage& from);
  
  public:
  static SSMessage* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // optional string msgid = 1;
  virtual bool has_msgid() const = 0;
  virtual void clear_msgid() = 0;
  virtual void set_msgid(const char* value) = 0;
  virtual const char* get_msgid() const = 0;
  
  // optional int32 seq_number = 3;
  virtual bool has_seq_number() const = 0;
  virtual void clear_seq_number() = 0;
  virtual int32 get_seq_number() const = 0;
  virtual void set_seq_number(int32 value) = 0;
  
  // required int64 timestamp = 4;
  virtual bool has_timestamp() const = 0;
  virtual void clear_timestamp() = 0;
  virtual int64 get_timestamp() const = 0;
  virtual void set_timestamp(int64 value) = 0;
  
  // required string sender = 5;
  virtual bool has_sender() const = 0;
  virtual void clear_sender() = 0;
  virtual void set_sender(const char* value) = 0;
  virtual const char* get_sender() const = 0;
  
  // repeated string recievers = 6;
  virtual int get_recievers_size() const = 0;
  virtual void clear_recievers() = 0;
  virtual const char* get_recievers(int index) const = 0;
  virtual void add_recievers(const char* value) = 0;
  
  // optional string root_msgid = 7;
  virtual bool has_root_msgid() const = 0;
  virtual void clear_root_msgid() = 0;
  virtual void set_root_msgid(const char* value) = 0;
  virtual const char* get_root_msgid() const = 0;
  
  // optional string parent_msgid = 8;
  virtual bool has_parent_msgid() const = 0;
  virtual void clear_parent_msgid() = 0;
  virtual void set_parent_msgid(const char* value) = 0;
  virtual const char* get_parent_msgid() const = 0;
  
  // required string subject = 9;
  virtual bool has_subject() const = 0;
  virtual void clear_subject() = 0;
  virtual void set_subject(const char* value) = 0;
  virtual const char* get_subject() const = 0;
  
  // required int32 content_type = 10 [default = 0];
  virtual bool has_content_type() const = 0;
  virtual void clear_content_type() = 0;
  virtual int32 get_content_type() const = 0;
  virtual void set_content_type(int32 value) = 0;
  
  // optional bytes content = 11;
  virtual bool has_content() const = 0;
  virtual void clear_content() = 0;
  virtual const void* get_content(size_t* p_size) const = 0;
  virtual void set_content(const void* value, size_t size) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  ServiceResult {
  public:
  ServiceResult();
  ~ServiceResult();
  
  private:
  ServiceResult(const ServiceResult& from);
  ServiceResult& operator=(const ServiceResult& from);
  
  public:
  static ServiceResult* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceCode code = 1;
  virtual bool has_code() const = 0;
  virtual void clear_code() = 0;
  virtual ServiceCode get_code() const = 0;
  virtual void set_code(ServiceCode value) = 0;
  
  // optional string message = 2;
  virtual bool has_message() const = 0;
  virtual void clear_message() = 0;
  virtual void set_message(const char* value) = 0;
  virtual const char* get_message() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  CreateAccountRequest {
  public:
  CreateAccountRequest();
  ~CreateAccountRequest();
  
  private:
  CreateAccountRequest(const CreateAccountRequest& from);
  CreateAccountRequest& operator=(const CreateAccountRequest& from);
  
  public:
  static CreateAccountRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // required string password = 2;
  virtual bool has_password() const = 0;
  virtual void clear_password() = 0;
  virtual void set_password(const char* value) = 0;
  virtual const char* get_password() const = 0;
  
  // required string email = 3;
  virtual bool has_email() const = 0;
  virtual void clear_email() = 0;
  virtual void set_email(const char* value) = 0;
  virtual const char* get_email() const = 0;
  
  // required string nickname = 4;
  virtual bool has_nickname() const = 0;
  virtual void clear_nickname() = 0;
  virtual void set_nickname(const char* value) = 0;
  virtual const char* get_nickname() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  CreateAccountResponse {
  public:
  CreateAccountResponse();
  ~CreateAccountResponse();
  
  private:
  CreateAccountResponse(const CreateAccountResponse& from);
  CreateAccountResponse& operator=(const CreateAccountResponse& from);
  
  public:
  static CreateAccountResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetAccountRequest {
  public:
  GetAccountRequest();
  ~GetAccountRequest();
  
  private:
  GetAccountRequest(const GetAccountRequest& from);
  GetAccountRequest& operator=(const GetAccountRequest& from);
  
  public:
  static GetAccountRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetAccountResponse {
  public:
  GetAccountResponse();
  ~GetAccountResponse();
  
  private:
  GetAccountResponse(const GetAccountResponse& from);
  GetAccountResponse& operator=(const GetAccountResponse& from);
  
  public:
  static GetAccountResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // optional .SSDataDomain.SSAccount account = 2;
  virtual bool has_account() const = 0;
  virtual void clear_account() = 0;
  virtual const SSAccount* get_account() const = 0;
  virtual void set_account(SSAccount* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  ChangePasswordRequest {
  public:
  ChangePasswordRequest();
  ~ChangePasswordRequest();
  
  private:
  ChangePasswordRequest(const ChangePasswordRequest& from);
  ChangePasswordRequest& operator=(const ChangePasswordRequest& from);
  
  public:
  static ChangePasswordRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // required string new_password = 2;
  virtual bool has_new_password() const = 0;
  virtual void clear_new_password() = 0;
  virtual void set_new_password(const char* value) = 0;
  virtual const char* get_new_password() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  ChangePasswordResponse {
  public:
  ChangePasswordResponse();
  ~ChangePasswordResponse();
  
  private:
  ChangePasswordResponse(const ChangePasswordResponse& from);
  ChangePasswordResponse& operator=(const ChangePasswordResponse& from);
  
  public:
  static ChangePasswordResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  UserExistRequest {
  public:
  UserExistRequest();
  ~UserExistRequest();
  
  private:
  UserExistRequest(const UserExistRequest& from);
  UserExistRequest& operator=(const UserExistRequest& from);
  
  public:
  static UserExistRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // repeated string userid_list = 1;
  virtual int get_userid_list_size() const = 0;
  virtual void clear_userid_list() = 0;
  virtual const char* get_userid_list(int index) const = 0;
  virtual void add_userid_list(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  UserExistResponse {
  public:
  UserExistResponse();
  ~UserExistResponse();
  
  private:
  UserExistResponse(const UserExistResponse& from);
  UserExistResponse& operator=(const UserExistResponse& from);
  
  public:
  static UserExistResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated string exist_userid_list = 2;
  virtual int get_exist_userid_list_size() const = 0;
  virtual void clear_exist_userid_list() = 0;
  virtual const char* get_exist_userid_list(int index) const = 0;
  virtual void add_exist_userid_list(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SetProfileRequest {
  public:
  SetProfileRequest();
  ~SetProfileRequest();
  
  private:
  SetProfileRequest(const SetProfileRequest& from);
  SetProfileRequest& operator=(const SetProfileRequest& from);
  
  public:
  static SetProfileRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // required .SSDataDomain.SSProfile profile = 2;
  virtual bool has_profile() const = 0;
  virtual void clear_profile() = 0;
  virtual const SSProfile* get_profile() const = 0;
  virtual void set_profile(SSProfile* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SetProfileResponse {
  public:
  SetProfileResponse();
  ~SetProfileResponse();
  
  private:
  SetProfileResponse(const SetProfileResponse& from);
  SetProfileResponse& operator=(const SetProfileResponse& from);
  
  public:
  static SetProfileResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetProfileRequest {
  public:
  GetProfileRequest();
  ~GetProfileRequest();
  
  private:
  GetProfileRequest(const GetProfileRequest& from);
  GetProfileRequest& operator=(const GetProfileRequest& from);
  
  public:
  static GetProfileRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // repeated string userid_list = 1;
  virtual int get_userid_list_size() const = 0;
  virtual void clear_userid_list() = 0;
  virtual const char* get_userid_list(int index) const = 0;
  virtual void add_userid_list(const char* value) = 0;
  
  // optional int32 flag = 2 [default = 2];
  virtual bool has_flag() const = 0;
  virtual void clear_flag() = 0;
  virtual int32 get_flag() const = 0;
  virtual void set_flag(int32 value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetProfileResponse {
  public:
  GetProfileResponse();
  ~GetProfileResponse();
  
  private:
  GetProfileResponse(const GetProfileResponse& from);
  GetProfileResponse& operator=(const GetProfileResponse& from);
  
  public:
  static GetProfileResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated .SSDataDomain.SSProfile profile_list = 2;
  virtual int get_profile_list_size() const = 0;
  virtual void clear_profile_list() = 0;
  virtual const SSProfile* get_profile_list(int index) const = 0;
  virtual void add_profile_list(SSProfile* item) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  FollowRequest {
  public:
  FollowRequest();
  ~FollowRequest();
  
  private:
  FollowRequest(const FollowRequest& from);
  FollowRequest& operator=(const FollowRequest& from);
  
  public:
  static FollowRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string follower_userid = 1;
  virtual bool has_follower_userid() const = 0;
  virtual void clear_follower_userid() = 0;
  virtual void set_follower_userid(const char* value) = 0;
  virtual const char* get_follower_userid() const = 0;
  
  // repeated string following_userid_list = 2;
  virtual int get_following_userid_list_size() const = 0;
  virtual void clear_following_userid_list() = 0;
  virtual const char* get_following_userid_list(int index) const = 0;
  virtual void add_following_userid_list(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  FollowResponse {
  public:
  FollowResponse();
  ~FollowResponse();
  
  private:
  FollowResponse(const FollowResponse& from);
  FollowResponse& operator=(const FollowResponse& from);
  
  public:
  static FollowResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  CancelFollowRequest {
  public:
  CancelFollowRequest();
  ~CancelFollowRequest();
  
  private:
  CancelFollowRequest(const CancelFollowRequest& from);
  CancelFollowRequest& operator=(const CancelFollowRequest& from);
  
  public:
  static CancelFollowRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string follower_userid = 1;
  virtual bool has_follower_userid() const = 0;
  virtual void clear_follower_userid() = 0;
  virtual void set_follower_userid(const char* value) = 0;
  virtual const char* get_follower_userid() const = 0;
  
  // repeated string following_userid_list = 2;
  virtual int get_following_userid_list_size() const = 0;
  virtual void clear_following_userid_list() = 0;
  virtual const char* get_following_userid_list(int index) const = 0;
  virtual void add_following_userid_list(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  CancelFollowResponse {
  public:
  CancelFollowResponse();
  ~CancelFollowResponse();
  
  private:
  CancelFollowResponse(const CancelFollowResponse& from);
  CancelFollowResponse& operator=(const CancelFollowResponse& from);
  
  public:
  static CancelFollowResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetFollowingRequest {
  public:
  GetFollowingRequest();
  ~GetFollowingRequest();
  
  private:
  GetFollowingRequest(const GetFollowingRequest& from);
  GetFollowingRequest& operator=(const GetFollowingRequest& from);
  
  public:
  static GetFollowingRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetFollowingResponse {
  public:
  GetFollowingResponse();
  ~GetFollowingResponse();
  
  private:
  GetFollowingResponse(const GetFollowingResponse& from);
  GetFollowingResponse& operator=(const GetFollowingResponse& from);
  
  public:
  static GetFollowingResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated string following_userid_list = 2;
  virtual int get_following_userid_list_size() const = 0;
  virtual void clear_following_userid_list() = 0;
  virtual const char* get_following_userid_list(int index) const = 0;
  virtual void add_following_userid_list(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetFollowerCountRequest {
  public:
  GetFollowerCountRequest();
  ~GetFollowerCountRequest();
  
  private:
  GetFollowerCountRequest(const GetFollowerCountRequest& from);
  GetFollowerCountRequest& operator=(const GetFollowerCountRequest& from);
  
  public:
  static GetFollowerCountRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetFollowerCountResponse {
  public:
  GetFollowerCountResponse();
  ~GetFollowerCountResponse();
  
  private:
  GetFollowerCountResponse(const GetFollowerCountResponse& from);
  GetFollowerCountResponse& operator=(const GetFollowerCountResponse& from);
  
  public:
  static GetFollowerCountResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // optional int32 count = 2;
  virtual bool has_count() const = 0;
  virtual void clear_count() = 0;
  virtual int32 get_count() const = 0;
  virtual void set_count(int32 value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetFollowingCountRequest {
  public:
  GetFollowingCountRequest();
  ~GetFollowingCountRequest();
  
  private:
  GetFollowingCountRequest(const GetFollowingCountRequest& from);
  GetFollowingCountRequest& operator=(const GetFollowingCountRequest& from);
  
  public:
  static GetFollowingCountRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetFollowingCountResponse {
  public:
  GetFollowingCountResponse();
  ~GetFollowingCountResponse();
  
  private:
  GetFollowingCountResponse(const GetFollowingCountResponse& from);
  GetFollowingCountResponse& operator=(const GetFollowingCountResponse& from);
  
  public:
  static GetFollowingCountResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // optional int32 count = 2;
  virtual bool has_count() const = 0;
  virtual void clear_count() = 0;
  virtual int32 get_count() const = 0;
  virtual void set_count(int32 value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetFollowerRequest {
  public:
  GetFollowerRequest();
  ~GetFollowerRequest();
  
  private:
  GetFollowerRequest(const GetFollowerRequest& from);
  GetFollowerRequest& operator=(const GetFollowerRequest& from);
  
  public:
  static GetFollowerRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // optional string cursor_id = 2;
  virtual bool has_cursor_id() const = 0;
  virtual void clear_cursor_id() = 0;
  virtual void set_cursor_id(const char* value) = 0;
  virtual const char* get_cursor_id() const = 0;
  
  // optional int32 count = 3 [default = 100];
  virtual bool has_count() const = 0;
  virtual void clear_count() = 0;
  virtual int32 get_count() const = 0;
  virtual void set_count(int32 value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetFollowerResponse {
  public:
  GetFollowerResponse();
  ~GetFollowerResponse();
  
  private:
  GetFollowerResponse(const GetFollowerResponse& from);
  GetFollowerResponse& operator=(const GetFollowerResponse& from);
  
  public:
  static GetFollowerResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated string follower_userid_list = 2;
  virtual int get_follower_userid_list_size() const = 0;
  virtual void clear_follower_userid_list() = 0;
  virtual const char* get_follower_userid_list(int index) const = 0;
  virtual void add_follower_userid_list(const char* value) = 0;
  
  // optional bool eol = 3 [default = false];
  virtual bool has_eol() const = 0;
  virtual void clear_eol() = 0;
  virtual bool get_eol() const = 0;
  virtual void set_eol(bool value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  InviteRequest {
  public:
  InviteRequest();
  ~InviteRequest();
  
  private:
  InviteRequest(const InviteRequest& from);
  InviteRequest& operator=(const InviteRequest& from);
  
  public:
  static InviteRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string inviter_userid = 1;
  virtual bool has_inviter_userid() const = 0;
  virtual void clear_inviter_userid() = 0;
  virtual void set_inviter_userid(const char* value) = 0;
  virtual const char* get_inviter_userid() const = 0;
  
  // repeated string inviting_userid_list = 2;
  virtual int get_inviting_userid_list_size() const = 0;
  virtual void clear_inviting_userid_list() = 0;
  virtual const char* get_inviting_userid_list(int index) const = 0;
  virtual void add_inviting_userid_list(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  InviteResponse {
  public:
  InviteResponse();
  ~InviteResponse();
  
  private:
  InviteResponse(const InviteResponse& from);
  InviteResponse& operator=(const InviteResponse& from);
  
  public:
  static InviteResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetInvitingRequest {
  public:
  GetInvitingRequest();
  ~GetInvitingRequest();
  
  private:
  GetInvitingRequest(const GetInvitingRequest& from);
  GetInvitingRequest& operator=(const GetInvitingRequest& from);
  
  public:
  static GetInvitingRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetInvitingResponse {
  public:
  GetInvitingResponse();
  ~GetInvitingResponse();
  
  private:
  GetInvitingResponse(const GetInvitingResponse& from);
  GetInvitingResponse& operator=(const GetInvitingResponse& from);
  
  public:
  static GetInvitingResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated string inviting_userid_list = 2;
  virtual int get_inviting_userid_list_size() const = 0;
  virtual void clear_inviting_userid_list() = 0;
  virtual const char* get_inviting_userid_list(int index) const = 0;
  virtual void add_inviting_userid_list(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetInviterRequest {
  public:
  GetInviterRequest();
  ~GetInviterRequest();
  
  private:
  GetInviterRequest(const GetInviterRequest& from);
  GetInviterRequest& operator=(const GetInviterRequest& from);
  
  public:
  static GetInviterRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetInviterResponse {
  public:
  GetInviterResponse();
  ~GetInviterResponse();
  
  private:
  GetInviterResponse(const GetInviterResponse& from);
  GetInviterResponse& operator=(const GetInviterResponse& from);
  
  public:
  static GetInviterResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated string inviter_userid_list = 2;
  virtual int get_inviter_userid_list_size() const = 0;
  virtual void clear_inviter_userid_list() = 0;
  virtual const char* get_inviter_userid_list(int index) const = 0;
  virtual void add_inviter_userid_list(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SetSessionInfoRequest {
  public:
  SetSessionInfoRequest();
  ~SetSessionInfoRequest();
  
  private:
  SetSessionInfoRequest(const SetSessionInfoRequest& from);
  SetSessionInfoRequest& operator=(const SetSessionInfoRequest& from);
  
  public:
  static SetSessionInfoRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // required .SSDataDomain.SSSessionInfo session_info = 2;
  virtual bool has_session_info() const = 0;
  virtual void clear_session_info() = 0;
  virtual const SSSessionInfo* get_session_info() const = 0;
  virtual void set_session_info(SSSessionInfo* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SetSessionInfoResponse {
  public:
  SetSessionInfoResponse();
  ~SetSessionInfoResponse();
  
  private:
  SetSessionInfoResponse(const SetSessionInfoResponse& from);
  SetSessionInfoResponse& operator=(const SetSessionInfoResponse& from);
  
  public:
  static SetSessionInfoResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetSessionInfoRequest {
  public:
  GetSessionInfoRequest();
  ~GetSessionInfoRequest();
  
  private:
  GetSessionInfoRequest(const GetSessionInfoRequest& from);
  GetSessionInfoRequest& operator=(const GetSessionInfoRequest& from);
  
  public:
  static GetSessionInfoRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetSessionInfoResponse {
  public:
  GetSessionInfoResponse();
  ~GetSessionInfoResponse();
  
  private:
  GetSessionInfoResponse(const GetSessionInfoResponse& from);
  GetSessionInfoResponse& operator=(const GetSessionInfoResponse& from);
  
  public:
  static GetSessionInfoResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // optional .SSDataDomain.SSSessionInfo session_info = 2;
  virtual bool has_session_info() const = 0;
  virtual void clear_session_info() = 0;
  virtual const SSSessionInfo* get_session_info() const = 0;
  virtual void set_session_info(SSSessionInfo* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetMessageRequest {
  public:
  GetMessageRequest();
  ~GetMessageRequest();
  
  private:
  GetMessageRequest(const GetMessageRequest& from);
  GetMessageRequest& operator=(const GetMessageRequest& from);
  
  public:
  static GetMessageRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // required .SSDataDomain.SSBOX source_box = 2;
  virtual bool has_source_box() const = 0;
  virtual void clear_source_box() = 0;
  virtual SSBOX get_source_box() const = 0;
  virtual void set_source_box(SSBOX value) = 0;
  
  // optional string cursor_id = 3;
  virtual bool has_cursor_id() const = 0;
  virtual void clear_cursor_id() = 0;
  virtual void set_cursor_id(const char* value) = 0;
  virtual const char* get_cursor_id() const = 0;
  
  // optional int32 count = 4 [default = 100];
  virtual bool has_count() const = 0;
  virtual void clear_count() = 0;
  virtual int32 get_count() const = 0;
  virtual void set_count(int32 value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetMessageResponse {
  public:
  GetMessageResponse();
  ~GetMessageResponse();
  
  private:
  GetMessageResponse(const GetMessageResponse& from);
  GetMessageResponse& operator=(const GetMessageResponse& from);
  
  public:
  static GetMessageResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated .SSDataDomain.SSMessage msg_list = 2;
  virtual int get_msg_list_size() const = 0;
  virtual void clear_msg_list() = 0;
  virtual const SSMessage* get_msg_list(int index) const = 0;
  virtual void add_msg_list(SSMessage* item) = 0;
  
  // optional bool eol = 3 [default = false];
  virtual bool has_eol() const = 0;
  virtual void clear_eol() = 0;
  virtual bool get_eol() const = 0;
  virtual void set_eol(bool value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetMessageByTimestampRequest {
  public:
  GetMessageByTimestampRequest();
  ~GetMessageByTimestampRequest();
  
  private:
  GetMessageByTimestampRequest(const GetMessageByTimestampRequest& from);
  GetMessageByTimestampRequest& operator=(const GetMessageByTimestampRequest& from);
  
  public:
  static GetMessageByTimestampRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // required .SSDataDomain.SSBOX source_box = 2;
  virtual bool has_source_box() const = 0;
  virtual void clear_source_box() = 0;
  virtual SSBOX get_source_box() const = 0;
  virtual void set_source_box(SSBOX value) = 0;
  
  // optional int64 start_timestamp = 3;
  virtual bool has_start_timestamp() const = 0;
  virtual void clear_start_timestamp() = 0;
  virtual int64 get_start_timestamp() const = 0;
  virtual void set_start_timestamp(int64 value) = 0;
  
  // optional int64 end_timestamp = 4;
  virtual bool has_end_timestamp() const = 0;
  virtual void clear_end_timestamp() = 0;
  virtual int64 get_end_timestamp() const = 0;
  virtual void set_end_timestamp(int64 value) = 0;
  
  // optional int32 count = 5 [default = 100];
  virtual bool has_count() const = 0;
  virtual void clear_count() = 0;
  virtual int32 get_count() const = 0;
  virtual void set_count(int32 value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetMessageByTimestampResponse {
  public:
  GetMessageByTimestampResponse();
  ~GetMessageByTimestampResponse();
  
  private:
  GetMessageByTimestampResponse(const GetMessageByTimestampResponse& from);
  GetMessageByTimestampResponse& operator=(const GetMessageByTimestampResponse& from);
  
  public:
  static GetMessageByTimestampResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated .SSDataDomain.SSMessage msg_list = 2;
  virtual int get_msg_list_size() const = 0;
  virtual void clear_msg_list() = 0;
  virtual const SSMessage* get_msg_list(int index) const = 0;
  virtual void add_msg_list(SSMessage* item) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SendPublicMessageRequest {
  public:
  SendPublicMessageRequest();
  ~SendPublicMessageRequest();
  
  private:
  SendPublicMessageRequest(const SendPublicMessageRequest& from);
  SendPublicMessageRequest& operator=(const SendPublicMessageRequest& from);
  
  public:
  static SendPublicMessageRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.SSMessage msg = 1;
  virtual bool has_msg() const = 0;
  virtual void clear_msg() = 0;
  virtual const SSMessage* get_msg() const = 0;
  virtual void set_msg(SSMessage* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SendPublicMessageResponse {
  public:
  SendPublicMessageResponse();
  ~SendPublicMessageResponse();
  
  private:
  SendPublicMessageResponse(const SendPublicMessageResponse& from);
  SendPublicMessageResponse& operator=(const SendPublicMessageResponse& from);
  
  public:
  static SendPublicMessageResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // required string msgid = 2;
  virtual bool has_msgid() const = 0;
  virtual void clear_msgid() = 0;
  virtual void set_msgid(const char* value) = 0;
  virtual const char* get_msgid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SendMessageRequest {
  public:
  SendMessageRequest();
  ~SendMessageRequest();
  
  private:
  SendMessageRequest(const SendMessageRequest& from);
  SendMessageRequest& operator=(const SendMessageRequest& from);
  
  public:
  static SendMessageRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.SSMessage msg = 1;
  virtual bool has_msg() const = 0;
  virtual void clear_msg() = 0;
  virtual const SSMessage* get_msg() const = 0;
  virtual void set_msg(SSMessage* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SendMessageResponse {
  public:
  SendMessageResponse();
  ~SendMessageResponse();
  
  private:
  SendMessageResponse(const SendMessageResponse& from);
  SendMessageResponse& operator=(const SendMessageResponse& from);
  
  public:
  static SendMessageResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // required string msgid = 2;
  virtual bool has_msgid() const = 0;
  virtual void clear_msgid() = 0;
  virtual void set_msgid(const char* value) = 0;
  virtual const char* get_msgid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  AddFavoriteMessageRequest {
  public:
  AddFavoriteMessageRequest();
  ~AddFavoriteMessageRequest();
  
  private:
  AddFavoriteMessageRequest(const AddFavoriteMessageRequest& from);
  AddFavoriteMessageRequest& operator=(const AddFavoriteMessageRequest& from);
  
  public:
  static AddFavoriteMessageRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.SSMessage msg = 1;
  virtual bool has_msg() const = 0;
  virtual void clear_msg() = 0;
  virtual const SSMessage* get_msg() const = 0;
  virtual void set_msg(SSMessage* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  AddFavoriteMessageResponse {
  public:
  AddFavoriteMessageResponse();
  ~AddFavoriteMessageResponse();
  
  private:
  AddFavoriteMessageResponse(const AddFavoriteMessageResponse& from);
  AddFavoriteMessageResponse& operator=(const AddFavoriteMessageResponse& from);
  
  public:
  static AddFavoriteMessageResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // required string msgid = 2;
  virtual bool has_msgid() const = 0;
  virtual void clear_msgid() = 0;
  virtual void set_msgid(const char* value) = 0;
  virtual const char* get_msgid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  AddContactRequest {
  public:
  AddContactRequest();
  ~AddContactRequest();
  
  private:
  AddContactRequest(const AddContactRequest& from);
  AddContactRequest& operator=(const AddContactRequest& from);
  
  public:
  static AddContactRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // repeated .SSDataDomain.SSContact contact_list = 2;
  virtual int get_contact_list_size() const = 0;
  virtual void clear_contact_list() = 0;
  virtual const SSContact* get_contact_list(int index) const = 0;
  virtual void add_contact_list(SSContact* item) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  AddContactResponse {
  public:
  AddContactResponse();
  ~AddContactResponse();
  
  private:
  AddContactResponse(const AddContactResponse& from);
  AddContactResponse& operator=(const AddContactResponse& from);
  
  public:
  static AddContactResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  RemoveContactRequest {
  public:
  RemoveContactRequest();
  ~RemoveContactRequest();
  
  private:
  RemoveContactRequest(const RemoveContactRequest& from);
  RemoveContactRequest& operator=(const RemoveContactRequest& from);
  
  public:
  static RemoveContactRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // repeated string contactid_list = 2;
  virtual int get_contactid_list_size() const = 0;
  virtual void clear_contactid_list() = 0;
  virtual const char* get_contactid_list(int index) const = 0;
  virtual void add_contactid_list(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  RemoveContactResponse {
  public:
  RemoveContactResponse();
  ~RemoveContactResponse();
  
  private:
  RemoveContactResponse(const RemoveContactResponse& from);
  RemoveContactResponse& operator=(const RemoveContactResponse& from);
  
  public:
  static RemoveContactResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetContactRequest {
  public:
  GetContactRequest();
  ~GetContactRequest();
  
  private:
  GetContactRequest(const GetContactRequest& from);
  GetContactRequest& operator=(const GetContactRequest& from);
  
  public:
  static GetContactRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetContactResponse {
  public:
  GetContactResponse();
  ~GetContactResponse();
  
  private:
  GetContactResponse(const GetContactResponse& from);
  GetContactResponse& operator=(const GetContactResponse& from);
  
  public:
  static GetContactResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated .SSDataDomain.SSContact contact_list = 2;
  virtual int get_contact_list_size() const = 0;
  virtual void clear_contact_list() = 0;
  virtual const SSContact* get_contact_list(int index) const = 0;
  virtual void add_contact_list(SSContact* item) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  AddGroupRequest {
  public:
  AddGroupRequest();
  ~AddGroupRequest();
  
  private:
  AddGroupRequest(const AddGroupRequest& from);
  AddGroupRequest& operator=(const AddGroupRequest& from);
  
  public:
  static AddGroupRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // repeated .SSDataDomain.SSGroup group_list = 2;
  virtual int get_group_list_size() const = 0;
  virtual void clear_group_list() = 0;
  virtual const SSGroup* get_group_list(int index) const = 0;
  virtual void add_group_list(SSGroup* item) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  AddGroupResponse {
  public:
  AddGroupResponse();
  ~AddGroupResponse();
  
  private:
  AddGroupResponse(const AddGroupResponse& from);
  AddGroupResponse& operator=(const AddGroupResponse& from);
  
  public:
  static AddGroupResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  RemoveGroupRequest {
  public:
  RemoveGroupRequest();
  ~RemoveGroupRequest();
  
  private:
  RemoveGroupRequest(const RemoveGroupRequest& from);
  RemoveGroupRequest& operator=(const RemoveGroupRequest& from);
  
  public:
  static RemoveGroupRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // repeated string groupid_list = 2;
  virtual int get_groupid_list_size() const = 0;
  virtual void clear_groupid_list() = 0;
  virtual const char* get_groupid_list(int index) const = 0;
  virtual void add_groupid_list(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  RemoveGroupResponse {
  public:
  RemoveGroupResponse();
  ~RemoveGroupResponse();
  
  private:
  RemoveGroupResponse(const RemoveGroupResponse& from);
  RemoveGroupResponse& operator=(const RemoveGroupResponse& from);
  
  public:
  static RemoveGroupResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetGroupRequest {
  public:
  GetGroupRequest();
  ~GetGroupRequest();
  
  private:
  GetGroupRequest(const GetGroupRequest& from);
  GetGroupRequest& operator=(const GetGroupRequest& from);
  
  public:
  static GetGroupRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetGroupResponse {
  public:
  GetGroupResponse();
  ~GetGroupResponse();
  
  private:
  GetGroupResponse(const GetGroupResponse& from);
  GetGroupResponse& operator=(const GetGroupResponse& from);
  
  public:
  static GetGroupResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated .SSDataDomain.SSGroup group_list = 2;
  virtual int get_group_list_size() const = 0;
  virtual void clear_group_list() = 0;
  virtual const SSGroup* get_group_list(int index) const = 0;
  virtual void add_group_list(SSGroup* item) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  AddMemberRequest {
  public:
  AddMemberRequest();
  ~AddMemberRequest();
  
  private:
  AddMemberRequest(const AddMemberRequest& from);
  AddMemberRequest& operator=(const AddMemberRequest& from);
  
  public:
  static AddMemberRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // repeated .SSDataDomain.SSMember member_list = 2;
  virtual int get_member_list_size() const = 0;
  virtual void clear_member_list() = 0;
  virtual const SSMember* get_member_list(int index) const = 0;
  virtual void add_member_list(SSMember* item) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  AddMemberResponse {
  public:
  AddMemberResponse();
  ~AddMemberResponse();
  
  private:
  AddMemberResponse(const AddMemberResponse& from);
  AddMemberResponse& operator=(const AddMemberResponse& from);
  
  public:
  static AddMemberResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  RemoveMemberRequest {
  public:
  RemoveMemberRequest();
  ~RemoveMemberRequest();
  
  private:
  RemoveMemberRequest(const RemoveMemberRequest& from);
  RemoveMemberRequest& operator=(const RemoveMemberRequest& from);
  
  public:
  static RemoveMemberRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // repeated .SSDataDomain.SSMember member_list = 2;
  virtual int get_member_list_size() const = 0;
  virtual void clear_member_list() = 0;
  virtual const SSMember* get_member_list(int index) const = 0;
  virtual void add_member_list(SSMember* item) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  RemoveMemberResponse {
  public:
  RemoveMemberResponse();
  ~RemoveMemberResponse();
  
  private:
  RemoveMemberResponse(const RemoveMemberResponse& from);
  RemoveMemberResponse& operator=(const RemoveMemberResponse& from);
  
  public:
  static RemoveMemberResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetMemberRequest {
  public:
  GetMemberRequest();
  ~GetMemberRequest();
  
  private:
  GetMemberRequest(const GetMemberRequest& from);
  GetMemberRequest& operator=(const GetMemberRequest& from);
  
  public:
  static GetMemberRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetMemberResponse {
  public:
  GetMemberResponse();
  ~GetMemberResponse();
  
  private:
  GetMemberResponse(const GetMemberResponse& from);
  GetMemberResponse& operator=(const GetMemberResponse& from);
  
  public:
  static GetMemberResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated .SSDataDomain.SSMember member_list = 2;
  virtual int get_member_list_size() const = 0;
  virtual void clear_member_list() = 0;
  virtual const SSMember* get_member_list(int index) const = 0;
  virtual void add_member_list(SSMember* item) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  QueryAndUpdateRequest {
  public:
  QueryAndUpdateRequest();
  ~QueryAndUpdateRequest();
  
  private:
  QueryAndUpdateRequest(const QueryAndUpdateRequest& from);
  QueryAndUpdateRequest& operator=(const QueryAndUpdateRequest& from);
  
  public:
  static QueryAndUpdateRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string key = 1;
  virtual bool has_key() const = 0;
  virtual void clear_key() = 0;
  virtual void set_key(const char* value) = 0;
  virtual const char* get_key() const = 0;
  
  // optional bytes update_value = 2;
  virtual bool has_update_value() const = 0;
  virtual void clear_update_value() = 0;
  virtual const void* get_update_value(size_t* p_size) const = 0;
  virtual void set_update_value(const void* value, size_t size) = 0;
  
  // optional bool is_update = 3 [default = false];
  virtual bool has_is_update() const = 0;
  virtual void clear_is_update() = 0;
  virtual bool get_is_update() const = 0;
  virtual void set_is_update(bool value) = 0;
  
  // optional int32 consistency_level = 4;
  virtual bool has_consistency_level() const = 0;
  virtual void clear_consistency_level() = 0;
  virtual int32 get_consistency_level() const = 0;
  virtual void set_consistency_level(int32 value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  QueryAndUpdateResponse {
  public:
  QueryAndUpdateResponse();
  ~QueryAndUpdateResponse();
  
  private:
  QueryAndUpdateResponse(const QueryAndUpdateResponse& from);
  QueryAndUpdateResponse& operator=(const QueryAndUpdateResponse& from);
  
  public:
  static QueryAndUpdateResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // optional bytes value = 2;
  virtual bool has_value() const = 0;
  virtual void clear_value() = 0;
  virtual const void* get_value(size_t* p_size) const = 0;
  virtual void set_value(const void* value, size_t size) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  QueryAndDeleteRequest {
  public:
  QueryAndDeleteRequest();
  ~QueryAndDeleteRequest();
  
  private:
  QueryAndDeleteRequest(const QueryAndDeleteRequest& from);
  QueryAndDeleteRequest& operator=(const QueryAndDeleteRequest& from);
  
  public:
  static QueryAndDeleteRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string key = 1;
  virtual bool has_key() const = 0;
  virtual void clear_key() = 0;
  virtual void set_key(const char* value) = 0;
  virtual const char* get_key() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  QueryAndDeleteResponse {
  public:
  QueryAndDeleteResponse();
  ~QueryAndDeleteResponse();
  
  private:
  QueryAndDeleteResponse(const QueryAndDeleteResponse& from);
  QueryAndDeleteResponse& operator=(const QueryAndDeleteResponse& from);
  
  public:
  static QueryAndDeleteResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // optional bytes value = 2;
  virtual bool has_value() const = 0;
  virtual void clear_value() = 0;
  virtual const void* get_value(size_t* p_size) const = 0;
  virtual void set_value(const void* value, size_t size) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  AddLogicNodeSubscribeInfoRequest {
  public:
  AddLogicNodeSubscribeInfoRequest();
  ~AddLogicNodeSubscribeInfoRequest();
  
  private:
  AddLogicNodeSubscribeInfoRequest(const AddLogicNodeSubscribeInfoRequest& from);
  AddLogicNodeSubscribeInfoRequest& operator=(const AddLogicNodeSubscribeInfoRequest& from);
  
  public:
  static AddLogicNodeSubscribeInfoRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // repeated string logic_node_list = 2;
  virtual int get_logic_node_list_size() const = 0;
  virtual void clear_logic_node_list() = 0;
  virtual const char* get_logic_node_list(int index) const = 0;
  virtual void add_logic_node_list(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  AddLogicNodeSubscribeInfoResponse {
  public:
  AddLogicNodeSubscribeInfoResponse();
  ~AddLogicNodeSubscribeInfoResponse();
  
  private:
  AddLogicNodeSubscribeInfoResponse(const AddLogicNodeSubscribeInfoResponse& from);
  AddLogicNodeSubscribeInfoResponse& operator=(const AddLogicNodeSubscribeInfoResponse& from);
  
  public:
  static AddLogicNodeSubscribeInfoResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  RemoveLogicNodeSubscribeInfoRequest {
  public:
  RemoveLogicNodeSubscribeInfoRequest();
  ~RemoveLogicNodeSubscribeInfoRequest();
  
  private:
  RemoveLogicNodeSubscribeInfoRequest(const RemoveLogicNodeSubscribeInfoRequest& from);
  RemoveLogicNodeSubscribeInfoRequest& operator=(const RemoveLogicNodeSubscribeInfoRequest& from);
  
  public:
  static RemoveLogicNodeSubscribeInfoRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // repeated string logic_node_list = 2;
  virtual int get_logic_node_list_size() const = 0;
  virtual void clear_logic_node_list() = 0;
  virtual const char* get_logic_node_list(int index) const = 0;
  virtual void add_logic_node_list(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  RemoveLogicNodeSubscribeInfoResponse {
  public:
  RemoveLogicNodeSubscribeInfoResponse();
  ~RemoveLogicNodeSubscribeInfoResponse();
  
  private:
  RemoveLogicNodeSubscribeInfoResponse(const RemoveLogicNodeSubscribeInfoResponse& from);
  RemoveLogicNodeSubscribeInfoResponse& operator=(const RemoveLogicNodeSubscribeInfoResponse& from);
  
  public:
  static RemoveLogicNodeSubscribeInfoResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetLogicNodeSubscribeInfoRequest {
  public:
  GetLogicNodeSubscribeInfoRequest();
  ~GetLogicNodeSubscribeInfoRequest();
  
  private:
  GetLogicNodeSubscribeInfoRequest(const GetLogicNodeSubscribeInfoRequest& from);
  GetLogicNodeSubscribeInfoRequest& operator=(const GetLogicNodeSubscribeInfoRequest& from);
  
  public:
  static GetLogicNodeSubscribeInfoRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetLogicNodeSubscribeInfoResponse {
  public:
  GetLogicNodeSubscribeInfoResponse();
  ~GetLogicNodeSubscribeInfoResponse();
  
  private:
  GetLogicNodeSubscribeInfoResponse(const GetLogicNodeSubscribeInfoResponse& from);
  GetLogicNodeSubscribeInfoResponse& operator=(const GetLogicNodeSubscribeInfoResponse& from);
  
  public:
  static GetLogicNodeSubscribeInfoResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated string logic_node_list = 2;
  virtual int get_logic_node_list_size() const = 0;
  virtual void clear_logic_node_list() = 0;
  virtual const char* get_logic_node_list(int index) const = 0;
  virtual void add_logic_node_list(const char* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SetSecurityCodeRequest {
  public:
  SetSecurityCodeRequest();
  ~SetSecurityCodeRequest();
  
  private:
  SetSecurityCodeRequest(const SetSecurityCodeRequest& from);
  SetSecurityCodeRequest& operator=(const SetSecurityCodeRequest& from);
  
  public:
  static SetSecurityCodeRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // required string code = 2;
  virtual bool has_code() const = 0;
  virtual void clear_code() = 0;
  virtual void set_code(const char* value) = 0;
  virtual const char* get_code() const = 0;
  
  // required int64 time = 3;
  virtual bool has_time() const = 0;
  virtual void clear_time() = 0;
  virtual int64 get_time() const = 0;
  virtual void set_time(int64 value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  SetSecurityCodeResponse {
  public:
  SetSecurityCodeResponse();
  ~SetSecurityCodeResponse();
  
  private:
  SetSecurityCodeResponse(const SetSecurityCodeResponse& from);
  SetSecurityCodeResponse& operator=(const SetSecurityCodeResponse& from);
  
  public:
  static SetSecurityCodeResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetSecurityCodeRequest {
  public:
  GetSecurityCodeRequest();
  ~GetSecurityCodeRequest();
  
  private:
  GetSecurityCodeRequest(const GetSecurityCodeRequest& from);
  GetSecurityCodeRequest& operator=(const GetSecurityCodeRequest& from);
  
  public:
  static GetSecurityCodeRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetSecurityCodeResponse {
  public:
  GetSecurityCodeResponse();
  ~GetSecurityCodeResponse();
  
  private:
  GetSecurityCodeResponse(const GetSecurityCodeResponse& from);
  GetSecurityCodeResponse& operator=(const GetSecurityCodeResponse& from);
  
  public:
  static GetSecurityCodeResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // required string code = 2;
  virtual bool has_code() const = 0;
  virtual void clear_code() = 0;
  virtual void set_code(const char* value) = 0;
  virtual const char* get_code() const = 0;
  
  // required int64 time = 3;
  virtual bool has_time() const = 0;
  virtual void clear_time() = 0;
  virtual int64 get_time() const = 0;
  virtual void set_time(int64 value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetFollowerWithProfileRequest {
  public:
  GetFollowerWithProfileRequest();
  ~GetFollowerWithProfileRequest();
  
  private:
  GetFollowerWithProfileRequest(const GetFollowerWithProfileRequest& from);
  GetFollowerWithProfileRequest& operator=(const GetFollowerWithProfileRequest& from);
  
  public:
  static GetFollowerWithProfileRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // optional string cursor_id = 2;
  virtual bool has_cursor_id() const = 0;
  virtual void clear_cursor_id() = 0;
  virtual void set_cursor_id(const char* value) = 0;
  virtual const char* get_cursor_id() const = 0;
  
  // optional int32 count = 3 [default = 100];
  virtual bool has_count() const = 0;
  virtual void clear_count() = 0;
  virtual int32 get_count() const = 0;
  virtual void set_count(int32 value) = 0;
  
  // optional bool exclude_icon = 4 [default = true];
  virtual bool has_exclude_icon() const = 0;
  virtual void clear_exclude_icon() = 0;
  virtual bool get_exclude_icon() const = 0;
  virtual void set_exclude_icon(bool value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetFollowerWithProfileResponse {
  public:
  GetFollowerWithProfileResponse();
  ~GetFollowerWithProfileResponse();
  
  private:
  GetFollowerWithProfileResponse(const GetFollowerWithProfileResponse& from);
  GetFollowerWithProfileResponse& operator=(const GetFollowerWithProfileResponse& from);
  
  public:
  static GetFollowerWithProfileResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated .SSDataDomain.SSProfile follower_list = 2;
  virtual int get_follower_list_size() const = 0;
  virtual void clear_follower_list() = 0;
  virtual const SSProfile* get_follower_list(int index) const = 0;
  virtual void add_follower_list(SSProfile* item) = 0;
  
  // optional bool eol = 3 [default = false];
  virtual bool has_eol() const = 0;
  virtual void clear_eol() = 0;
  virtual bool get_eol() const = 0;
  virtual void set_eol(bool value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetFollowingWithProfileRequest {
  public:
  GetFollowingWithProfileRequest();
  ~GetFollowingWithProfileRequest();
  
  private:
  GetFollowingWithProfileRequest(const GetFollowingWithProfileRequest& from);
  GetFollowingWithProfileRequest& operator=(const GetFollowingWithProfileRequest& from);
  
  public:
  static GetFollowingWithProfileRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // optional bool exclude_icon = 2 [default = true];
  virtual bool has_exclude_icon() const = 0;
  virtual void clear_exclude_icon() = 0;
  virtual bool get_exclude_icon() const = 0;
  virtual void set_exclude_icon(bool value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetFollowingWithProfileResponse {
  public:
  GetFollowingWithProfileResponse();
  ~GetFollowingWithProfileResponse();
  
  private:
  GetFollowingWithProfileResponse(const GetFollowingWithProfileResponse& from);
  GetFollowingWithProfileResponse& operator=(const GetFollowingWithProfileResponse& from);
  
  public:
  static GetFollowingWithProfileResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated .SSDataDomain.SSProfile following_list = 2;
  virtual int get_following_list_size() const = 0;
  virtual void clear_following_list() = 0;
  virtual const SSProfile* get_following_list(int index) const = 0;
  virtual void add_following_list(SSProfile* item) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetInviterWithProfileRequest {
  public:
  GetInviterWithProfileRequest();
  ~GetInviterWithProfileRequest();
  
  private:
  GetInviterWithProfileRequest(const GetInviterWithProfileRequest& from);
  GetInviterWithProfileRequest& operator=(const GetInviterWithProfileRequest& from);
  
  public:
  static GetInviterWithProfileRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // optional bool exclude_icon = 2 [default = true];
  virtual bool has_exclude_icon() const = 0;
  virtual void clear_exclude_icon() = 0;
  virtual bool get_exclude_icon() const = 0;
  virtual void set_exclude_icon(bool value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetInviterWithProfileResponse {
  public:
  GetInviterWithProfileResponse();
  ~GetInviterWithProfileResponse();
  
  private:
  GetInviterWithProfileResponse(const GetInviterWithProfileResponse& from);
  GetInviterWithProfileResponse& operator=(const GetInviterWithProfileResponse& from);
  
  public:
  static GetInviterWithProfileResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated .SSDataDomain.SSProfile inviter_list = 2;
  virtual int get_inviter_list_size() const = 0;
  virtual void clear_inviter_list() = 0;
  virtual const SSProfile* get_inviter_list(int index) const = 0;
  virtual void add_inviter_list(SSProfile* item) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetInvitingWithProfileRequest {
  public:
  GetInvitingWithProfileRequest();
  ~GetInvitingWithProfileRequest();
  
  private:
  GetInvitingWithProfileRequest(const GetInvitingWithProfileRequest& from);
  GetInvitingWithProfileRequest& operator=(const GetInvitingWithProfileRequest& from);
  
  public:
  static GetInvitingWithProfileRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  // optional bool exclude_icon = 2 [default = true];
  virtual bool has_exclude_icon() const = 0;
  virtual void clear_exclude_icon() = 0;
  virtual bool get_exclude_icon() const = 0;
  virtual void set_exclude_icon(bool value) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetInvitingWithProfileResponse {
  public:
  GetInvitingWithProfileResponse();
  ~GetInvitingWithProfileResponse();
  
  private:
  GetInvitingWithProfileResponse(const GetInvitingWithProfileResponse& from);
  GetInvitingWithProfileResponse& operator=(const GetInvitingWithProfileResponse& from);
  
  public:
  static GetInvitingWithProfileResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated .SSDataDomain.SSProfile inviting_list = 2;
  virtual int get_inviting_list_size() const = 0;
  virtual void clear_inviting_list() = 0;
  virtual const SSProfile* get_inviting_list(int index) const = 0;
  virtual void add_inviting_list(SSProfile* item) = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetContactExRequest {
  public:
  GetContactExRequest();
  ~GetContactExRequest();
  
  private:
  GetContactExRequest(const GetContactExRequest& from);
  GetContactExRequest& operator=(const GetContactExRequest& from);
  
  public:
  static GetContactExRequest* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required string userid = 1;
  virtual bool has_userid() const = 0;
  virtual void clear_userid() = 0;
  virtual void set_userid(const char* value) = 0;
  virtual const char* get_userid() const = 0;
  
  
};
// -------------------------------------------------------------------
class DLLAPI  GetContactExResponse {
  public:
  GetContactExResponse();
  ~GetContactExResponse();
  
  private:
  GetContactExResponse(const GetContactExResponse& from);
  GetContactExResponse& operator=(const GetContactExResponse& from);
  
  public:
  static GetContactExResponse* New();
  virtual void Dispose() = 0;
  
  public:
  // -------------------------------------------------------------------
  // accessors
  // -------------------------------------------------------------------
  // required .SSDataDomain.ServiceResult result = 1;
  virtual bool has_result() const = 0;
  virtual void clear_result() = 0;
  virtual const ServiceResult* get_result() const = 0;
  virtual void set_result(ServiceResult* value) = 0;
  
  // repeated .SSDataDomain.SSContactEx contact_ex_list = 2;
  virtual int get_contact_ex_list_size() const = 0;
  virtual void clear_contact_ex_list() = 0;
  virtual const SSContactEx* get_contact_ex_list(int index) const = 0;
  virtual void add_contact_ex_list(SSContactEx* item) = 0;
  
  
};

// ===================================================================
// 服务类定义
// ===================================================================
class DLLAPI SSDataDomainSvc {
  public:
  SSDataDomainSvc();
  virtual ~SSDataDomainSvc();
  private:
  SSDataDomainSvc(const SSDataDomainSvc& from);
  SSDataDomainSvc& operator=(const SSDataDomainSvc& from);
  
  public:
  static SSDataDomainSvc* New();
  virtual void Dispose() = 0;
  
  public:
  virtual void SetTimeout(int timeout) = 0;
  virtual void AddEndpoint(char* host, int port) = 0;
  
  public:
  virtual int32 CreateAccount(const CreateAccountRequest* request, CreateAccountResponse** p_response) = 0;
  virtual int32 GetAccount(const GetAccountRequest* request, GetAccountResponse** p_response) = 0;
  virtual int32 ChangePassword(const ChangePasswordRequest* request, ChangePasswordResponse** p_response) = 0;
  virtual int32 UserExist(const UserExistRequest* request, UserExistResponse** p_response) = 0;
  virtual int32 SetSecurityCode(const SetSecurityCodeRequest* request, SetSecurityCodeResponse** p_response) = 0;
  virtual int32 GetSecurityCode(const GetSecurityCodeRequest* request, GetSecurityCodeResponse** p_response) = 0;
  virtual int32 SetProfile(const SetProfileRequest* request, SetProfileResponse** p_response) = 0;
  virtual int32 GetProfile(const GetProfileRequest* request, GetProfileResponse** p_response) = 0;
  virtual int32 Follow(const FollowRequest* request, FollowResponse** p_response) = 0;
  virtual int32 CancelFollow(const CancelFollowRequest* request, CancelFollowResponse** p_response) = 0;
  virtual int32 GetFollowing(const GetFollowingRequest* request, GetFollowingResponse** p_response) = 0;
  virtual int32 GetFollowerCount(const GetFollowerCountRequest* request, GetFollowerCountResponse** p_response) = 0;
  virtual int32 GetFollowingCount(const GetFollowingCountRequest* request, GetFollowingCountResponse** p_response) = 0;
  virtual int32 GetFollower(const GetFollowerRequest* request, GetFollowerResponse** p_response) = 0;
  virtual int32 Invite(const InviteRequest* request, InviteResponse** p_response) = 0;
  virtual int32 GetInviting(const GetInvitingRequest* request, GetInvitingResponse** p_response) = 0;
  virtual int32 GetInviter(const GetInviterRequest* request, GetInviterResponse** p_response) = 0;
  virtual int32 SetSessionInfo(const SetSessionInfoRequest* request, SetSessionInfoResponse** p_response) = 0;
  virtual int32 GetSessionInfo(const GetSessionInfoRequest* request, GetSessionInfoResponse** p_response) = 0;
  virtual int32 GetMessage(const GetMessageRequest* request, GetMessageResponse** p_response) = 0;
  virtual int32 GetMessageByTimestamp(const GetMessageByTimestampRequest* request, GetMessageByTimestampResponse** p_response) = 0;
  virtual int32 SendPublicMessage(const SendPublicMessageRequest* request, SendPublicMessageResponse** p_response) = 0;
  virtual int32 SendMessage(const SendMessageRequest* request, SendMessageResponse** p_response) = 0;
  virtual int32 AddFavoriteMessage(const AddFavoriteMessageRequest* request, AddFavoriteMessageResponse** p_response) = 0;
  virtual int32 AddContact(const AddContactRequest* request, AddContactResponse** p_response) = 0;
  virtual int32 RemoveContact(const RemoveContactRequest* request, RemoveContactResponse** p_response) = 0;
  virtual int32 GetContact(const GetContactRequest* request, GetContactResponse** p_response) = 0;
  virtual int32 AddGroup(const AddGroupRequest* request, AddGroupResponse** p_response) = 0;
  virtual int32 RemoveGroup(const RemoveGroupRequest* request, RemoveGroupResponse** p_response) = 0;
  virtual int32 GetGroup(const GetGroupRequest* request, GetGroupResponse** p_response) = 0;
  virtual int32 AddMember(const AddMemberRequest* request, AddMemberResponse** p_response) = 0;
  virtual int32 RemoveMember(const RemoveMemberRequest* request, RemoveMemberResponse** p_response) = 0;
  virtual int32 GetMember(const GetMemberRequest* request, GetMemberResponse** p_response) = 0;
  virtual int32 QueryAndUpdate(const QueryAndUpdateRequest* request, QueryAndUpdateResponse** p_response) = 0;
  virtual int32 QueryAndDelete(const QueryAndDeleteRequest* request, QueryAndDeleteResponse** p_response) = 0;
  virtual int32 AddLogicNodeSubscribeInfo(const AddLogicNodeSubscribeInfoRequest* request, AddLogicNodeSubscribeInfoResponse** p_response) = 0;
  virtual int32 RemoveLogicNodeSubscribeInfo(const RemoveLogicNodeSubscribeInfoRequest* request, RemoveLogicNodeSubscribeInfoResponse** p_response) = 0;
  virtual int32 GetLogicNodeSubscribeInfo(const GetLogicNodeSubscribeInfoRequest* request, GetLogicNodeSubscribeInfoResponse** p_response) = 0;
  virtual int32 GetFollowingWithProfile(const GetFollowingWithProfileRequest* request, GetFollowingWithProfileResponse** p_response) = 0;
  virtual int32 GetFollowerWithProfile(const GetFollowerWithProfileRequest* request, GetFollowerWithProfileResponse** p_response) = 0;
  virtual int32 GetInvitingWithProfile(const GetInvitingWithProfileRequest* request, GetInvitingWithProfileResponse** p_response) = 0;
  virtual int32 GetInviterWithProfile(const GetInviterWithProfileRequest* request, GetInviterWithProfileResponse** p_response) = 0;
  virtual int32 GetContactEx(const GetContactExRequest* request, GetContactExResponse** p_response) = 0;
};




}  // namespace SSDataDomainClient
#endif  // PROTOBUF_ssdatadomain_2eproto__INCLUDED
