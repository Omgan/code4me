// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssdatadomain.proto

#ifndef PROTOBUF_ssdatadomain_2eproto__INCLUDED
#define PROTOBUF_ssdatadomain_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
// @@protoc_insertion_point(includes)

namespace SSDataDomain {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ssdatadomain_2eproto();
void protobuf_AssignDesc_ssdatadomain_2eproto();
void protobuf_ShutdownFile_ssdatadomain_2eproto();

class SSAccount;
class SSProfile;
class SSContact;
class SSContactEx;
class SSGroup;
class SSMember;
class SSClientState;
class SSMessageState;
class SSSessionInfo;
class SSMessage;
class ServiceResult;
class CreateAccountRequest;
class CreateAccountResponse;
class GetAccountRequest;
class GetAccountResponse;
class ChangePasswordRequest;
class ChangePasswordResponse;
class UserExistRequest;
class UserExistResponse;
class SetProfileRequest;
class SetProfileResponse;
class GetProfileRequest;
class GetProfileResponse;
class FollowRequest;
class FollowResponse;
class CancelFollowRequest;
class CancelFollowResponse;
class GetFollowingRequest;
class GetFollowingResponse;
class GetFollowerCountRequest;
class GetFollowerCountResponse;
class GetFollowerRequest;
class GetFollowerResponse;
class InviteRequest;
class InviteResponse;
class GetInvitingRequest;
class GetInvitingResponse;
class GetInviterRequest;
class GetInviterResponse;
class SetSessionInfoRequest;
class SetSessionInfoResponse;
class GetSessionInfoRequest;
class GetSessionInfoResponse;
class GetMessageRequest;
class GetMessageResponse;
class GetMessageByTimestampRequest;
class GetMessageByTimestampResponse;
class SendPublicMessageRequest;
class SendPublicMessageResponse;
class SendMessageRequest;
class SendMessageResponse;
class AddFavoriteMessageRequest;
class AddFavoriteMessageResponse;
class AddContactRequest;
class AddContactResponse;
class RemoveContactRequest;
class RemoveContactResponse;
class GetContactRequest;
class GetContactResponse;
class AddGroupRequest;
class AddGroupResponse;
class RemoveGroupRequest;
class RemoveGroupResponse;
class GetGroupRequest;
class GetGroupResponse;
class AddMemberRequest;
class AddMemberResponse;
class RemoveMemberRequest;
class RemoveMemberResponse;
class GetMemberRequest;
class GetMemberResponse;
class QueryAndUpdateRequest;
class QueryAndUpdateResponse;
class QueryAndDeleteRequest;
class QueryAndDeleteResponse;
class AddLogicNodeSubscribeInfoRequest;
class AddLogicNodeSubscribeInfoResponse;
class RemoveLogicNodeSubscribeInfoRequest;
class RemoveLogicNodeSubscribeInfoResponse;
class GetLogicNodeSubscribeInfoRequest;
class GetLogicNodeSubscribeInfoResponse;
class GetFollowerWithProfileRequest;
class GetFollowerWithProfileResponse;
class GetFollowingWithProfileRequest;
class GetFollowingWithProfileResponse;
class GetContactExRequest;
class GetContactExResponse;

enum SSGender {
  UNKNOWN = 0,
  MALE = 1,
  FEMAIL = 2
};
bool SSGender_IsValid(int value);
const SSGender SSGender_MIN = UNKNOWN;
const SSGender SSGender_MAX = FEMAIL;
const int SSGender_ARRAYSIZE = SSGender_MAX + 1;

const ::google::protobuf::EnumDescriptor* SSGender_descriptor();
inline const ::std::string& SSGender_Name(SSGender value) {
  return ::google::protobuf::internal::NameOfEnum(
    SSGender_descriptor(), value);
}
inline bool SSGender_Parse(
    const ::std::string& name, SSGender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SSGender>(
    SSGender_descriptor(), name, value);
}
enum SSBOX {
  PUBBOX = 0,
  OUTBOX = 1,
  INBOX = 2,
  FAVBOX = 3
};
bool SSBOX_IsValid(int value);
const SSBOX SSBOX_MIN = PUBBOX;
const SSBOX SSBOX_MAX = FAVBOX;
const int SSBOX_ARRAYSIZE = SSBOX_MAX + 1;

const ::google::protobuf::EnumDescriptor* SSBOX_descriptor();
inline const ::std::string& SSBOX_Name(SSBOX value) {
  return ::google::protobuf::internal::NameOfEnum(
    SSBOX_descriptor(), value);
}
inline bool SSBOX_Parse(
    const ::std::string& name, SSBOX* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SSBOX>(
    SSBOX_descriptor(), name, value);
}
enum SSContentType {
  NORMAL = 0,
  COMMAND = 1
};
bool SSContentType_IsValid(int value);
const SSContentType SSContentType_MIN = NORMAL;
const SSContentType SSContentType_MAX = COMMAND;
const int SSContentType_ARRAYSIZE = SSContentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SSContentType_descriptor();
inline const ::std::string& SSContentType_Name(SSContentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SSContentType_descriptor(), value);
}
inline bool SSContentType_Parse(
    const ::std::string& name, SSContentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SSContentType>(
    SSContentType_descriptor(), name, value);
}
enum ServiceCode {
  SC_OK = 0,
  SC_NO_SUCH_OBJECT = 1,
  SC_METHOD_NOT_IMPLEMENT = 2,
  SC_INTERNAL_ERROR = 3
};
bool ServiceCode_IsValid(int value);
const ServiceCode ServiceCode_MIN = SC_OK;
const ServiceCode ServiceCode_MAX = SC_INTERNAL_ERROR;
const int ServiceCode_ARRAYSIZE = ServiceCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceCode_descriptor();
inline const ::std::string& ServiceCode_Name(ServiceCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceCode_descriptor(), value);
}
inline bool ServiceCode_Parse(
    const ::std::string& name, ServiceCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceCode>(
    ServiceCode_descriptor(), name, value);
}
// ===================================================================

class SSAccount : public ::google::protobuf::Message {
 public:
  SSAccount();
  virtual ~SSAccount();
  
  SSAccount(const SSAccount& from);
  
  inline SSAccount& operator=(const SSAccount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSAccount& default_instance();
  
  void Swap(SSAccount* other);
  
  // implements Message ----------------------------------------------
  
  SSAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSAccount& from);
  void MergeFrom(const SSAccount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  
  // required string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  
  // optional bytes binary = 100;
  inline bool has_binary() const;
  inline void clear_binary();
  static const int kBinaryFieldNumber = 100;
  inline const ::std::string& binary() const;
  inline void set_binary(const ::std::string& value);
  inline void set_binary(const char* value);
  inline void set_binary(const void* value, size_t size);
  inline ::std::string* mutable_binary();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SSAccount)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::std::string* password_;
  static const ::std::string _default_password_;
  ::std::string* email_;
  static const ::std::string _default_email_;
  ::std::string* binary_;
  static const ::std::string _default_binary_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SSAccount* default_instance_;
};
// -------------------------------------------------------------------

class SSProfile : public ::google::protobuf::Message {
 public:
  SSProfile();
  virtual ~SSProfile();
  
  SSProfile(const SSProfile& from);
  
  inline SSProfile& operator=(const SSProfile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSProfile& default_instance();
  
  void Swap(SSProfile* other);
  
  // implements Message ----------------------------------------------
  
  SSProfile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSProfile& from);
  void MergeFrom(const SSProfile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  
  // optional int32 age = 3;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 3;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);
  
  // optional .SSDataDomain.SSGender gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline SSDataDomain::SSGender gender() const;
  inline void set_gender(SSDataDomain::SSGender value);
  
  // optional bytes icon = 5;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 5;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const void* value, size_t size);
  inline ::std::string* mutable_icon();
  
  // optional string icon_name = 6 [default = "default.jpg"];
  inline bool has_icon_name() const;
  inline void clear_icon_name();
  static const int kIconNameFieldNumber = 6;
  inline const ::std::string& icon_name() const;
  inline void set_icon_name(const ::std::string& value);
  inline void set_icon_name(const char* value);
  inline void set_icon_name(const char* value, size_t size);
  inline ::std::string* mutable_icon_name();
  
  // optional string introduction = 9;
  inline bool has_introduction() const;
  inline void clear_introduction();
  static const int kIntroductionFieldNumber = 9;
  inline const ::std::string& introduction() const;
  inline void set_introduction(const ::std::string& value);
  inline void set_introduction(const char* value);
  inline void set_introduction(const char* value, size_t size);
  inline ::std::string* mutable_introduction();
  
  // optional bytes binary = 100;
  inline bool has_binary() const;
  inline void clear_binary();
  static const int kBinaryFieldNumber = 100;
  inline const ::std::string& binary() const;
  inline void set_binary(const ::std::string& value);
  inline void set_binary(const char* value);
  inline void set_binary(const void* value, size_t size);
  inline ::std::string* mutable_binary();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SSProfile)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::std::string* nickname_;
  static const ::std::string _default_nickname_;
  ::google::protobuf::int32 age_;
  int gender_;
  ::std::string* icon_;
  static const ::std::string _default_icon_;
  ::std::string* icon_name_;
  static const ::std::string _default_icon_name_;
  ::std::string* introduction_;
  static const ::std::string _default_introduction_;
  ::std::string* binary_;
  static const ::std::string _default_binary_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SSProfile* default_instance_;
};
// -------------------------------------------------------------------

class SSContact : public ::google::protobuf::Message {
 public:
  SSContact();
  virtual ~SSContact();
  
  SSContact(const SSContact& from);
  
  inline SSContact& operator=(const SSContact& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSContact& default_instance();
  
  void Swap(SSContact* other);
  
  // implements Message ----------------------------------------------
  
  SSContact* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSContact& from);
  void MergeFrom(const SSContact& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string contactid = 1;
  inline bool has_contactid() const;
  inline void clear_contactid();
  static const int kContactidFieldNumber = 1;
  inline const ::std::string& contactid() const;
  inline void set_contactid(const ::std::string& value);
  inline void set_contactid(const char* value);
  inline void set_contactid(const char* value, size_t size);
  inline ::std::string* mutable_contactid();
  
  // optional string email = 2;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 2;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  
  // optional string userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // optional string alias_nickname = 4;
  inline bool has_alias_nickname() const;
  inline void clear_alias_nickname();
  static const int kAliasNicknameFieldNumber = 4;
  inline const ::std::string& alias_nickname() const;
  inline void set_alias_nickname(const ::std::string& value);
  inline void set_alias_nickname(const char* value);
  inline void set_alias_nickname(const char* value, size_t size);
  inline ::std::string* mutable_alias_nickname();
  
  // optional bytes binary = 100;
  inline bool has_binary() const;
  inline void clear_binary();
  static const int kBinaryFieldNumber = 100;
  inline const ::std::string& binary() const;
  inline void set_binary(const ::std::string& value);
  inline void set_binary(const char* value);
  inline void set_binary(const void* value, size_t size);
  inline ::std::string* mutable_binary();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SSContact)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* contactid_;
  static const ::std::string _default_contactid_;
  ::std::string* email_;
  static const ::std::string _default_email_;
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::std::string* alias_nickname_;
  static const ::std::string _default_alias_nickname_;
  ::std::string* binary_;
  static const ::std::string _default_binary_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SSContact* default_instance_;
};
// -------------------------------------------------------------------

class SSContactEx : public ::google::protobuf::Message {
 public:
  SSContactEx();
  virtual ~SSContactEx();
  
  SSContactEx(const SSContactEx& from);
  
  inline SSContactEx& operator=(const SSContactEx& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSContactEx& default_instance();
  
  void Swap(SSContactEx* other);
  
  // implements Message ----------------------------------------------
  
  SSContactEx* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSContactEx& from);
  void MergeFrom(const SSContactEx& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string contactid = 1;
  inline bool has_contactid() const;
  inline void clear_contactid();
  static const int kContactidFieldNumber = 1;
  inline const ::std::string& contactid() const;
  inline void set_contactid(const ::std::string& value);
  inline void set_contactid(const char* value);
  inline void set_contactid(const char* value, size_t size);
  inline ::std::string* mutable_contactid();
  
  // optional int32 is_member = 2;
  inline bool has_is_member() const;
  inline void clear_is_member();
  static const int kIsMemberFieldNumber = 2;
  inline ::google::protobuf::int32 is_member() const;
  inline void set_is_member(::google::protobuf::int32 value);
  
  // optional int32 is_following = 3;
  inline bool has_is_following() const;
  inline void clear_is_following();
  static const int kIsFollowingFieldNumber = 3;
  inline ::google::protobuf::int32 is_following() const;
  inline void set_is_following(::google::protobuf::int32 value);
  
  // optional string email = 4;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 4;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  
  // optional string userid = 5;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 5;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // optional string alias_nickname = 6;
  inline bool has_alias_nickname() const;
  inline void clear_alias_nickname();
  static const int kAliasNicknameFieldNumber = 6;
  inline const ::std::string& alias_nickname() const;
  inline void set_alias_nickname(const ::std::string& value);
  inline void set_alias_nickname(const char* value);
  inline void set_alias_nickname(const char* value, size_t size);
  inline ::std::string* mutable_alias_nickname();
  
  // optional string nickname = 7;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 7;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  
  // optional string remark = 8;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 8;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  
  // optional .SSDataDomain.SSGender gender = 9;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 9;
  inline SSDataDomain::SSGender gender() const;
  inline void set_gender(SSDataDomain::SSGender value);
  
  // optional int32 age = 10;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 10;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);
  
  // optional string icon_name = 11;
  inline bool has_icon_name() const;
  inline void clear_icon_name();
  static const int kIconNameFieldNumber = 11;
  inline const ::std::string& icon_name() const;
  inline void set_icon_name(const ::std::string& value);
  inline void set_icon_name(const char* value);
  inline void set_icon_name(const char* value, size_t size);
  inline ::std::string* mutable_icon_name();
  
  // optional string introduction = 12;
  inline bool has_introduction() const;
  inline void clear_introduction();
  static const int kIntroductionFieldNumber = 12;
  inline const ::std::string& introduction() const;
  inline void set_introduction(const ::std::string& value);
  inline void set_introduction(const char* value);
  inline void set_introduction(const char* value, size_t size);
  inline ::std::string* mutable_introduction();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SSContactEx)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* contactid_;
  static const ::std::string _default_contactid_;
  ::google::protobuf::int32 is_member_;
  ::google::protobuf::int32 is_following_;
  ::std::string* email_;
  static const ::std::string _default_email_;
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::std::string* alias_nickname_;
  static const ::std::string _default_alias_nickname_;
  ::std::string* nickname_;
  static const ::std::string _default_nickname_;
  ::std::string* remark_;
  static const ::std::string _default_remark_;
  int gender_;
  ::google::protobuf::int32 age_;
  ::std::string* icon_name_;
  static const ::std::string _default_icon_name_;
  ::std::string* introduction_;
  static const ::std::string _default_introduction_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SSContactEx* default_instance_;
};
// -------------------------------------------------------------------

class SSGroup : public ::google::protobuf::Message {
 public:
  SSGroup();
  virtual ~SSGroup();
  
  SSGroup(const SSGroup& from);
  
  inline SSGroup& operator=(const SSGroup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSGroup& default_instance();
  
  void Swap(SSGroup* other);
  
  // implements Message ----------------------------------------------
  
  SSGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSGroup& from);
  void MergeFrom(const SSGroup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional bool system = 3;
  inline bool has_system() const;
  inline void clear_system();
  static const int kSystemFieldNumber = 3;
  inline bool system() const;
  inline void set_system(bool value);
  
  // optional bytes binary = 100;
  inline bool has_binary() const;
  inline void clear_binary();
  static const int kBinaryFieldNumber = 100;
  inline const ::std::string& binary() const;
  inline void set_binary(const ::std::string& value);
  inline void set_binary(const char* value);
  inline void set_binary(const void* value, size_t size);
  inline ::std::string* mutable_binary();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SSGroup)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* groupid_;
  static const ::std::string _default_groupid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  bool system_;
  ::std::string* binary_;
  static const ::std::string _default_binary_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SSGroup* default_instance_;
};
// -------------------------------------------------------------------

class SSMember : public ::google::protobuf::Message {
 public:
  SSMember();
  virtual ~SSMember();
  
  SSMember(const SSMember& from);
  
  inline SSMember& operator=(const SSMember& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSMember& default_instance();
  
  void Swap(SSMember* other);
  
  // implements Message ----------------------------------------------
  
  SSMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSMember& from);
  void MergeFrom(const SSMember& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  
  // repeated string members = 2;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::std::string& members(int index) const;
  inline ::std::string* mutable_members(int index);
  inline void set_members(int index, const ::std::string& value);
  inline void set_members(int index, const char* value);
  inline void set_members(int index, const char* value, size_t size);
  inline ::std::string* add_members();
  inline void add_members(const ::std::string& value);
  inline void add_members(const char* value);
  inline void add_members(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& members() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_members();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SSMember)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* groupid_;
  static const ::std::string _default_groupid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> members_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SSMember* default_instance_;
};
// -------------------------------------------------------------------

class SSClientState : public ::google::protobuf::Message {
 public:
  SSClientState();
  virtual ~SSClientState();
  
  SSClientState(const SSClientState& from);
  
  inline SSClientState& operator=(const SSClientState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSClientState& default_instance();
  
  void Swap(SSClientState* other);
  
  // implements Message ----------------------------------------------
  
  SSClientState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSClientState& from);
  void MergeFrom(const SSClientState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 last_send_time = 1;
  inline bool has_last_send_time() const;
  inline void clear_last_send_time();
  static const int kLastSendTimeFieldNumber = 1;
  inline ::google::protobuf::int64 last_send_time() const;
  inline void set_last_send_time(::google::protobuf::int64 value);
  
  // optional string last_recieved_message = 2;
  inline bool has_last_recieved_message() const;
  inline void clear_last_recieved_message();
  static const int kLastRecievedMessageFieldNumber = 2;
  inline const ::std::string& last_recieved_message() const;
  inline void set_last_recieved_message(const ::std::string& value);
  inline void set_last_recieved_message(const char* value);
  inline void set_last_recieved_message(const char* value, size_t size);
  inline ::std::string* mutable_last_recieved_message();
  
  // optional int64 last_fetch_time = 3;
  inline bool has_last_fetch_time() const;
  inline void clear_last_fetch_time();
  static const int kLastFetchTimeFieldNumber = 3;
  inline ::google::protobuf::int64 last_fetch_time() const;
  inline void set_last_fetch_time(::google::protobuf::int64 value);
  
  // optional int32 last_seq_number = 4;
  inline bool has_last_seq_number() const;
  inline void clear_last_seq_number();
  static const int kLastSeqNumberFieldNumber = 4;
  inline ::google::protobuf::int32 last_seq_number() const;
  inline void set_last_seq_number(::google::protobuf::int32 value);
  
  // optional int64 last_logout_time = 5;
  inline bool has_last_logout_time() const;
  inline void clear_last_logout_time();
  static const int kLastLogoutTimeFieldNumber = 5;
  inline ::google::protobuf::int64 last_logout_time() const;
  inline void set_last_logout_time(::google::protobuf::int64 value);
  
  // optional string last_client_identifier = 6;
  inline bool has_last_client_identifier() const;
  inline void clear_last_client_identifier();
  static const int kLastClientIdentifierFieldNumber = 6;
  inline const ::std::string& last_client_identifier() const;
  inline void set_last_client_identifier(const ::std::string& value);
  inline void set_last_client_identifier(const char* value);
  inline void set_last_client_identifier(const char* value, size_t size);
  inline ::std::string* mutable_last_client_identifier();
  
  // optional string sc_last_user_time = 7;
  inline bool has_sc_last_user_time() const;
  inline void clear_sc_last_user_time();
  static const int kScLastUserTimeFieldNumber = 7;
  inline const ::std::string& sc_last_user_time() const;
  inline void set_sc_last_user_time(const ::std::string& value);
  inline void set_sc_last_user_time(const char* value);
  inline void set_sc_last_user_time(const char* value, size_t size);
  inline ::std::string* mutable_sc_last_user_time();
  
  // optional string sc_last_group_time = 8;
  inline bool has_sc_last_group_time() const;
  inline void clear_sc_last_group_time();
  static const int kScLastGroupTimeFieldNumber = 8;
  inline const ::std::string& sc_last_group_time() const;
  inline void set_sc_last_group_time(const ::std::string& value);
  inline void set_sc_last_group_time(const char* value);
  inline void set_sc_last_group_time(const char* value, size_t size);
  inline ::std::string* mutable_sc_last_group_time();
  
  // optional string sc_last_contact_time = 9;
  inline bool has_sc_last_contact_time() const;
  inline void clear_sc_last_contact_time();
  static const int kScLastContactTimeFieldNumber = 9;
  inline const ::std::string& sc_last_contact_time() const;
  inline void set_sc_last_contact_time(const ::std::string& value);
  inline void set_sc_last_contact_time(const char* value);
  inline void set_sc_last_contact_time(const char* value, size_t size);
  inline ::std::string* mutable_sc_last_contact_time();
  
  // optional string sc_last_member_time = 10;
  inline bool has_sc_last_member_time() const;
  inline void clear_sc_last_member_time();
  static const int kScLastMemberTimeFieldNumber = 10;
  inline const ::std::string& sc_last_member_time() const;
  inline void set_sc_last_member_time(const ::std::string& value);
  inline void set_sc_last_member_time(const char* value);
  inline void set_sc_last_member_time(const char* value, size_t size);
  inline ::std::string* mutable_sc_last_member_time();
  
  // optional string sc_last_follow_time = 11;
  inline bool has_sc_last_follow_time() const;
  inline void clear_sc_last_follow_time();
  static const int kScLastFollowTimeFieldNumber = 11;
  inline const ::std::string& sc_last_follow_time() const;
  inline void set_sc_last_follow_time(const ::std::string& value);
  inline void set_sc_last_follow_time(const char* value);
  inline void set_sc_last_follow_time(const char* value, size_t size);
  inline ::std::string* mutable_sc_last_follow_time();
  
  // optional string sc_last_send_time = 12;
  inline bool has_sc_last_send_time() const;
  inline void clear_sc_last_send_time();
  static const int kScLastSendTimeFieldNumber = 12;
  inline const ::std::string& sc_last_send_time() const;
  inline void set_sc_last_send_time(const ::std::string& value);
  inline void set_sc_last_send_time(const char* value);
  inline void set_sc_last_send_time(const char* value, size_t size);
  inline ::std::string* mutable_sc_last_send_time();
  
  // optional string sc_last_recv_time = 13;
  inline bool has_sc_last_recv_time() const;
  inline void clear_sc_last_recv_time();
  static const int kScLastRecvTimeFieldNumber = 13;
  inline const ::std::string& sc_last_recv_time() const;
  inline void set_sc_last_recv_time(const ::std::string& value);
  inline void set_sc_last_recv_time(const char* value);
  inline void set_sc_last_recv_time(const char* value, size_t size);
  inline ::std::string* mutable_sc_last_recv_time();
  
  // optional string sc_last_favo_time = 14;
  inline bool has_sc_last_favo_time() const;
  inline void clear_sc_last_favo_time();
  static const int kScLastFavoTimeFieldNumber = 14;
  inline const ::std::string& sc_last_favo_time() const;
  inline void set_sc_last_favo_time(const ::std::string& value);
  inline void set_sc_last_favo_time(const char* value);
  inline void set_sc_last_favo_time(const char* value, size_t size);
  inline ::std::string* mutable_sc_last_favo_time();
  
  // optional bytes binary = 100;
  inline bool has_binary() const;
  inline void clear_binary();
  static const int kBinaryFieldNumber = 100;
  inline const ::std::string& binary() const;
  inline void set_binary(const ::std::string& value);
  inline void set_binary(const char* value);
  inline void set_binary(const void* value, size_t size);
  inline ::std::string* mutable_binary();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SSClientState)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 last_send_time_;
  ::std::string* last_recieved_message_;
  static const ::std::string _default_last_recieved_message_;
  ::google::protobuf::int64 last_fetch_time_;
  ::google::protobuf::int32 last_seq_number_;
  ::google::protobuf::int64 last_logout_time_;
  ::std::string* last_client_identifier_;
  static const ::std::string _default_last_client_identifier_;
  ::std::string* sc_last_user_time_;
  static const ::std::string _default_sc_last_user_time_;
  ::std::string* sc_last_group_time_;
  static const ::std::string _default_sc_last_group_time_;
  ::std::string* sc_last_contact_time_;
  static const ::std::string _default_sc_last_contact_time_;
  ::std::string* sc_last_member_time_;
  static const ::std::string _default_sc_last_member_time_;
  ::std::string* sc_last_follow_time_;
  static const ::std::string _default_sc_last_follow_time_;
  ::std::string* sc_last_send_time_;
  static const ::std::string _default_sc_last_send_time_;
  ::std::string* sc_last_recv_time_;
  static const ::std::string _default_sc_last_recv_time_;
  ::std::string* sc_last_favo_time_;
  static const ::std::string _default_sc_last_favo_time_;
  ::std::string* binary_;
  static const ::std::string _default_binary_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SSClientState* default_instance_;
};
// -------------------------------------------------------------------

class SSMessageState : public ::google::protobuf::Message {
 public:
  SSMessageState();
  virtual ~SSMessageState();
  
  SSMessageState(const SSMessageState& from);
  
  inline SSMessageState& operator=(const SSMessageState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSMessageState& default_instance();
  
  void Swap(SSMessageState* other);
  
  // implements Message ----------------------------------------------
  
  SSMessageState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSMessageState& from);
  void MergeFrom(const SSMessageState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // required int32 seq_number = 2;
  inline bool has_seq_number() const;
  inline void clear_seq_number();
  static const int kSeqNumberFieldNumber = 2;
  inline ::google::protobuf::int32 seq_number() const;
  inline void set_seq_number(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SSMessageState)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::google::protobuf::int32 seq_number_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SSMessageState* default_instance_;
};
// -------------------------------------------------------------------

class SSSessionInfo : public ::google::protobuf::Message {
 public:
  SSSessionInfo();
  virtual ~SSSessionInfo();
  
  SSSessionInfo(const SSSessionInfo& from);
  
  inline SSSessionInfo& operator=(const SSSessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSSessionInfo& default_instance();
  
  void Swap(SSSessionInfo* other);
  
  // implements Message ----------------------------------------------
  
  SSSessionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSSessionInfo& from);
  void MergeFrom(const SSSessionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // optional .SSDataDomain.SSClientState client_state = 2;
  inline bool has_client_state() const;
  inline void clear_client_state();
  static const int kClientStateFieldNumber = 2;
  inline const ::SSDataDomain::SSClientState& client_state() const;
  inline ::SSDataDomain::SSClientState* mutable_client_state();
  
  // repeated .SSDataDomain.SSMessageState message_state = 3;
  inline int message_state_size() const;
  inline void clear_message_state();
  static const int kMessageStateFieldNumber = 3;
  inline const ::SSDataDomain::SSMessageState& message_state(int index) const;
  inline ::SSDataDomain::SSMessageState* mutable_message_state(int index);
  inline ::SSDataDomain::SSMessageState* add_message_state();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessageState >&
      message_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessageState >*
      mutable_message_state();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SSSessionInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::SSDataDomain::SSClientState* client_state_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessageState > message_state_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SSSessionInfo* default_instance_;
};
// -------------------------------------------------------------------

class SSMessage : public ::google::protobuf::Message {
 public:
  SSMessage();
  virtual ~SSMessage();
  
  SSMessage(const SSMessage& from);
  
  inline SSMessage& operator=(const SSMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SSMessage& default_instance();
  
  void Swap(SSMessage* other);
  
  // implements Message ----------------------------------------------
  
  SSMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSMessage& from);
  void MergeFrom(const SSMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string msgid = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline const ::std::string& msgid() const;
  inline void set_msgid(const ::std::string& value);
  inline void set_msgid(const char* value);
  inline void set_msgid(const char* value, size_t size);
  inline ::std::string* mutable_msgid();
  
  // optional int32 seq_number = 3;
  inline bool has_seq_number() const;
  inline void clear_seq_number();
  static const int kSeqNumberFieldNumber = 3;
  inline ::google::protobuf::int32 seq_number() const;
  inline void set_seq_number(::google::protobuf::int32 value);
  
  // required int64 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // required string sender = 5;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 5;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  
  // repeated string recievers = 6;
  inline int recievers_size() const;
  inline void clear_recievers();
  static const int kRecieversFieldNumber = 6;
  inline const ::std::string& recievers(int index) const;
  inline ::std::string* mutable_recievers(int index);
  inline void set_recievers(int index, const ::std::string& value);
  inline void set_recievers(int index, const char* value);
  inline void set_recievers(int index, const char* value, size_t size);
  inline ::std::string* add_recievers();
  inline void add_recievers(const ::std::string& value);
  inline void add_recievers(const char* value);
  inline void add_recievers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& recievers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recievers();
  
  // optional string root_msgid = 7;
  inline bool has_root_msgid() const;
  inline void clear_root_msgid();
  static const int kRootMsgidFieldNumber = 7;
  inline const ::std::string& root_msgid() const;
  inline void set_root_msgid(const ::std::string& value);
  inline void set_root_msgid(const char* value);
  inline void set_root_msgid(const char* value, size_t size);
  inline ::std::string* mutable_root_msgid();
  
  // optional string parent_msgid = 8;
  inline bool has_parent_msgid() const;
  inline void clear_parent_msgid();
  static const int kParentMsgidFieldNumber = 8;
  inline const ::std::string& parent_msgid() const;
  inline void set_parent_msgid(const ::std::string& value);
  inline void set_parent_msgid(const char* value);
  inline void set_parent_msgid(const char* value, size_t size);
  inline ::std::string* mutable_parent_msgid();
  
  // required string subject = 9;
  inline bool has_subject() const;
  inline void clear_subject();
  static const int kSubjectFieldNumber = 9;
  inline const ::std::string& subject() const;
  inline void set_subject(const ::std::string& value);
  inline void set_subject(const char* value);
  inline void set_subject(const char* value, size_t size);
  inline ::std::string* mutable_subject();
  
  // required .SSDataDomain.SSContentType content_type = 10 [default = NORMAL];
  inline bool has_content_type() const;
  inline void clear_content_type();
  static const int kContentTypeFieldNumber = 10;
  inline SSDataDomain::SSContentType content_type() const;
  inline void set_content_type(SSDataDomain::SSContentType value);
  
  // optional bytes content = 11;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 11;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SSMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* msgid_;
  static const ::std::string _default_msgid_;
  ::google::protobuf::int32 seq_number_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* sender_;
  static const ::std::string _default_sender_;
  ::google::protobuf::RepeatedPtrField< ::std::string> recievers_;
  ::std::string* root_msgid_;
  static const ::std::string _default_root_msgid_;
  ::std::string* parent_msgid_;
  static const ::std::string _default_parent_msgid_;
  ::std::string* subject_;
  static const ::std::string _default_subject_;
  int content_type_;
  ::std::string* content_;
  static const ::std::string _default_content_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SSMessage* default_instance_;
};
// -------------------------------------------------------------------

class ServiceResult : public ::google::protobuf::Message {
 public:
  ServiceResult();
  virtual ~ServiceResult();
  
  ServiceResult(const ServiceResult& from);
  
  inline ServiceResult& operator=(const ServiceResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceResult& default_instance();
  
  void Swap(ServiceResult* other);
  
  // implements Message ----------------------------------------------
  
  ServiceResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceResult& from);
  void MergeFrom(const ServiceResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceCode code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline SSDataDomain::ServiceCode code() const;
  inline void set_code(SSDataDomain::ServiceCode value);
  
  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.ServiceResult)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int code_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ServiceResult* default_instance_;
};
// -------------------------------------------------------------------

class CreateAccountRequest : public ::google::protobuf::Message {
 public:
  CreateAccountRequest();
  virtual ~CreateAccountRequest();
  
  CreateAccountRequest(const CreateAccountRequest& from);
  
  inline CreateAccountRequest& operator=(const CreateAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAccountRequest& default_instance();
  
  void Swap(CreateAccountRequest* other);
  
  // implements Message ----------------------------------------------
  
  CreateAccountRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateAccountRequest& from);
  void MergeFrom(const CreateAccountRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  
  // required string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  
  // required string nickname = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.CreateAccountRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::std::string* password_;
  static const ::std::string _default_password_;
  ::std::string* email_;
  static const ::std::string _default_email_;
  ::std::string* nickname_;
  static const ::std::string _default_nickname_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CreateAccountRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateAccountResponse : public ::google::protobuf::Message {
 public:
  CreateAccountResponse();
  virtual ~CreateAccountResponse();
  
  CreateAccountResponse(const CreateAccountResponse& from);
  
  inline CreateAccountResponse& operator=(const CreateAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAccountResponse& default_instance();
  
  void Swap(CreateAccountResponse* other);
  
  // implements Message ----------------------------------------------
  
  CreateAccountResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateAccountResponse& from);
  void MergeFrom(const CreateAccountResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.CreateAccountResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CreateAccountResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetAccountRequest : public ::google::protobuf::Message {
 public:
  GetAccountRequest();
  virtual ~GetAccountRequest();
  
  GetAccountRequest(const GetAccountRequest& from);
  
  inline GetAccountRequest& operator=(const GetAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountRequest& default_instance();
  
  void Swap(GetAccountRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetAccountRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccountRequest& from);
  void MergeFrom(const GetAccountRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetAccountRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetAccountRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetAccountResponse : public ::google::protobuf::Message {
 public:
  GetAccountResponse();
  virtual ~GetAccountResponse();
  
  GetAccountResponse(const GetAccountResponse& from);
  
  inline GetAccountResponse& operator=(const GetAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountResponse& default_instance();
  
  void Swap(GetAccountResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetAccountResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccountResponse& from);
  void MergeFrom(const GetAccountResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // optional .SSDataDomain.SSAccount account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::SSDataDomain::SSAccount& account() const;
  inline ::SSDataDomain::SSAccount* mutable_account();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetAccountResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::SSDataDomain::SSAccount* account_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetAccountResponse* default_instance_;
};
// -------------------------------------------------------------------

class ChangePasswordRequest : public ::google::protobuf::Message {
 public:
  ChangePasswordRequest();
  virtual ~ChangePasswordRequest();
  
  ChangePasswordRequest(const ChangePasswordRequest& from);
  
  inline ChangePasswordRequest& operator=(const ChangePasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePasswordRequest& default_instance();
  
  void Swap(ChangePasswordRequest* other);
  
  // implements Message ----------------------------------------------
  
  ChangePasswordRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangePasswordRequest& from);
  void MergeFrom(const ChangePasswordRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // required string new_password = 2;
  inline bool has_new_password() const;
  inline void clear_new_password();
  static const int kNewPasswordFieldNumber = 2;
  inline const ::std::string& new_password() const;
  inline void set_new_password(const ::std::string& value);
  inline void set_new_password(const char* value);
  inline void set_new_password(const char* value, size_t size);
  inline ::std::string* mutable_new_password();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.ChangePasswordRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::std::string* new_password_;
  static const ::std::string _default_new_password_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ChangePasswordRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChangePasswordResponse : public ::google::protobuf::Message {
 public:
  ChangePasswordResponse();
  virtual ~ChangePasswordResponse();
  
  ChangePasswordResponse(const ChangePasswordResponse& from);
  
  inline ChangePasswordResponse& operator=(const ChangePasswordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePasswordResponse& default_instance();
  
  void Swap(ChangePasswordResponse* other);
  
  // implements Message ----------------------------------------------
  
  ChangePasswordResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangePasswordResponse& from);
  void MergeFrom(const ChangePasswordResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.ChangePasswordResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ChangePasswordResponse* default_instance_;
};
// -------------------------------------------------------------------

class UserExistRequest : public ::google::protobuf::Message {
 public:
  UserExistRequest();
  virtual ~UserExistRequest();
  
  UserExistRequest(const UserExistRequest& from);
  
  inline UserExistRequest& operator=(const UserExistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserExistRequest& default_instance();
  
  void Swap(UserExistRequest* other);
  
  // implements Message ----------------------------------------------
  
  UserExistRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserExistRequest& from);
  void MergeFrom(const UserExistRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string userid_list = 1;
  inline int userid_list_size() const;
  inline void clear_userid_list();
  static const int kUseridListFieldNumber = 1;
  inline const ::std::string& userid_list(int index) const;
  inline ::std::string* mutable_userid_list(int index);
  inline void set_userid_list(int index, const ::std::string& value);
  inline void set_userid_list(int index, const char* value);
  inline void set_userid_list(int index, const char* value, size_t size);
  inline ::std::string* add_userid_list();
  inline void add_userid_list(const ::std::string& value);
  inline void add_userid_list(const char* value);
  inline void add_userid_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& userid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_userid_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.UserExistRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> userid_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserExistRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserExistResponse : public ::google::protobuf::Message {
 public:
  UserExistResponse();
  virtual ~UserExistResponse();
  
  UserExistResponse(const UserExistResponse& from);
  
  inline UserExistResponse& operator=(const UserExistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserExistResponse& default_instance();
  
  void Swap(UserExistResponse* other);
  
  // implements Message ----------------------------------------------
  
  UserExistResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserExistResponse& from);
  void MergeFrom(const UserExistResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated string exist_userid_list = 2;
  inline int exist_userid_list_size() const;
  inline void clear_exist_userid_list();
  static const int kExistUseridListFieldNumber = 2;
  inline const ::std::string& exist_userid_list(int index) const;
  inline ::std::string* mutable_exist_userid_list(int index);
  inline void set_exist_userid_list(int index, const ::std::string& value);
  inline void set_exist_userid_list(int index, const char* value);
  inline void set_exist_userid_list(int index, const char* value, size_t size);
  inline ::std::string* add_exist_userid_list();
  inline void add_exist_userid_list(const ::std::string& value);
  inline void add_exist_userid_list(const char* value);
  inline void add_exist_userid_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& exist_userid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_exist_userid_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.UserExistResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::std::string> exist_userid_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserExistResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetProfileRequest : public ::google::protobuf::Message {
 public:
  SetProfileRequest();
  virtual ~SetProfileRequest();
  
  SetProfileRequest(const SetProfileRequest& from);
  
  inline SetProfileRequest& operator=(const SetProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetProfileRequest& default_instance();
  
  void Swap(SetProfileRequest* other);
  
  // implements Message ----------------------------------------------
  
  SetProfileRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetProfileRequest& from);
  void MergeFrom(const SetProfileRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // required .SSDataDomain.SSProfile profile = 2;
  inline bool has_profile() const;
  inline void clear_profile();
  static const int kProfileFieldNumber = 2;
  inline const ::SSDataDomain::SSProfile& profile() const;
  inline ::SSDataDomain::SSProfile* mutable_profile();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SetProfileRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::SSDataDomain::SSProfile* profile_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SetProfileRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetProfileResponse : public ::google::protobuf::Message {
 public:
  SetProfileResponse();
  virtual ~SetProfileResponse();
  
  SetProfileResponse(const SetProfileResponse& from);
  
  inline SetProfileResponse& operator=(const SetProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetProfileResponse& default_instance();
  
  void Swap(SetProfileResponse* other);
  
  // implements Message ----------------------------------------------
  
  SetProfileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetProfileResponse& from);
  void MergeFrom(const SetProfileResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SetProfileResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SetProfileResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetProfileRequest : public ::google::protobuf::Message {
 public:
  GetProfileRequest();
  virtual ~GetProfileRequest();
  
  GetProfileRequest(const GetProfileRequest& from);
  
  inline GetProfileRequest& operator=(const GetProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetProfileRequest& default_instance();
  
  void Swap(GetProfileRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetProfileRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetProfileRequest& from);
  void MergeFrom(const GetProfileRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string userid_list = 1;
  inline int userid_list_size() const;
  inline void clear_userid_list();
  static const int kUseridListFieldNumber = 1;
  inline const ::std::string& userid_list(int index) const;
  inline ::std::string* mutable_userid_list(int index);
  inline void set_userid_list(int index, const ::std::string& value);
  inline void set_userid_list(int index, const char* value);
  inline void set_userid_list(int index, const char* value, size_t size);
  inline ::std::string* add_userid_list();
  inline void add_userid_list(const ::std::string& value);
  inline void add_userid_list(const char* value);
  inline void add_userid_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& userid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_userid_list();
  
  // optional int32 flag = 2 [default = 2];
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetProfileRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> userid_list_;
  ::google::protobuf::int32 flag_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetProfileRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetProfileResponse : public ::google::protobuf::Message {
 public:
  GetProfileResponse();
  virtual ~GetProfileResponse();
  
  GetProfileResponse(const GetProfileResponse& from);
  
  inline GetProfileResponse& operator=(const GetProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetProfileResponse& default_instance();
  
  void Swap(GetProfileResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetProfileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetProfileResponse& from);
  void MergeFrom(const GetProfileResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated .SSDataDomain.SSProfile profile_list = 2;
  inline int profile_list_size() const;
  inline void clear_profile_list();
  static const int kProfileListFieldNumber = 2;
  inline const ::SSDataDomain::SSProfile& profile_list(int index) const;
  inline ::SSDataDomain::SSProfile* mutable_profile_list(int index);
  inline ::SSDataDomain::SSProfile* add_profile_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile >&
      profile_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile >*
      mutable_profile_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetProfileResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile > profile_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetProfileResponse* default_instance_;
};
// -------------------------------------------------------------------

class FollowRequest : public ::google::protobuf::Message {
 public:
  FollowRequest();
  virtual ~FollowRequest();
  
  FollowRequest(const FollowRequest& from);
  
  inline FollowRequest& operator=(const FollowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FollowRequest& default_instance();
  
  void Swap(FollowRequest* other);
  
  // implements Message ----------------------------------------------
  
  FollowRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FollowRequest& from);
  void MergeFrom(const FollowRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string follower_userid = 1;
  inline bool has_follower_userid() const;
  inline void clear_follower_userid();
  static const int kFollowerUseridFieldNumber = 1;
  inline const ::std::string& follower_userid() const;
  inline void set_follower_userid(const ::std::string& value);
  inline void set_follower_userid(const char* value);
  inline void set_follower_userid(const char* value, size_t size);
  inline ::std::string* mutable_follower_userid();
  
  // repeated string following_userid_list = 2;
  inline int following_userid_list_size() const;
  inline void clear_following_userid_list();
  static const int kFollowingUseridListFieldNumber = 2;
  inline const ::std::string& following_userid_list(int index) const;
  inline ::std::string* mutable_following_userid_list(int index);
  inline void set_following_userid_list(int index, const ::std::string& value);
  inline void set_following_userid_list(int index, const char* value);
  inline void set_following_userid_list(int index, const char* value, size_t size);
  inline ::std::string* add_following_userid_list();
  inline void add_following_userid_list(const ::std::string& value);
  inline void add_following_userid_list(const char* value);
  inline void add_following_userid_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& following_userid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_following_userid_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.FollowRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* follower_userid_;
  static const ::std::string _default_follower_userid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> following_userid_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FollowRequest* default_instance_;
};
// -------------------------------------------------------------------

class FollowResponse : public ::google::protobuf::Message {
 public:
  FollowResponse();
  virtual ~FollowResponse();
  
  FollowResponse(const FollowResponse& from);
  
  inline FollowResponse& operator=(const FollowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FollowResponse& default_instance();
  
  void Swap(FollowResponse* other);
  
  // implements Message ----------------------------------------------
  
  FollowResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FollowResponse& from);
  void MergeFrom(const FollowResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.FollowResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FollowResponse* default_instance_;
};
// -------------------------------------------------------------------

class CancelFollowRequest : public ::google::protobuf::Message {
 public:
  CancelFollowRequest();
  virtual ~CancelFollowRequest();
  
  CancelFollowRequest(const CancelFollowRequest& from);
  
  inline CancelFollowRequest& operator=(const CancelFollowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelFollowRequest& default_instance();
  
  void Swap(CancelFollowRequest* other);
  
  // implements Message ----------------------------------------------
  
  CancelFollowRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CancelFollowRequest& from);
  void MergeFrom(const CancelFollowRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string follower_userid = 1;
  inline bool has_follower_userid() const;
  inline void clear_follower_userid();
  static const int kFollowerUseridFieldNumber = 1;
  inline const ::std::string& follower_userid() const;
  inline void set_follower_userid(const ::std::string& value);
  inline void set_follower_userid(const char* value);
  inline void set_follower_userid(const char* value, size_t size);
  inline ::std::string* mutable_follower_userid();
  
  // repeated string following_userid_list = 2;
  inline int following_userid_list_size() const;
  inline void clear_following_userid_list();
  static const int kFollowingUseridListFieldNumber = 2;
  inline const ::std::string& following_userid_list(int index) const;
  inline ::std::string* mutable_following_userid_list(int index);
  inline void set_following_userid_list(int index, const ::std::string& value);
  inline void set_following_userid_list(int index, const char* value);
  inline void set_following_userid_list(int index, const char* value, size_t size);
  inline ::std::string* add_following_userid_list();
  inline void add_following_userid_list(const ::std::string& value);
  inline void add_following_userid_list(const char* value);
  inline void add_following_userid_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& following_userid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_following_userid_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.CancelFollowRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* follower_userid_;
  static const ::std::string _default_follower_userid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> following_userid_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CancelFollowRequest* default_instance_;
};
// -------------------------------------------------------------------

class CancelFollowResponse : public ::google::protobuf::Message {
 public:
  CancelFollowResponse();
  virtual ~CancelFollowResponse();
  
  CancelFollowResponse(const CancelFollowResponse& from);
  
  inline CancelFollowResponse& operator=(const CancelFollowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelFollowResponse& default_instance();
  
  void Swap(CancelFollowResponse* other);
  
  // implements Message ----------------------------------------------
  
  CancelFollowResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CancelFollowResponse& from);
  void MergeFrom(const CancelFollowResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.CancelFollowResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CancelFollowResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetFollowingRequest : public ::google::protobuf::Message {
 public:
  GetFollowingRequest();
  virtual ~GetFollowingRequest();
  
  GetFollowingRequest(const GetFollowingRequest& from);
  
  inline GetFollowingRequest& operator=(const GetFollowingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFollowingRequest& default_instance();
  
  void Swap(GetFollowingRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetFollowingRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFollowingRequest& from);
  void MergeFrom(const GetFollowingRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetFollowingRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetFollowingRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetFollowingResponse : public ::google::protobuf::Message {
 public:
  GetFollowingResponse();
  virtual ~GetFollowingResponse();
  
  GetFollowingResponse(const GetFollowingResponse& from);
  
  inline GetFollowingResponse& operator=(const GetFollowingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFollowingResponse& default_instance();
  
  void Swap(GetFollowingResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetFollowingResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFollowingResponse& from);
  void MergeFrom(const GetFollowingResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated string following_userid_list = 2;
  inline int following_userid_list_size() const;
  inline void clear_following_userid_list();
  static const int kFollowingUseridListFieldNumber = 2;
  inline const ::std::string& following_userid_list(int index) const;
  inline ::std::string* mutable_following_userid_list(int index);
  inline void set_following_userid_list(int index, const ::std::string& value);
  inline void set_following_userid_list(int index, const char* value);
  inline void set_following_userid_list(int index, const char* value, size_t size);
  inline ::std::string* add_following_userid_list();
  inline void add_following_userid_list(const ::std::string& value);
  inline void add_following_userid_list(const char* value);
  inline void add_following_userid_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& following_userid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_following_userid_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetFollowingResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::std::string> following_userid_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetFollowingResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetFollowerCountRequest : public ::google::protobuf::Message {
 public:
  GetFollowerCountRequest();
  virtual ~GetFollowerCountRequest();
  
  GetFollowerCountRequest(const GetFollowerCountRequest& from);
  
  inline GetFollowerCountRequest& operator=(const GetFollowerCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFollowerCountRequest& default_instance();
  
  void Swap(GetFollowerCountRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetFollowerCountRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFollowerCountRequest& from);
  void MergeFrom(const GetFollowerCountRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetFollowerCountRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetFollowerCountRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetFollowerCountResponse : public ::google::protobuf::Message {
 public:
  GetFollowerCountResponse();
  virtual ~GetFollowerCountResponse();
  
  GetFollowerCountResponse(const GetFollowerCountResponse& from);
  
  inline GetFollowerCountResponse& operator=(const GetFollowerCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFollowerCountResponse& default_instance();
  
  void Swap(GetFollowerCountResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetFollowerCountResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFollowerCountResponse& from);
  void MergeFrom(const GetFollowerCountResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetFollowerCountResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetFollowerCountResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetFollowerRequest : public ::google::protobuf::Message {
 public:
  GetFollowerRequest();
  virtual ~GetFollowerRequest();
  
  GetFollowerRequest(const GetFollowerRequest& from);
  
  inline GetFollowerRequest& operator=(const GetFollowerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFollowerRequest& default_instance();
  
  void Swap(GetFollowerRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetFollowerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFollowerRequest& from);
  void MergeFrom(const GetFollowerRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // optional string cursor_id = 2;
  inline bool has_cursor_id() const;
  inline void clear_cursor_id();
  static const int kCursorIdFieldNumber = 2;
  inline const ::std::string& cursor_id() const;
  inline void set_cursor_id(const ::std::string& value);
  inline void set_cursor_id(const char* value);
  inline void set_cursor_id(const char* value, size_t size);
  inline ::std::string* mutable_cursor_id();
  
  // optional int32 count = 3 [default = 100];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetFollowerRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::std::string* cursor_id_;
  static const ::std::string _default_cursor_id_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetFollowerRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetFollowerResponse : public ::google::protobuf::Message {
 public:
  GetFollowerResponse();
  virtual ~GetFollowerResponse();
  
  GetFollowerResponse(const GetFollowerResponse& from);
  
  inline GetFollowerResponse& operator=(const GetFollowerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFollowerResponse& default_instance();
  
  void Swap(GetFollowerResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetFollowerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFollowerResponse& from);
  void MergeFrom(const GetFollowerResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated string follower_userid_list = 2;
  inline int follower_userid_list_size() const;
  inline void clear_follower_userid_list();
  static const int kFollowerUseridListFieldNumber = 2;
  inline const ::std::string& follower_userid_list(int index) const;
  inline ::std::string* mutable_follower_userid_list(int index);
  inline void set_follower_userid_list(int index, const ::std::string& value);
  inline void set_follower_userid_list(int index, const char* value);
  inline void set_follower_userid_list(int index, const char* value, size_t size);
  inline ::std::string* add_follower_userid_list();
  inline void add_follower_userid_list(const ::std::string& value);
  inline void add_follower_userid_list(const char* value);
  inline void add_follower_userid_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& follower_userid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_follower_userid_list();
  
  // optional bool eol = 3 [default = false];
  inline bool has_eol() const;
  inline void clear_eol();
  static const int kEolFieldNumber = 3;
  inline bool eol() const;
  inline void set_eol(bool value);
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetFollowerResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::std::string> follower_userid_list_;
  bool eol_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetFollowerResponse* default_instance_;
};
// -------------------------------------------------------------------

class InviteRequest : public ::google::protobuf::Message {
 public:
  InviteRequest();
  virtual ~InviteRequest();
  
  InviteRequest(const InviteRequest& from);
  
  inline InviteRequest& operator=(const InviteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteRequest& default_instance();
  
  void Swap(InviteRequest* other);
  
  // implements Message ----------------------------------------------
  
  InviteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteRequest& from);
  void MergeFrom(const InviteRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string inviter_userid = 1;
  inline bool has_inviter_userid() const;
  inline void clear_inviter_userid();
  static const int kInviterUseridFieldNumber = 1;
  inline const ::std::string& inviter_userid() const;
  inline void set_inviter_userid(const ::std::string& value);
  inline void set_inviter_userid(const char* value);
  inline void set_inviter_userid(const char* value, size_t size);
  inline ::std::string* mutable_inviter_userid();
  
  // repeated string inviting_userid_list = 2;
  inline int inviting_userid_list_size() const;
  inline void clear_inviting_userid_list();
  static const int kInvitingUseridListFieldNumber = 2;
  inline const ::std::string& inviting_userid_list(int index) const;
  inline ::std::string* mutable_inviting_userid_list(int index);
  inline void set_inviting_userid_list(int index, const ::std::string& value);
  inline void set_inviting_userid_list(int index, const char* value);
  inline void set_inviting_userid_list(int index, const char* value, size_t size);
  inline ::std::string* add_inviting_userid_list();
  inline void add_inviting_userid_list(const ::std::string& value);
  inline void add_inviting_userid_list(const char* value);
  inline void add_inviting_userid_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& inviting_userid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_inviting_userid_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.InviteRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* inviter_userid_;
  static const ::std::string _default_inviter_userid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> inviting_userid_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static InviteRequest* default_instance_;
};
// -------------------------------------------------------------------

class InviteResponse : public ::google::protobuf::Message {
 public:
  InviteResponse();
  virtual ~InviteResponse();
  
  InviteResponse(const InviteResponse& from);
  
  inline InviteResponse& operator=(const InviteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteResponse& default_instance();
  
  void Swap(InviteResponse* other);
  
  // implements Message ----------------------------------------------
  
  InviteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteResponse& from);
  void MergeFrom(const InviteResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.InviteResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static InviteResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetInvitingRequest : public ::google::protobuf::Message {
 public:
  GetInvitingRequest();
  virtual ~GetInvitingRequest();
  
  GetInvitingRequest(const GetInvitingRequest& from);
  
  inline GetInvitingRequest& operator=(const GetInvitingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInvitingRequest& default_instance();
  
  void Swap(GetInvitingRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetInvitingRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetInvitingRequest& from);
  void MergeFrom(const GetInvitingRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetInvitingRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetInvitingRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetInvitingResponse : public ::google::protobuf::Message {
 public:
  GetInvitingResponse();
  virtual ~GetInvitingResponse();
  
  GetInvitingResponse(const GetInvitingResponse& from);
  
  inline GetInvitingResponse& operator=(const GetInvitingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInvitingResponse& default_instance();
  
  void Swap(GetInvitingResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetInvitingResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetInvitingResponse& from);
  void MergeFrom(const GetInvitingResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated string inviting_userid_list = 2;
  inline int inviting_userid_list_size() const;
  inline void clear_inviting_userid_list();
  static const int kInvitingUseridListFieldNumber = 2;
  inline const ::std::string& inviting_userid_list(int index) const;
  inline ::std::string* mutable_inviting_userid_list(int index);
  inline void set_inviting_userid_list(int index, const ::std::string& value);
  inline void set_inviting_userid_list(int index, const char* value);
  inline void set_inviting_userid_list(int index, const char* value, size_t size);
  inline ::std::string* add_inviting_userid_list();
  inline void add_inviting_userid_list(const ::std::string& value);
  inline void add_inviting_userid_list(const char* value);
  inline void add_inviting_userid_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& inviting_userid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_inviting_userid_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetInvitingResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::std::string> inviting_userid_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetInvitingResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetInviterRequest : public ::google::protobuf::Message {
 public:
  GetInviterRequest();
  virtual ~GetInviterRequest();
  
  GetInviterRequest(const GetInviterRequest& from);
  
  inline GetInviterRequest& operator=(const GetInviterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInviterRequest& default_instance();
  
  void Swap(GetInviterRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetInviterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetInviterRequest& from);
  void MergeFrom(const GetInviterRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetInviterRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetInviterRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetInviterResponse : public ::google::protobuf::Message {
 public:
  GetInviterResponse();
  virtual ~GetInviterResponse();
  
  GetInviterResponse(const GetInviterResponse& from);
  
  inline GetInviterResponse& operator=(const GetInviterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInviterResponse& default_instance();
  
  void Swap(GetInviterResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetInviterResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetInviterResponse& from);
  void MergeFrom(const GetInviterResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated string inviter_userid_list = 2;
  inline int inviter_userid_list_size() const;
  inline void clear_inviter_userid_list();
  static const int kInviterUseridListFieldNumber = 2;
  inline const ::std::string& inviter_userid_list(int index) const;
  inline ::std::string* mutable_inviter_userid_list(int index);
  inline void set_inviter_userid_list(int index, const ::std::string& value);
  inline void set_inviter_userid_list(int index, const char* value);
  inline void set_inviter_userid_list(int index, const char* value, size_t size);
  inline ::std::string* add_inviter_userid_list();
  inline void add_inviter_userid_list(const ::std::string& value);
  inline void add_inviter_userid_list(const char* value);
  inline void add_inviter_userid_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& inviter_userid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_inviter_userid_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetInviterResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::std::string> inviter_userid_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetInviterResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetSessionInfoRequest : public ::google::protobuf::Message {
 public:
  SetSessionInfoRequest();
  virtual ~SetSessionInfoRequest();
  
  SetSessionInfoRequest(const SetSessionInfoRequest& from);
  
  inline SetSessionInfoRequest& operator=(const SetSessionInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSessionInfoRequest& default_instance();
  
  void Swap(SetSessionInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  SetSessionInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetSessionInfoRequest& from);
  void MergeFrom(const SetSessionInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // required .SSDataDomain.SSSessionInfo session_info = 2;
  inline bool has_session_info() const;
  inline void clear_session_info();
  static const int kSessionInfoFieldNumber = 2;
  inline const ::SSDataDomain::SSSessionInfo& session_info() const;
  inline ::SSDataDomain::SSSessionInfo* mutable_session_info();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SetSessionInfoRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::SSDataDomain::SSSessionInfo* session_info_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SetSessionInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetSessionInfoResponse : public ::google::protobuf::Message {
 public:
  SetSessionInfoResponse();
  virtual ~SetSessionInfoResponse();
  
  SetSessionInfoResponse(const SetSessionInfoResponse& from);
  
  inline SetSessionInfoResponse& operator=(const SetSessionInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSessionInfoResponse& default_instance();
  
  void Swap(SetSessionInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  SetSessionInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetSessionInfoResponse& from);
  void MergeFrom(const SetSessionInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SetSessionInfoResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SetSessionInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetSessionInfoRequest : public ::google::protobuf::Message {
 public:
  GetSessionInfoRequest();
  virtual ~GetSessionInfoRequest();
  
  GetSessionInfoRequest(const GetSessionInfoRequest& from);
  
  inline GetSessionInfoRequest& operator=(const GetSessionInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSessionInfoRequest& default_instance();
  
  void Swap(GetSessionInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetSessionInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSessionInfoRequest& from);
  void MergeFrom(const GetSessionInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetSessionInfoRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetSessionInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetSessionInfoResponse : public ::google::protobuf::Message {
 public:
  GetSessionInfoResponse();
  virtual ~GetSessionInfoResponse();
  
  GetSessionInfoResponse(const GetSessionInfoResponse& from);
  
  inline GetSessionInfoResponse& operator=(const GetSessionInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSessionInfoResponse& default_instance();
  
  void Swap(GetSessionInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetSessionInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSessionInfoResponse& from);
  void MergeFrom(const GetSessionInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // optional .SSDataDomain.SSSessionInfo session_info = 2;
  inline bool has_session_info() const;
  inline void clear_session_info();
  static const int kSessionInfoFieldNumber = 2;
  inline const ::SSDataDomain::SSSessionInfo& session_info() const;
  inline ::SSDataDomain::SSSessionInfo* mutable_session_info();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetSessionInfoResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::SSDataDomain::SSSessionInfo* session_info_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetSessionInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetMessageRequest : public ::google::protobuf::Message {
 public:
  GetMessageRequest();
  virtual ~GetMessageRequest();
  
  GetMessageRequest(const GetMessageRequest& from);
  
  inline GetMessageRequest& operator=(const GetMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessageRequest& default_instance();
  
  void Swap(GetMessageRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetMessageRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMessageRequest& from);
  void MergeFrom(const GetMessageRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // required .SSDataDomain.SSBOX source_box = 2;
  inline bool has_source_box() const;
  inline void clear_source_box();
  static const int kSourceBoxFieldNumber = 2;
  inline SSDataDomain::SSBOX source_box() const;
  inline void set_source_box(SSDataDomain::SSBOX value);
  
  // optional string cursor_id = 3;
  inline bool has_cursor_id() const;
  inline void clear_cursor_id();
  static const int kCursorIdFieldNumber = 3;
  inline const ::std::string& cursor_id() const;
  inline void set_cursor_id(const ::std::string& value);
  inline void set_cursor_id(const char* value);
  inline void set_cursor_id(const char* value, size_t size);
  inline ::std::string* mutable_cursor_id();
  
  // optional int32 count = 4 [default = 100];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetMessageRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  int source_box_;
  ::std::string* cursor_id_;
  static const ::std::string _default_cursor_id_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetMessageRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetMessageResponse : public ::google::protobuf::Message {
 public:
  GetMessageResponse();
  virtual ~GetMessageResponse();
  
  GetMessageResponse(const GetMessageResponse& from);
  
  inline GetMessageResponse& operator=(const GetMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessageResponse& default_instance();
  
  void Swap(GetMessageResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetMessageResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMessageResponse& from);
  void MergeFrom(const GetMessageResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated .SSDataDomain.SSMessage msg_list = 2;
  inline int msg_list_size() const;
  inline void clear_msg_list();
  static const int kMsgListFieldNumber = 2;
  inline const ::SSDataDomain::SSMessage& msg_list(int index) const;
  inline ::SSDataDomain::SSMessage* mutable_msg_list(int index);
  inline ::SSDataDomain::SSMessage* add_msg_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessage >&
      msg_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessage >*
      mutable_msg_list();
  
  // optional bool eol = 3 [default = false];
  inline bool has_eol() const;
  inline void clear_eol();
  static const int kEolFieldNumber = 3;
  inline bool eol() const;
  inline void set_eol(bool value);
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetMessageResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessage > msg_list_;
  bool eol_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetMessageResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetMessageByTimestampRequest : public ::google::protobuf::Message {
 public:
  GetMessageByTimestampRequest();
  virtual ~GetMessageByTimestampRequest();
  
  GetMessageByTimestampRequest(const GetMessageByTimestampRequest& from);
  
  inline GetMessageByTimestampRequest& operator=(const GetMessageByTimestampRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessageByTimestampRequest& default_instance();
  
  void Swap(GetMessageByTimestampRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetMessageByTimestampRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMessageByTimestampRequest& from);
  void MergeFrom(const GetMessageByTimestampRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // required .SSDataDomain.SSBOX source_box = 2;
  inline bool has_source_box() const;
  inline void clear_source_box();
  static const int kSourceBoxFieldNumber = 2;
  inline SSDataDomain::SSBOX source_box() const;
  inline void set_source_box(SSDataDomain::SSBOX value);
  
  // optional int64 start_timestamp = 3;
  inline bool has_start_timestamp() const;
  inline void clear_start_timestamp();
  static const int kStartTimestampFieldNumber = 3;
  inline ::google::protobuf::int64 start_timestamp() const;
  inline void set_start_timestamp(::google::protobuf::int64 value);
  
  // optional int64 end_timestamp = 4;
  inline bool has_end_timestamp() const;
  inline void clear_end_timestamp();
  static const int kEndTimestampFieldNumber = 4;
  inline ::google::protobuf::int64 end_timestamp() const;
  inline void set_end_timestamp(::google::protobuf::int64 value);
  
  // optional int32 count = 5 [default = 100];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetMessageByTimestampRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  int source_box_;
  ::google::protobuf::int64 start_timestamp_;
  ::google::protobuf::int64 end_timestamp_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetMessageByTimestampRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetMessageByTimestampResponse : public ::google::protobuf::Message {
 public:
  GetMessageByTimestampResponse();
  virtual ~GetMessageByTimestampResponse();
  
  GetMessageByTimestampResponse(const GetMessageByTimestampResponse& from);
  
  inline GetMessageByTimestampResponse& operator=(const GetMessageByTimestampResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessageByTimestampResponse& default_instance();
  
  void Swap(GetMessageByTimestampResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetMessageByTimestampResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMessageByTimestampResponse& from);
  void MergeFrom(const GetMessageByTimestampResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated .SSDataDomain.SSMessage msg_list = 2;
  inline int msg_list_size() const;
  inline void clear_msg_list();
  static const int kMsgListFieldNumber = 2;
  inline const ::SSDataDomain::SSMessage& msg_list(int index) const;
  inline ::SSDataDomain::SSMessage* mutable_msg_list(int index);
  inline ::SSDataDomain::SSMessage* add_msg_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessage >&
      msg_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessage >*
      mutable_msg_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetMessageByTimestampResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessage > msg_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetMessageByTimestampResponse* default_instance_;
};
// -------------------------------------------------------------------

class SendPublicMessageRequest : public ::google::protobuf::Message {
 public:
  SendPublicMessageRequest();
  virtual ~SendPublicMessageRequest();
  
  SendPublicMessageRequest(const SendPublicMessageRequest& from);
  
  inline SendPublicMessageRequest& operator=(const SendPublicMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendPublicMessageRequest& default_instance();
  
  void Swap(SendPublicMessageRequest* other);
  
  // implements Message ----------------------------------------------
  
  SendPublicMessageRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendPublicMessageRequest& from);
  void MergeFrom(const SendPublicMessageRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.SSMessage msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::SSDataDomain::SSMessage& msg() const;
  inline ::SSDataDomain::SSMessage* mutable_msg();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SendPublicMessageRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::SSMessage* msg_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SendPublicMessageRequest* default_instance_;
};
// -------------------------------------------------------------------

class SendPublicMessageResponse : public ::google::protobuf::Message {
 public:
  SendPublicMessageResponse();
  virtual ~SendPublicMessageResponse();
  
  SendPublicMessageResponse(const SendPublicMessageResponse& from);
  
  inline SendPublicMessageResponse& operator=(const SendPublicMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendPublicMessageResponse& default_instance();
  
  void Swap(SendPublicMessageResponse* other);
  
  // implements Message ----------------------------------------------
  
  SendPublicMessageResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendPublicMessageResponse& from);
  void MergeFrom(const SendPublicMessageResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // required string msgid = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  inline const ::std::string& msgid() const;
  inline void set_msgid(const ::std::string& value);
  inline void set_msgid(const char* value);
  inline void set_msgid(const char* value, size_t size);
  inline ::std::string* mutable_msgid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SendPublicMessageResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::std::string* msgid_;
  static const ::std::string _default_msgid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SendPublicMessageResponse* default_instance_;
};
// -------------------------------------------------------------------

class SendMessageRequest : public ::google::protobuf::Message {
 public:
  SendMessageRequest();
  virtual ~SendMessageRequest();
  
  SendMessageRequest(const SendMessageRequest& from);
  
  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessageRequest& default_instance();
  
  void Swap(SendMessageRequest* other);
  
  // implements Message ----------------------------------------------
  
  SendMessageRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMessageRequest& from);
  void MergeFrom(const SendMessageRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.SSMessage msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::SSDataDomain::SSMessage& msg() const;
  inline ::SSDataDomain::SSMessage* mutable_msg();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SendMessageRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::SSMessage* msg_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SendMessageRequest* default_instance_;
};
// -------------------------------------------------------------------

class SendMessageResponse : public ::google::protobuf::Message {
 public:
  SendMessageResponse();
  virtual ~SendMessageResponse();
  
  SendMessageResponse(const SendMessageResponse& from);
  
  inline SendMessageResponse& operator=(const SendMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessageResponse& default_instance();
  
  void Swap(SendMessageResponse* other);
  
  // implements Message ----------------------------------------------
  
  SendMessageResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMessageResponse& from);
  void MergeFrom(const SendMessageResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // required string msgid = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  inline const ::std::string& msgid() const;
  inline void set_msgid(const ::std::string& value);
  inline void set_msgid(const char* value);
  inline void set_msgid(const char* value, size_t size);
  inline ::std::string* mutable_msgid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.SendMessageResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::std::string* msgid_;
  static const ::std::string _default_msgid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SendMessageResponse* default_instance_;
};
// -------------------------------------------------------------------

class AddFavoriteMessageRequest : public ::google::protobuf::Message {
 public:
  AddFavoriteMessageRequest();
  virtual ~AddFavoriteMessageRequest();
  
  AddFavoriteMessageRequest(const AddFavoriteMessageRequest& from);
  
  inline AddFavoriteMessageRequest& operator=(const AddFavoriteMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFavoriteMessageRequest& default_instance();
  
  void Swap(AddFavoriteMessageRequest* other);
  
  // implements Message ----------------------------------------------
  
  AddFavoriteMessageRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFavoriteMessageRequest& from);
  void MergeFrom(const AddFavoriteMessageRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.SSMessage msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::SSDataDomain::SSMessage& msg() const;
  inline ::SSDataDomain::SSMessage* mutable_msg();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.AddFavoriteMessageRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::SSMessage* msg_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AddFavoriteMessageRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddFavoriteMessageResponse : public ::google::protobuf::Message {
 public:
  AddFavoriteMessageResponse();
  virtual ~AddFavoriteMessageResponse();
  
  AddFavoriteMessageResponse(const AddFavoriteMessageResponse& from);
  
  inline AddFavoriteMessageResponse& operator=(const AddFavoriteMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFavoriteMessageResponse& default_instance();
  
  void Swap(AddFavoriteMessageResponse* other);
  
  // implements Message ----------------------------------------------
  
  AddFavoriteMessageResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFavoriteMessageResponse& from);
  void MergeFrom(const AddFavoriteMessageResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // required string msgid = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  inline const ::std::string& msgid() const;
  inline void set_msgid(const ::std::string& value);
  inline void set_msgid(const char* value);
  inline void set_msgid(const char* value, size_t size);
  inline ::std::string* mutable_msgid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.AddFavoriteMessageResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::std::string* msgid_;
  static const ::std::string _default_msgid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AddFavoriteMessageResponse* default_instance_;
};
// -------------------------------------------------------------------

class AddContactRequest : public ::google::protobuf::Message {
 public:
  AddContactRequest();
  virtual ~AddContactRequest();
  
  AddContactRequest(const AddContactRequest& from);
  
  inline AddContactRequest& operator=(const AddContactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddContactRequest& default_instance();
  
  void Swap(AddContactRequest* other);
  
  // implements Message ----------------------------------------------
  
  AddContactRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddContactRequest& from);
  void MergeFrom(const AddContactRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // repeated .SSDataDomain.SSContact contact_list = 2;
  inline int contact_list_size() const;
  inline void clear_contact_list();
  static const int kContactListFieldNumber = 2;
  inline const ::SSDataDomain::SSContact& contact_list(int index) const;
  inline ::SSDataDomain::SSContact* mutable_contact_list(int index);
  inline ::SSDataDomain::SSContact* add_contact_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContact >&
      contact_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContact >*
      mutable_contact_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.AddContactRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContact > contact_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AddContactRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddContactResponse : public ::google::protobuf::Message {
 public:
  AddContactResponse();
  virtual ~AddContactResponse();
  
  AddContactResponse(const AddContactResponse& from);
  
  inline AddContactResponse& operator=(const AddContactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddContactResponse& default_instance();
  
  void Swap(AddContactResponse* other);
  
  // implements Message ----------------------------------------------
  
  AddContactResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddContactResponse& from);
  void MergeFrom(const AddContactResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.AddContactResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AddContactResponse* default_instance_;
};
// -------------------------------------------------------------------

class RemoveContactRequest : public ::google::protobuf::Message {
 public:
  RemoveContactRequest();
  virtual ~RemoveContactRequest();
  
  RemoveContactRequest(const RemoveContactRequest& from);
  
  inline RemoveContactRequest& operator=(const RemoveContactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveContactRequest& default_instance();
  
  void Swap(RemoveContactRequest* other);
  
  // implements Message ----------------------------------------------
  
  RemoveContactRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveContactRequest& from);
  void MergeFrom(const RemoveContactRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // repeated string contactid_list = 2;
  inline int contactid_list_size() const;
  inline void clear_contactid_list();
  static const int kContactidListFieldNumber = 2;
  inline const ::std::string& contactid_list(int index) const;
  inline ::std::string* mutable_contactid_list(int index);
  inline void set_contactid_list(int index, const ::std::string& value);
  inline void set_contactid_list(int index, const char* value);
  inline void set_contactid_list(int index, const char* value, size_t size);
  inline ::std::string* add_contactid_list();
  inline void add_contactid_list(const ::std::string& value);
  inline void add_contactid_list(const char* value);
  inline void add_contactid_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& contactid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_contactid_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.RemoveContactRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> contactid_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RemoveContactRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemoveContactResponse : public ::google::protobuf::Message {
 public:
  RemoveContactResponse();
  virtual ~RemoveContactResponse();
  
  RemoveContactResponse(const RemoveContactResponse& from);
  
  inline RemoveContactResponse& operator=(const RemoveContactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveContactResponse& default_instance();
  
  void Swap(RemoveContactResponse* other);
  
  // implements Message ----------------------------------------------
  
  RemoveContactResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveContactResponse& from);
  void MergeFrom(const RemoveContactResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.RemoveContactResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RemoveContactResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetContactRequest : public ::google::protobuf::Message {
 public:
  GetContactRequest();
  virtual ~GetContactRequest();
  
  GetContactRequest(const GetContactRequest& from);
  
  inline GetContactRequest& operator=(const GetContactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContactRequest& default_instance();
  
  void Swap(GetContactRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetContactRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetContactRequest& from);
  void MergeFrom(const GetContactRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetContactRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetContactRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetContactResponse : public ::google::protobuf::Message {
 public:
  GetContactResponse();
  virtual ~GetContactResponse();
  
  GetContactResponse(const GetContactResponse& from);
  
  inline GetContactResponse& operator=(const GetContactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContactResponse& default_instance();
  
  void Swap(GetContactResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetContactResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetContactResponse& from);
  void MergeFrom(const GetContactResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated .SSDataDomain.SSContact contact_list = 2;
  inline int contact_list_size() const;
  inline void clear_contact_list();
  static const int kContactListFieldNumber = 2;
  inline const ::SSDataDomain::SSContact& contact_list(int index) const;
  inline ::SSDataDomain::SSContact* mutable_contact_list(int index);
  inline ::SSDataDomain::SSContact* add_contact_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContact >&
      contact_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContact >*
      mutable_contact_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetContactResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContact > contact_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetContactResponse* default_instance_;
};
// -------------------------------------------------------------------

class AddGroupRequest : public ::google::protobuf::Message {
 public:
  AddGroupRequest();
  virtual ~AddGroupRequest();
  
  AddGroupRequest(const AddGroupRequest& from);
  
  inline AddGroupRequest& operator=(const AddGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddGroupRequest& default_instance();
  
  void Swap(AddGroupRequest* other);
  
  // implements Message ----------------------------------------------
  
  AddGroupRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddGroupRequest& from);
  void MergeFrom(const AddGroupRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // repeated .SSDataDomain.SSGroup group_list = 2;
  inline int group_list_size() const;
  inline void clear_group_list();
  static const int kGroupListFieldNumber = 2;
  inline const ::SSDataDomain::SSGroup& group_list(int index) const;
  inline ::SSDataDomain::SSGroup* mutable_group_list(int index);
  inline ::SSDataDomain::SSGroup* add_group_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSGroup >&
      group_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSGroup >*
      mutable_group_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.AddGroupRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSGroup > group_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AddGroupRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddGroupResponse : public ::google::protobuf::Message {
 public:
  AddGroupResponse();
  virtual ~AddGroupResponse();
  
  AddGroupResponse(const AddGroupResponse& from);
  
  inline AddGroupResponse& operator=(const AddGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddGroupResponse& default_instance();
  
  void Swap(AddGroupResponse* other);
  
  // implements Message ----------------------------------------------
  
  AddGroupResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddGroupResponse& from);
  void MergeFrom(const AddGroupResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.AddGroupResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AddGroupResponse* default_instance_;
};
// -------------------------------------------------------------------

class RemoveGroupRequest : public ::google::protobuf::Message {
 public:
  RemoveGroupRequest();
  virtual ~RemoveGroupRequest();
  
  RemoveGroupRequest(const RemoveGroupRequest& from);
  
  inline RemoveGroupRequest& operator=(const RemoveGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveGroupRequest& default_instance();
  
  void Swap(RemoveGroupRequest* other);
  
  // implements Message ----------------------------------------------
  
  RemoveGroupRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveGroupRequest& from);
  void MergeFrom(const RemoveGroupRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // repeated string groupid_list = 2;
  inline int groupid_list_size() const;
  inline void clear_groupid_list();
  static const int kGroupidListFieldNumber = 2;
  inline const ::std::string& groupid_list(int index) const;
  inline ::std::string* mutable_groupid_list(int index);
  inline void set_groupid_list(int index, const ::std::string& value);
  inline void set_groupid_list(int index, const char* value);
  inline void set_groupid_list(int index, const char* value, size_t size);
  inline ::std::string* add_groupid_list();
  inline void add_groupid_list(const ::std::string& value);
  inline void add_groupid_list(const char* value);
  inline void add_groupid_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& groupid_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_groupid_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.RemoveGroupRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> groupid_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RemoveGroupRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemoveGroupResponse : public ::google::protobuf::Message {
 public:
  RemoveGroupResponse();
  virtual ~RemoveGroupResponse();
  
  RemoveGroupResponse(const RemoveGroupResponse& from);
  
  inline RemoveGroupResponse& operator=(const RemoveGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveGroupResponse& default_instance();
  
  void Swap(RemoveGroupResponse* other);
  
  // implements Message ----------------------------------------------
  
  RemoveGroupResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveGroupResponse& from);
  void MergeFrom(const RemoveGroupResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.RemoveGroupResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RemoveGroupResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetGroupRequest : public ::google::protobuf::Message {
 public:
  GetGroupRequest();
  virtual ~GetGroupRequest();
  
  GetGroupRequest(const GetGroupRequest& from);
  
  inline GetGroupRequest& operator=(const GetGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGroupRequest& default_instance();
  
  void Swap(GetGroupRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetGroupRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGroupRequest& from);
  void MergeFrom(const GetGroupRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetGroupRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetGroupRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetGroupResponse : public ::google::protobuf::Message {
 public:
  GetGroupResponse();
  virtual ~GetGroupResponse();
  
  GetGroupResponse(const GetGroupResponse& from);
  
  inline GetGroupResponse& operator=(const GetGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGroupResponse& default_instance();
  
  void Swap(GetGroupResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetGroupResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGroupResponse& from);
  void MergeFrom(const GetGroupResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated .SSDataDomain.SSGroup group_list = 2;
  inline int group_list_size() const;
  inline void clear_group_list();
  static const int kGroupListFieldNumber = 2;
  inline const ::SSDataDomain::SSGroup& group_list(int index) const;
  inline ::SSDataDomain::SSGroup* mutable_group_list(int index);
  inline ::SSDataDomain::SSGroup* add_group_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSGroup >&
      group_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSGroup >*
      mutable_group_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetGroupResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSGroup > group_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetGroupResponse* default_instance_;
};
// -------------------------------------------------------------------

class AddMemberRequest : public ::google::protobuf::Message {
 public:
  AddMemberRequest();
  virtual ~AddMemberRequest();
  
  AddMemberRequest(const AddMemberRequest& from);
  
  inline AddMemberRequest& operator=(const AddMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMemberRequest& default_instance();
  
  void Swap(AddMemberRequest* other);
  
  // implements Message ----------------------------------------------
  
  AddMemberRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMemberRequest& from);
  void MergeFrom(const AddMemberRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // repeated .SSDataDomain.SSMember member_list = 2;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 2;
  inline const ::SSDataDomain::SSMember& member_list(int index) const;
  inline ::SSDataDomain::SSMember* mutable_member_list(int index);
  inline ::SSDataDomain::SSMember* add_member_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember >&
      member_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember >*
      mutable_member_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.AddMemberRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember > member_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AddMemberRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddMemberResponse : public ::google::protobuf::Message {
 public:
  AddMemberResponse();
  virtual ~AddMemberResponse();
  
  AddMemberResponse(const AddMemberResponse& from);
  
  inline AddMemberResponse& operator=(const AddMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMemberResponse& default_instance();
  
  void Swap(AddMemberResponse* other);
  
  // implements Message ----------------------------------------------
  
  AddMemberResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMemberResponse& from);
  void MergeFrom(const AddMemberResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.AddMemberResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AddMemberResponse* default_instance_;
};
// -------------------------------------------------------------------

class RemoveMemberRequest : public ::google::protobuf::Message {
 public:
  RemoveMemberRequest();
  virtual ~RemoveMemberRequest();
  
  RemoveMemberRequest(const RemoveMemberRequest& from);
  
  inline RemoveMemberRequest& operator=(const RemoveMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveMemberRequest& default_instance();
  
  void Swap(RemoveMemberRequest* other);
  
  // implements Message ----------------------------------------------
  
  RemoveMemberRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveMemberRequest& from);
  void MergeFrom(const RemoveMemberRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // repeated .SSDataDomain.SSMember member_list = 2;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 2;
  inline const ::SSDataDomain::SSMember& member_list(int index) const;
  inline ::SSDataDomain::SSMember* mutable_member_list(int index);
  inline ::SSDataDomain::SSMember* add_member_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember >&
      member_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember >*
      mutable_member_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.RemoveMemberRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember > member_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RemoveMemberRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemoveMemberResponse : public ::google::protobuf::Message {
 public:
  RemoveMemberResponse();
  virtual ~RemoveMemberResponse();
  
  RemoveMemberResponse(const RemoveMemberResponse& from);
  
  inline RemoveMemberResponse& operator=(const RemoveMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveMemberResponse& default_instance();
  
  void Swap(RemoveMemberResponse* other);
  
  // implements Message ----------------------------------------------
  
  RemoveMemberResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveMemberResponse& from);
  void MergeFrom(const RemoveMemberResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.RemoveMemberResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RemoveMemberResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetMemberRequest : public ::google::protobuf::Message {
 public:
  GetMemberRequest();
  virtual ~GetMemberRequest();
  
  GetMemberRequest(const GetMemberRequest& from);
  
  inline GetMemberRequest& operator=(const GetMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMemberRequest& default_instance();
  
  void Swap(GetMemberRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetMemberRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMemberRequest& from);
  void MergeFrom(const GetMemberRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetMemberRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetMemberRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetMemberResponse : public ::google::protobuf::Message {
 public:
  GetMemberResponse();
  virtual ~GetMemberResponse();
  
  GetMemberResponse(const GetMemberResponse& from);
  
  inline GetMemberResponse& operator=(const GetMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMemberResponse& default_instance();
  
  void Swap(GetMemberResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetMemberResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMemberResponse& from);
  void MergeFrom(const GetMemberResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated .SSDataDomain.SSMember member_list = 2;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 2;
  inline const ::SSDataDomain::SSMember& member_list(int index) const;
  inline ::SSDataDomain::SSMember* mutable_member_list(int index);
  inline ::SSDataDomain::SSMember* add_member_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember >&
      member_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember >*
      mutable_member_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetMemberResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember > member_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetMemberResponse* default_instance_;
};
// -------------------------------------------------------------------

class QueryAndUpdateRequest : public ::google::protobuf::Message {
 public:
  QueryAndUpdateRequest();
  virtual ~QueryAndUpdateRequest();
  
  QueryAndUpdateRequest(const QueryAndUpdateRequest& from);
  
  inline QueryAndUpdateRequest& operator=(const QueryAndUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAndUpdateRequest& default_instance();
  
  void Swap(QueryAndUpdateRequest* other);
  
  // implements Message ----------------------------------------------
  
  QueryAndUpdateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAndUpdateRequest& from);
  void MergeFrom(const QueryAndUpdateRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  
  // optional bytes update_value = 2;
  inline bool has_update_value() const;
  inline void clear_update_value();
  static const int kUpdateValueFieldNumber = 2;
  inline const ::std::string& update_value() const;
  inline void set_update_value(const ::std::string& value);
  inline void set_update_value(const char* value);
  inline void set_update_value(const void* value, size_t size);
  inline ::std::string* mutable_update_value();
  
  // optional bool is_update = 3 [default = false];
  inline bool has_is_update() const;
  inline void clear_is_update();
  static const int kIsUpdateFieldNumber = 3;
  inline bool is_update() const;
  inline void set_is_update(bool value);
  
  // optional int32 consistency_level = 4;
  inline bool has_consistency_level() const;
  inline void clear_consistency_level();
  static const int kConsistencyLevelFieldNumber = 4;
  inline ::google::protobuf::int32 consistency_level() const;
  inline void set_consistency_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.QueryAndUpdateRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* update_value_;
  static const ::std::string _default_update_value_;
  bool is_update_;
  ::google::protobuf::int32 consistency_level_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QueryAndUpdateRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryAndUpdateResponse : public ::google::protobuf::Message {
 public:
  QueryAndUpdateResponse();
  virtual ~QueryAndUpdateResponse();
  
  QueryAndUpdateResponse(const QueryAndUpdateResponse& from);
  
  inline QueryAndUpdateResponse& operator=(const QueryAndUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAndUpdateResponse& default_instance();
  
  void Swap(QueryAndUpdateResponse* other);
  
  // implements Message ----------------------------------------------
  
  QueryAndUpdateResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAndUpdateResponse& from);
  void MergeFrom(const QueryAndUpdateResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.QueryAndUpdateResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QueryAndUpdateResponse* default_instance_;
};
// -------------------------------------------------------------------

class QueryAndDeleteRequest : public ::google::protobuf::Message {
 public:
  QueryAndDeleteRequest();
  virtual ~QueryAndDeleteRequest();
  
  QueryAndDeleteRequest(const QueryAndDeleteRequest& from);
  
  inline QueryAndDeleteRequest& operator=(const QueryAndDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAndDeleteRequest& default_instance();
  
  void Swap(QueryAndDeleteRequest* other);
  
  // implements Message ----------------------------------------------
  
  QueryAndDeleteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAndDeleteRequest& from);
  void MergeFrom(const QueryAndDeleteRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.QueryAndDeleteRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QueryAndDeleteRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryAndDeleteResponse : public ::google::protobuf::Message {
 public:
  QueryAndDeleteResponse();
  virtual ~QueryAndDeleteResponse();
  
  QueryAndDeleteResponse(const QueryAndDeleteResponse& from);
  
  inline QueryAndDeleteResponse& operator=(const QueryAndDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAndDeleteResponse& default_instance();
  
  void Swap(QueryAndDeleteResponse* other);
  
  // implements Message ----------------------------------------------
  
  QueryAndDeleteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAndDeleteResponse& from);
  void MergeFrom(const QueryAndDeleteResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.QueryAndDeleteResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QueryAndDeleteResponse* default_instance_;
};
// -------------------------------------------------------------------

class AddLogicNodeSubscribeInfoRequest : public ::google::protobuf::Message {
 public:
  AddLogicNodeSubscribeInfoRequest();
  virtual ~AddLogicNodeSubscribeInfoRequest();
  
  AddLogicNodeSubscribeInfoRequest(const AddLogicNodeSubscribeInfoRequest& from);
  
  inline AddLogicNodeSubscribeInfoRequest& operator=(const AddLogicNodeSubscribeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddLogicNodeSubscribeInfoRequest& default_instance();
  
  void Swap(AddLogicNodeSubscribeInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  AddLogicNodeSubscribeInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddLogicNodeSubscribeInfoRequest& from);
  void MergeFrom(const AddLogicNodeSubscribeInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // repeated string logic_node_list = 2;
  inline int logic_node_list_size() const;
  inline void clear_logic_node_list();
  static const int kLogicNodeListFieldNumber = 2;
  inline const ::std::string& logic_node_list(int index) const;
  inline ::std::string* mutable_logic_node_list(int index);
  inline void set_logic_node_list(int index, const ::std::string& value);
  inline void set_logic_node_list(int index, const char* value);
  inline void set_logic_node_list(int index, const char* value, size_t size);
  inline ::std::string* add_logic_node_list();
  inline void add_logic_node_list(const ::std::string& value);
  inline void add_logic_node_list(const char* value);
  inline void add_logic_node_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& logic_node_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_logic_node_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.AddLogicNodeSubscribeInfoRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> logic_node_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AddLogicNodeSubscribeInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddLogicNodeSubscribeInfoResponse : public ::google::protobuf::Message {
 public:
  AddLogicNodeSubscribeInfoResponse();
  virtual ~AddLogicNodeSubscribeInfoResponse();
  
  AddLogicNodeSubscribeInfoResponse(const AddLogicNodeSubscribeInfoResponse& from);
  
  inline AddLogicNodeSubscribeInfoResponse& operator=(const AddLogicNodeSubscribeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddLogicNodeSubscribeInfoResponse& default_instance();
  
  void Swap(AddLogicNodeSubscribeInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  AddLogicNodeSubscribeInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddLogicNodeSubscribeInfoResponse& from);
  void MergeFrom(const AddLogicNodeSubscribeInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.AddLogicNodeSubscribeInfoResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AddLogicNodeSubscribeInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class RemoveLogicNodeSubscribeInfoRequest : public ::google::protobuf::Message {
 public:
  RemoveLogicNodeSubscribeInfoRequest();
  virtual ~RemoveLogicNodeSubscribeInfoRequest();
  
  RemoveLogicNodeSubscribeInfoRequest(const RemoveLogicNodeSubscribeInfoRequest& from);
  
  inline RemoveLogicNodeSubscribeInfoRequest& operator=(const RemoveLogicNodeSubscribeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveLogicNodeSubscribeInfoRequest& default_instance();
  
  void Swap(RemoveLogicNodeSubscribeInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  RemoveLogicNodeSubscribeInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveLogicNodeSubscribeInfoRequest& from);
  void MergeFrom(const RemoveLogicNodeSubscribeInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // repeated string logic_node_list = 2;
  inline int logic_node_list_size() const;
  inline void clear_logic_node_list();
  static const int kLogicNodeListFieldNumber = 2;
  inline const ::std::string& logic_node_list(int index) const;
  inline ::std::string* mutable_logic_node_list(int index);
  inline void set_logic_node_list(int index, const ::std::string& value);
  inline void set_logic_node_list(int index, const char* value);
  inline void set_logic_node_list(int index, const char* value, size_t size);
  inline ::std::string* add_logic_node_list();
  inline void add_logic_node_list(const ::std::string& value);
  inline void add_logic_node_list(const char* value);
  inline void add_logic_node_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& logic_node_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_logic_node_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.RemoveLogicNodeSubscribeInfoRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> logic_node_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RemoveLogicNodeSubscribeInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemoveLogicNodeSubscribeInfoResponse : public ::google::protobuf::Message {
 public:
  RemoveLogicNodeSubscribeInfoResponse();
  virtual ~RemoveLogicNodeSubscribeInfoResponse();
  
  RemoveLogicNodeSubscribeInfoResponse(const RemoveLogicNodeSubscribeInfoResponse& from);
  
  inline RemoveLogicNodeSubscribeInfoResponse& operator=(const RemoveLogicNodeSubscribeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveLogicNodeSubscribeInfoResponse& default_instance();
  
  void Swap(RemoveLogicNodeSubscribeInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  RemoveLogicNodeSubscribeInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveLogicNodeSubscribeInfoResponse& from);
  void MergeFrom(const RemoveLogicNodeSubscribeInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.RemoveLogicNodeSubscribeInfoResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RemoveLogicNodeSubscribeInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetLogicNodeSubscribeInfoRequest : public ::google::protobuf::Message {
 public:
  GetLogicNodeSubscribeInfoRequest();
  virtual ~GetLogicNodeSubscribeInfoRequest();
  
  GetLogicNodeSubscribeInfoRequest(const GetLogicNodeSubscribeInfoRequest& from);
  
  inline GetLogicNodeSubscribeInfoRequest& operator=(const GetLogicNodeSubscribeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLogicNodeSubscribeInfoRequest& default_instance();
  
  void Swap(GetLogicNodeSubscribeInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetLogicNodeSubscribeInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLogicNodeSubscribeInfoRequest& from);
  void MergeFrom(const GetLogicNodeSubscribeInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetLogicNodeSubscribeInfoRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetLogicNodeSubscribeInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetLogicNodeSubscribeInfoResponse : public ::google::protobuf::Message {
 public:
  GetLogicNodeSubscribeInfoResponse();
  virtual ~GetLogicNodeSubscribeInfoResponse();
  
  GetLogicNodeSubscribeInfoResponse(const GetLogicNodeSubscribeInfoResponse& from);
  
  inline GetLogicNodeSubscribeInfoResponse& operator=(const GetLogicNodeSubscribeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLogicNodeSubscribeInfoResponse& default_instance();
  
  void Swap(GetLogicNodeSubscribeInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetLogicNodeSubscribeInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLogicNodeSubscribeInfoResponse& from);
  void MergeFrom(const GetLogicNodeSubscribeInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated string logic_node_list = 2;
  inline int logic_node_list_size() const;
  inline void clear_logic_node_list();
  static const int kLogicNodeListFieldNumber = 2;
  inline const ::std::string& logic_node_list(int index) const;
  inline ::std::string* mutable_logic_node_list(int index);
  inline void set_logic_node_list(int index, const ::std::string& value);
  inline void set_logic_node_list(int index, const char* value);
  inline void set_logic_node_list(int index, const char* value, size_t size);
  inline ::std::string* add_logic_node_list();
  inline void add_logic_node_list(const ::std::string& value);
  inline void add_logic_node_list(const char* value);
  inline void add_logic_node_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& logic_node_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_logic_node_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetLogicNodeSubscribeInfoResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::std::string> logic_node_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetLogicNodeSubscribeInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetFollowerWithProfileRequest : public ::google::protobuf::Message {
 public:
  GetFollowerWithProfileRequest();
  virtual ~GetFollowerWithProfileRequest();
  
  GetFollowerWithProfileRequest(const GetFollowerWithProfileRequest& from);
  
  inline GetFollowerWithProfileRequest& operator=(const GetFollowerWithProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFollowerWithProfileRequest& default_instance();
  
  void Swap(GetFollowerWithProfileRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetFollowerWithProfileRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFollowerWithProfileRequest& from);
  void MergeFrom(const GetFollowerWithProfileRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // optional string cursor_id = 2;
  inline bool has_cursor_id() const;
  inline void clear_cursor_id();
  static const int kCursorIdFieldNumber = 2;
  inline const ::std::string& cursor_id() const;
  inline void set_cursor_id(const ::std::string& value);
  inline void set_cursor_id(const char* value);
  inline void set_cursor_id(const char* value, size_t size);
  inline ::std::string* mutable_cursor_id();
  
  // optional int32 count = 3 [default = 100];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // optional bool exclude_icon = 4 [default = true];
  inline bool has_exclude_icon() const;
  inline void clear_exclude_icon();
  static const int kExcludeIconFieldNumber = 4;
  inline bool exclude_icon() const;
  inline void set_exclude_icon(bool value);
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetFollowerWithProfileRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  ::std::string* cursor_id_;
  static const ::std::string _default_cursor_id_;
  ::google::protobuf::int32 count_;
  bool exclude_icon_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetFollowerWithProfileRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetFollowerWithProfileResponse : public ::google::protobuf::Message {
 public:
  GetFollowerWithProfileResponse();
  virtual ~GetFollowerWithProfileResponse();
  
  GetFollowerWithProfileResponse(const GetFollowerWithProfileResponse& from);
  
  inline GetFollowerWithProfileResponse& operator=(const GetFollowerWithProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFollowerWithProfileResponse& default_instance();
  
  void Swap(GetFollowerWithProfileResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetFollowerWithProfileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFollowerWithProfileResponse& from);
  void MergeFrom(const GetFollowerWithProfileResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated .SSDataDomain.SSProfile follower_list = 2;
  inline int follower_list_size() const;
  inline void clear_follower_list();
  static const int kFollowerListFieldNumber = 2;
  inline const ::SSDataDomain::SSProfile& follower_list(int index) const;
  inline ::SSDataDomain::SSProfile* mutable_follower_list(int index);
  inline ::SSDataDomain::SSProfile* add_follower_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile >&
      follower_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile >*
      mutable_follower_list();
  
  // optional bool eol = 3 [default = false];
  inline bool has_eol() const;
  inline void clear_eol();
  static const int kEolFieldNumber = 3;
  inline bool eol() const;
  inline void set_eol(bool value);
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetFollowerWithProfileResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile > follower_list_;
  bool eol_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetFollowerWithProfileResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetFollowingWithProfileRequest : public ::google::protobuf::Message {
 public:
  GetFollowingWithProfileRequest();
  virtual ~GetFollowingWithProfileRequest();
  
  GetFollowingWithProfileRequest(const GetFollowingWithProfileRequest& from);
  
  inline GetFollowingWithProfileRequest& operator=(const GetFollowingWithProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFollowingWithProfileRequest& default_instance();
  
  void Swap(GetFollowingWithProfileRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetFollowingWithProfileRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFollowingWithProfileRequest& from);
  void MergeFrom(const GetFollowingWithProfileRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // optional bool exclude_icon = 2 [default = true];
  inline bool has_exclude_icon() const;
  inline void clear_exclude_icon();
  static const int kExcludeIconFieldNumber = 2;
  inline bool exclude_icon() const;
  inline void set_exclude_icon(bool value);
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetFollowingWithProfileRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  bool exclude_icon_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetFollowingWithProfileRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetFollowingWithProfileResponse : public ::google::protobuf::Message {
 public:
  GetFollowingWithProfileResponse();
  virtual ~GetFollowingWithProfileResponse();
  
  GetFollowingWithProfileResponse(const GetFollowingWithProfileResponse& from);
  
  inline GetFollowingWithProfileResponse& operator=(const GetFollowingWithProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFollowingWithProfileResponse& default_instance();
  
  void Swap(GetFollowingWithProfileResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetFollowingWithProfileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFollowingWithProfileResponse& from);
  void MergeFrom(const GetFollowingWithProfileResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated .SSDataDomain.SSProfile following_list = 2;
  inline int following_list_size() const;
  inline void clear_following_list();
  static const int kFollowingListFieldNumber = 2;
  inline const ::SSDataDomain::SSProfile& following_list(int index) const;
  inline ::SSDataDomain::SSProfile* mutable_following_list(int index);
  inline ::SSDataDomain::SSProfile* add_following_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile >&
      following_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile >*
      mutable_following_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetFollowingWithProfileResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile > following_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetFollowingWithProfileResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetContactExRequest : public ::google::protobuf::Message {
 public:
  GetContactExRequest();
  virtual ~GetContactExRequest();
  
  GetContactExRequest(const GetContactExRequest& from);
  
  inline GetContactExRequest& operator=(const GetContactExRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContactExRequest& default_instance();
  
  void Swap(GetContactExRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetContactExRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetContactExRequest& from);
  void MergeFrom(const GetContactExRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetContactExRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* userid_;
  static const ::std::string _default_userid_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetContactExRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetContactExResponse : public ::google::protobuf::Message {
 public:
  GetContactExResponse();
  virtual ~GetContactExResponse();
  
  GetContactExResponse(const GetContactExResponse& from);
  
  inline GetContactExResponse& operator=(const GetContactExResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContactExResponse& default_instance();
  
  void Swap(GetContactExResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetContactExResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetContactExResponse& from);
  void MergeFrom(const GetContactExResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .SSDataDomain.ServiceResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::SSDataDomain::ServiceResult& result() const;
  inline ::SSDataDomain::ServiceResult* mutable_result();
  
  // repeated .SSDataDomain.SSContactEx contact_ex_list = 2;
  inline int contact_ex_list_size() const;
  inline void clear_contact_ex_list();
  static const int kContactExListFieldNumber = 2;
  inline const ::SSDataDomain::SSContactEx& contact_ex_list(int index) const;
  inline ::SSDataDomain::SSContactEx* mutable_contact_ex_list(int index);
  inline ::SSDataDomain::SSContactEx* add_contact_ex_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContactEx >&
      contact_ex_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContactEx >*
      mutable_contact_ex_list();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.GetContactExResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::SSDataDomain::ServiceResult* result_;
  ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContactEx > contact_ex_list_;
  friend void  protobuf_AddDesc_ssdatadomain_2eproto();
  friend void protobuf_AssignDesc_ssdatadomain_2eproto();
  friend void protobuf_ShutdownFile_ssdatadomain_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetContactExResponse* default_instance_;
};
// ===================================================================

class SSDataDomainSvc_Stub;

class SSDataDomainSvc : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SSDataDomainSvc() {};
 public:
  virtual ~SSDataDomainSvc();
  
  typedef SSDataDomainSvc_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void CreateAccount(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::CreateAccountRequest* request,
                       ::SSDataDomain::CreateAccountResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAccount(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetAccountRequest* request,
                       ::SSDataDomain::GetAccountResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ChangePassword(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::ChangePasswordRequest* request,
                       ::SSDataDomain::ChangePasswordResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void UserExist(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::UserExistRequest* request,
                       ::SSDataDomain::UserExistResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SetProfile(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::SetProfileRequest* request,
                       ::SSDataDomain::SetProfileResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetProfile(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetProfileRequest* request,
                       ::SSDataDomain::GetProfileResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Follow(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::FollowRequest* request,
                       ::SSDataDomain::FollowResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CancelFollow(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::CancelFollowRequest* request,
                       ::SSDataDomain::CancelFollowResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFollowing(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetFollowingRequest* request,
                       ::SSDataDomain::GetFollowingResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFollowerCount(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetFollowerCountRequest* request,
                       ::SSDataDomain::GetFollowerCountResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFollower(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetFollowerRequest* request,
                       ::SSDataDomain::GetFollowerResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Invite(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::InviteRequest* request,
                       ::SSDataDomain::InviteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetInviting(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetInvitingRequest* request,
                       ::SSDataDomain::GetInvitingResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetInviter(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetInviterRequest* request,
                       ::SSDataDomain::GetInviterResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SetSessionInfo(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::SetSessionInfoRequest* request,
                       ::SSDataDomain::SetSessionInfoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetSessionInfo(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetSessionInfoRequest* request,
                       ::SSDataDomain::GetSessionInfoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMessage(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetMessageRequest* request,
                       ::SSDataDomain::GetMessageResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMessageByTimestamp(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetMessageByTimestampRequest* request,
                       ::SSDataDomain::GetMessageByTimestampResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SendPublicMessage(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::SendPublicMessageRequest* request,
                       ::SSDataDomain::SendPublicMessageResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SendMessage(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::SendMessageRequest* request,
                       ::SSDataDomain::SendMessageResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddFavoriteMessage(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::AddFavoriteMessageRequest* request,
                       ::SSDataDomain::AddFavoriteMessageResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddContact(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::AddContactRequest* request,
                       ::SSDataDomain::AddContactResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveContact(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::RemoveContactRequest* request,
                       ::SSDataDomain::RemoveContactResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetContact(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetContactRequest* request,
                       ::SSDataDomain::GetContactResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddGroup(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::AddGroupRequest* request,
                       ::SSDataDomain::AddGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveGroup(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::RemoveGroupRequest* request,
                       ::SSDataDomain::RemoveGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGroup(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetGroupRequest* request,
                       ::SSDataDomain::GetGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddMember(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::AddMemberRequest* request,
                       ::SSDataDomain::AddMemberResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveMember(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::RemoveMemberRequest* request,
                       ::SSDataDomain::RemoveMemberResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMember(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetMemberRequest* request,
                       ::SSDataDomain::GetMemberResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryAndUpdate(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::QueryAndUpdateRequest* request,
                       ::SSDataDomain::QueryAndUpdateResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryAndDelete(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::QueryAndDeleteRequest* request,
                       ::SSDataDomain::QueryAndDeleteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddLogicNodeSubscribeInfo(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::AddLogicNodeSubscribeInfoRequest* request,
                       ::SSDataDomain::AddLogicNodeSubscribeInfoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveLogicNodeSubscribeInfo(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::RemoveLogicNodeSubscribeInfoRequest* request,
                       ::SSDataDomain::RemoveLogicNodeSubscribeInfoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetLogicNodeSubscribeInfo(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetLogicNodeSubscribeInfoRequest* request,
                       ::SSDataDomain::GetLogicNodeSubscribeInfoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFollowingWithProfile(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetFollowingWithProfileRequest* request,
                       ::SSDataDomain::GetFollowingWithProfileResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFollowerWithProfile(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetFollowerWithProfileRequest* request,
                       ::SSDataDomain::GetFollowerWithProfileResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetContactEx(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetContactExRequest* request,
                       ::SSDataDomain::GetContactExResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SSDataDomainSvc);
};

class SSDataDomainSvc_Stub : public SSDataDomainSvc {
 public:
  SSDataDomainSvc_Stub(::google::protobuf::RpcChannel* channel);
  SSDataDomainSvc_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~SSDataDomainSvc_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements SSDataDomainSvc ------------------------------------------
  
  void CreateAccount(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::CreateAccountRequest* request,
                       ::SSDataDomain::CreateAccountResponse* response,
                       ::google::protobuf::Closure* done);
  void GetAccount(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetAccountRequest* request,
                       ::SSDataDomain::GetAccountResponse* response,
                       ::google::protobuf::Closure* done);
  void ChangePassword(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::ChangePasswordRequest* request,
                       ::SSDataDomain::ChangePasswordResponse* response,
                       ::google::protobuf::Closure* done);
  void UserExist(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::UserExistRequest* request,
                       ::SSDataDomain::UserExistResponse* response,
                       ::google::protobuf::Closure* done);
  void SetProfile(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::SetProfileRequest* request,
                       ::SSDataDomain::SetProfileResponse* response,
                       ::google::protobuf::Closure* done);
  void GetProfile(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetProfileRequest* request,
                       ::SSDataDomain::GetProfileResponse* response,
                       ::google::protobuf::Closure* done);
  void Follow(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::FollowRequest* request,
                       ::SSDataDomain::FollowResponse* response,
                       ::google::protobuf::Closure* done);
  void CancelFollow(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::CancelFollowRequest* request,
                       ::SSDataDomain::CancelFollowResponse* response,
                       ::google::protobuf::Closure* done);
  void GetFollowing(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetFollowingRequest* request,
                       ::SSDataDomain::GetFollowingResponse* response,
                       ::google::protobuf::Closure* done);
  void GetFollowerCount(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetFollowerCountRequest* request,
                       ::SSDataDomain::GetFollowerCountResponse* response,
                       ::google::protobuf::Closure* done);
  void GetFollower(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetFollowerRequest* request,
                       ::SSDataDomain::GetFollowerResponse* response,
                       ::google::protobuf::Closure* done);
  void Invite(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::InviteRequest* request,
                       ::SSDataDomain::InviteResponse* response,
                       ::google::protobuf::Closure* done);
  void GetInviting(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetInvitingRequest* request,
                       ::SSDataDomain::GetInvitingResponse* response,
                       ::google::protobuf::Closure* done);
  void GetInviter(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetInviterRequest* request,
                       ::SSDataDomain::GetInviterResponse* response,
                       ::google::protobuf::Closure* done);
  void SetSessionInfo(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::SetSessionInfoRequest* request,
                       ::SSDataDomain::SetSessionInfoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetSessionInfo(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetSessionInfoRequest* request,
                       ::SSDataDomain::GetSessionInfoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetMessage(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetMessageRequest* request,
                       ::SSDataDomain::GetMessageResponse* response,
                       ::google::protobuf::Closure* done);
  void GetMessageByTimestamp(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetMessageByTimestampRequest* request,
                       ::SSDataDomain::GetMessageByTimestampResponse* response,
                       ::google::protobuf::Closure* done);
  void SendPublicMessage(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::SendPublicMessageRequest* request,
                       ::SSDataDomain::SendPublicMessageResponse* response,
                       ::google::protobuf::Closure* done);
  void SendMessage(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::SendMessageRequest* request,
                       ::SSDataDomain::SendMessageResponse* response,
                       ::google::protobuf::Closure* done);
  void AddFavoriteMessage(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::AddFavoriteMessageRequest* request,
                       ::SSDataDomain::AddFavoriteMessageResponse* response,
                       ::google::protobuf::Closure* done);
  void AddContact(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::AddContactRequest* request,
                       ::SSDataDomain::AddContactResponse* response,
                       ::google::protobuf::Closure* done);
  void RemoveContact(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::RemoveContactRequest* request,
                       ::SSDataDomain::RemoveContactResponse* response,
                       ::google::protobuf::Closure* done);
  void GetContact(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetContactRequest* request,
                       ::SSDataDomain::GetContactResponse* response,
                       ::google::protobuf::Closure* done);
  void AddGroup(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::AddGroupRequest* request,
                       ::SSDataDomain::AddGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void RemoveGroup(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::RemoveGroupRequest* request,
                       ::SSDataDomain::RemoveGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void GetGroup(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetGroupRequest* request,
                       ::SSDataDomain::GetGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void AddMember(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::AddMemberRequest* request,
                       ::SSDataDomain::AddMemberResponse* response,
                       ::google::protobuf::Closure* done);
  void RemoveMember(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::RemoveMemberRequest* request,
                       ::SSDataDomain::RemoveMemberResponse* response,
                       ::google::protobuf::Closure* done);
  void GetMember(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetMemberRequest* request,
                       ::SSDataDomain::GetMemberResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryAndUpdate(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::QueryAndUpdateRequest* request,
                       ::SSDataDomain::QueryAndUpdateResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryAndDelete(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::QueryAndDeleteRequest* request,
                       ::SSDataDomain::QueryAndDeleteResponse* response,
                       ::google::protobuf::Closure* done);
  void AddLogicNodeSubscribeInfo(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::AddLogicNodeSubscribeInfoRequest* request,
                       ::SSDataDomain::AddLogicNodeSubscribeInfoResponse* response,
                       ::google::protobuf::Closure* done);
  void RemoveLogicNodeSubscribeInfo(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::RemoveLogicNodeSubscribeInfoRequest* request,
                       ::SSDataDomain::RemoveLogicNodeSubscribeInfoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetLogicNodeSubscribeInfo(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetLogicNodeSubscribeInfoRequest* request,
                       ::SSDataDomain::GetLogicNodeSubscribeInfoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetFollowingWithProfile(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetFollowingWithProfileRequest* request,
                       ::SSDataDomain::GetFollowingWithProfileResponse* response,
                       ::google::protobuf::Closure* done);
  void GetFollowerWithProfile(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetFollowerWithProfileRequest* request,
                       ::SSDataDomain::GetFollowerWithProfileResponse* response,
                       ::google::protobuf::Closure* done);
  void GetContactEx(::google::protobuf::RpcController* controller,
                       const ::SSDataDomain::GetContactExRequest* request,
                       ::SSDataDomain::GetContactExResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SSDataDomainSvc_Stub);
};


// ===================================================================


// ===================================================================

// SSAccount

// required string userid = 1;
inline bool SSAccount::has_userid() const {
  return _has_bit(0);
}
inline void SSAccount::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SSAccount::userid() const {
  return *userid_;
}
inline void SSAccount::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SSAccount::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SSAccount::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSAccount::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// required string password = 2;
inline bool SSAccount::has_password() const {
  return _has_bit(1);
}
inline void SSAccount::clear_password() {
  if (password_ != &_default_password_) {
    password_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SSAccount::password() const {
  return *password_;
}
inline void SSAccount::set_password(const ::std::string& value) {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SSAccount::set_password(const char* value) {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SSAccount::set_password(const char* value, size_t size) {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSAccount::mutable_password() {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  return password_;
}

// required string email = 3;
inline bool SSAccount::has_email() const {
  return _has_bit(2);
}
inline void SSAccount::clear_email() {
  if (email_ != &_default_email_) {
    email_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& SSAccount::email() const {
  return *email_;
}
inline void SSAccount::set_email(const ::std::string& value) {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void SSAccount::set_email(const char* value) {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void SSAccount::set_email(const char* value, size_t size) {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSAccount::mutable_email() {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  return email_;
}

// optional bytes binary = 100;
inline bool SSAccount::has_binary() const {
  return _has_bit(3);
}
inline void SSAccount::clear_binary() {
  if (binary_ != &_default_binary_) {
    binary_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& SSAccount::binary() const {
  return *binary_;
}
inline void SSAccount::set_binary(const ::std::string& value) {
  _set_bit(3);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void SSAccount::set_binary(const char* value) {
  _set_bit(3);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void SSAccount::set_binary(const void* value, size_t size) {
  _set_bit(3);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSAccount::mutable_binary() {
  _set_bit(3);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  return binary_;
}

// -------------------------------------------------------------------

// SSProfile

// required string userid = 1;
inline bool SSProfile::has_userid() const {
  return _has_bit(0);
}
inline void SSProfile::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SSProfile::userid() const {
  return *userid_;
}
inline void SSProfile::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SSProfile::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SSProfile::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSProfile::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// optional string nickname = 2;
inline bool SSProfile::has_nickname() const {
  return _has_bit(1);
}
inline void SSProfile::clear_nickname() {
  if (nickname_ != &_default_nickname_) {
    nickname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SSProfile::nickname() const {
  return *nickname_;
}
inline void SSProfile::set_nickname(const ::std::string& value) {
  _set_bit(1);
  if (nickname_ == &_default_nickname_) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SSProfile::set_nickname(const char* value) {
  _set_bit(1);
  if (nickname_ == &_default_nickname_) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SSProfile::set_nickname(const char* value, size_t size) {
  _set_bit(1);
  if (nickname_ == &_default_nickname_) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSProfile::mutable_nickname() {
  _set_bit(1);
  if (nickname_ == &_default_nickname_) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}

// optional int32 age = 3;
inline bool SSProfile::has_age() const {
  return _has_bit(2);
}
inline void SSProfile::clear_age() {
  age_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SSProfile::age() const {
  return age_;
}
inline void SSProfile::set_age(::google::protobuf::int32 value) {
  _set_bit(2);
  age_ = value;
}

// optional .SSDataDomain.SSGender gender = 4;
inline bool SSProfile::has_gender() const {
  return _has_bit(3);
}
inline void SSProfile::clear_gender() {
  gender_ = 0;
  _clear_bit(3);
}
inline SSDataDomain::SSGender SSProfile::gender() const {
  return static_cast< SSDataDomain::SSGender >(gender_);
}
inline void SSProfile::set_gender(SSDataDomain::SSGender value) {
  GOOGLE_DCHECK(SSDataDomain::SSGender_IsValid(value));
  _set_bit(3);
  gender_ = value;
}

// optional bytes icon = 5;
inline bool SSProfile::has_icon() const {
  return _has_bit(4);
}
inline void SSProfile::clear_icon() {
  if (icon_ != &_default_icon_) {
    icon_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& SSProfile::icon() const {
  return *icon_;
}
inline void SSProfile::set_icon(const ::std::string& value) {
  _set_bit(4);
  if (icon_ == &_default_icon_) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void SSProfile::set_icon(const char* value) {
  _set_bit(4);
  if (icon_ == &_default_icon_) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void SSProfile::set_icon(const void* value, size_t size) {
  _set_bit(4);
  if (icon_ == &_default_icon_) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSProfile::mutable_icon() {
  _set_bit(4);
  if (icon_ == &_default_icon_) {
    icon_ = new ::std::string;
  }
  return icon_;
}

// optional string icon_name = 6 [default = "default.jpg"];
inline bool SSProfile::has_icon_name() const {
  return _has_bit(5);
}
inline void SSProfile::clear_icon_name() {
  if (icon_name_ != &_default_icon_name_) {
    icon_name_->assign(_default_icon_name_);
  }
  _clear_bit(5);
}
inline const ::std::string& SSProfile::icon_name() const {
  return *icon_name_;
}
inline void SSProfile::set_icon_name(const ::std::string& value) {
  _set_bit(5);
  if (icon_name_ == &_default_icon_name_) {
    icon_name_ = new ::std::string;
  }
  icon_name_->assign(value);
}
inline void SSProfile::set_icon_name(const char* value) {
  _set_bit(5);
  if (icon_name_ == &_default_icon_name_) {
    icon_name_ = new ::std::string;
  }
  icon_name_->assign(value);
}
inline void SSProfile::set_icon_name(const char* value, size_t size) {
  _set_bit(5);
  if (icon_name_ == &_default_icon_name_) {
    icon_name_ = new ::std::string;
  }
  icon_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSProfile::mutable_icon_name() {
  _set_bit(5);
  if (icon_name_ == &_default_icon_name_) {
    icon_name_ = new ::std::string(_default_icon_name_);
  }
  return icon_name_;
}

// optional string introduction = 9;
inline bool SSProfile::has_introduction() const {
  return _has_bit(6);
}
inline void SSProfile::clear_introduction() {
  if (introduction_ != &_default_introduction_) {
    introduction_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& SSProfile::introduction() const {
  return *introduction_;
}
inline void SSProfile::set_introduction(const ::std::string& value) {
  _set_bit(6);
  if (introduction_ == &_default_introduction_) {
    introduction_ = new ::std::string;
  }
  introduction_->assign(value);
}
inline void SSProfile::set_introduction(const char* value) {
  _set_bit(6);
  if (introduction_ == &_default_introduction_) {
    introduction_ = new ::std::string;
  }
  introduction_->assign(value);
}
inline void SSProfile::set_introduction(const char* value, size_t size) {
  _set_bit(6);
  if (introduction_ == &_default_introduction_) {
    introduction_ = new ::std::string;
  }
  introduction_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSProfile::mutable_introduction() {
  _set_bit(6);
  if (introduction_ == &_default_introduction_) {
    introduction_ = new ::std::string;
  }
  return introduction_;
}

// optional bytes binary = 100;
inline bool SSProfile::has_binary() const {
  return _has_bit(7);
}
inline void SSProfile::clear_binary() {
  if (binary_ != &_default_binary_) {
    binary_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& SSProfile::binary() const {
  return *binary_;
}
inline void SSProfile::set_binary(const ::std::string& value) {
  _set_bit(7);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void SSProfile::set_binary(const char* value) {
  _set_bit(7);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void SSProfile::set_binary(const void* value, size_t size) {
  _set_bit(7);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSProfile::mutable_binary() {
  _set_bit(7);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  return binary_;
}

// -------------------------------------------------------------------

// SSContact

// required string contactid = 1;
inline bool SSContact::has_contactid() const {
  return _has_bit(0);
}
inline void SSContact::clear_contactid() {
  if (contactid_ != &_default_contactid_) {
    contactid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SSContact::contactid() const {
  return *contactid_;
}
inline void SSContact::set_contactid(const ::std::string& value) {
  _set_bit(0);
  if (contactid_ == &_default_contactid_) {
    contactid_ = new ::std::string;
  }
  contactid_->assign(value);
}
inline void SSContact::set_contactid(const char* value) {
  _set_bit(0);
  if (contactid_ == &_default_contactid_) {
    contactid_ = new ::std::string;
  }
  contactid_->assign(value);
}
inline void SSContact::set_contactid(const char* value, size_t size) {
  _set_bit(0);
  if (contactid_ == &_default_contactid_) {
    contactid_ = new ::std::string;
  }
  contactid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSContact::mutable_contactid() {
  _set_bit(0);
  if (contactid_ == &_default_contactid_) {
    contactid_ = new ::std::string;
  }
  return contactid_;
}

// optional string email = 2;
inline bool SSContact::has_email() const {
  return _has_bit(1);
}
inline void SSContact::clear_email() {
  if (email_ != &_default_email_) {
    email_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SSContact::email() const {
  return *email_;
}
inline void SSContact::set_email(const ::std::string& value) {
  _set_bit(1);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void SSContact::set_email(const char* value) {
  _set_bit(1);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void SSContact::set_email(const char* value, size_t size) {
  _set_bit(1);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSContact::mutable_email() {
  _set_bit(1);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  return email_;
}

// optional string userid = 3;
inline bool SSContact::has_userid() const {
  return _has_bit(2);
}
inline void SSContact::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& SSContact::userid() const {
  return *userid_;
}
inline void SSContact::set_userid(const ::std::string& value) {
  _set_bit(2);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SSContact::set_userid(const char* value) {
  _set_bit(2);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SSContact::set_userid(const char* value, size_t size) {
  _set_bit(2);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSContact::mutable_userid() {
  _set_bit(2);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// optional string alias_nickname = 4;
inline bool SSContact::has_alias_nickname() const {
  return _has_bit(3);
}
inline void SSContact::clear_alias_nickname() {
  if (alias_nickname_ != &_default_alias_nickname_) {
    alias_nickname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& SSContact::alias_nickname() const {
  return *alias_nickname_;
}
inline void SSContact::set_alias_nickname(const ::std::string& value) {
  _set_bit(3);
  if (alias_nickname_ == &_default_alias_nickname_) {
    alias_nickname_ = new ::std::string;
  }
  alias_nickname_->assign(value);
}
inline void SSContact::set_alias_nickname(const char* value) {
  _set_bit(3);
  if (alias_nickname_ == &_default_alias_nickname_) {
    alias_nickname_ = new ::std::string;
  }
  alias_nickname_->assign(value);
}
inline void SSContact::set_alias_nickname(const char* value, size_t size) {
  _set_bit(3);
  if (alias_nickname_ == &_default_alias_nickname_) {
    alias_nickname_ = new ::std::string;
  }
  alias_nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSContact::mutable_alias_nickname() {
  _set_bit(3);
  if (alias_nickname_ == &_default_alias_nickname_) {
    alias_nickname_ = new ::std::string;
  }
  return alias_nickname_;
}

// optional bytes binary = 100;
inline bool SSContact::has_binary() const {
  return _has_bit(4);
}
inline void SSContact::clear_binary() {
  if (binary_ != &_default_binary_) {
    binary_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& SSContact::binary() const {
  return *binary_;
}
inline void SSContact::set_binary(const ::std::string& value) {
  _set_bit(4);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void SSContact::set_binary(const char* value) {
  _set_bit(4);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void SSContact::set_binary(const void* value, size_t size) {
  _set_bit(4);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSContact::mutable_binary() {
  _set_bit(4);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  return binary_;
}

// -------------------------------------------------------------------

// SSContactEx

// required string contactid = 1;
inline bool SSContactEx::has_contactid() const {
  return _has_bit(0);
}
inline void SSContactEx::clear_contactid() {
  if (contactid_ != &_default_contactid_) {
    contactid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SSContactEx::contactid() const {
  return *contactid_;
}
inline void SSContactEx::set_contactid(const ::std::string& value) {
  _set_bit(0);
  if (contactid_ == &_default_contactid_) {
    contactid_ = new ::std::string;
  }
  contactid_->assign(value);
}
inline void SSContactEx::set_contactid(const char* value) {
  _set_bit(0);
  if (contactid_ == &_default_contactid_) {
    contactid_ = new ::std::string;
  }
  contactid_->assign(value);
}
inline void SSContactEx::set_contactid(const char* value, size_t size) {
  _set_bit(0);
  if (contactid_ == &_default_contactid_) {
    contactid_ = new ::std::string;
  }
  contactid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSContactEx::mutable_contactid() {
  _set_bit(0);
  if (contactid_ == &_default_contactid_) {
    contactid_ = new ::std::string;
  }
  return contactid_;
}

// optional int32 is_member = 2;
inline bool SSContactEx::has_is_member() const {
  return _has_bit(1);
}
inline void SSContactEx::clear_is_member() {
  is_member_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SSContactEx::is_member() const {
  return is_member_;
}
inline void SSContactEx::set_is_member(::google::protobuf::int32 value) {
  _set_bit(1);
  is_member_ = value;
}

// optional int32 is_following = 3;
inline bool SSContactEx::has_is_following() const {
  return _has_bit(2);
}
inline void SSContactEx::clear_is_following() {
  is_following_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SSContactEx::is_following() const {
  return is_following_;
}
inline void SSContactEx::set_is_following(::google::protobuf::int32 value) {
  _set_bit(2);
  is_following_ = value;
}

// optional string email = 4;
inline bool SSContactEx::has_email() const {
  return _has_bit(3);
}
inline void SSContactEx::clear_email() {
  if (email_ != &_default_email_) {
    email_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& SSContactEx::email() const {
  return *email_;
}
inline void SSContactEx::set_email(const ::std::string& value) {
  _set_bit(3);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void SSContactEx::set_email(const char* value) {
  _set_bit(3);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void SSContactEx::set_email(const char* value, size_t size) {
  _set_bit(3);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSContactEx::mutable_email() {
  _set_bit(3);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  return email_;
}

// optional string userid = 5;
inline bool SSContactEx::has_userid() const {
  return _has_bit(4);
}
inline void SSContactEx::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& SSContactEx::userid() const {
  return *userid_;
}
inline void SSContactEx::set_userid(const ::std::string& value) {
  _set_bit(4);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SSContactEx::set_userid(const char* value) {
  _set_bit(4);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SSContactEx::set_userid(const char* value, size_t size) {
  _set_bit(4);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSContactEx::mutable_userid() {
  _set_bit(4);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// optional string alias_nickname = 6;
inline bool SSContactEx::has_alias_nickname() const {
  return _has_bit(5);
}
inline void SSContactEx::clear_alias_nickname() {
  if (alias_nickname_ != &_default_alias_nickname_) {
    alias_nickname_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& SSContactEx::alias_nickname() const {
  return *alias_nickname_;
}
inline void SSContactEx::set_alias_nickname(const ::std::string& value) {
  _set_bit(5);
  if (alias_nickname_ == &_default_alias_nickname_) {
    alias_nickname_ = new ::std::string;
  }
  alias_nickname_->assign(value);
}
inline void SSContactEx::set_alias_nickname(const char* value) {
  _set_bit(5);
  if (alias_nickname_ == &_default_alias_nickname_) {
    alias_nickname_ = new ::std::string;
  }
  alias_nickname_->assign(value);
}
inline void SSContactEx::set_alias_nickname(const char* value, size_t size) {
  _set_bit(5);
  if (alias_nickname_ == &_default_alias_nickname_) {
    alias_nickname_ = new ::std::string;
  }
  alias_nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSContactEx::mutable_alias_nickname() {
  _set_bit(5);
  if (alias_nickname_ == &_default_alias_nickname_) {
    alias_nickname_ = new ::std::string;
  }
  return alias_nickname_;
}

// optional string nickname = 7;
inline bool SSContactEx::has_nickname() const {
  return _has_bit(6);
}
inline void SSContactEx::clear_nickname() {
  if (nickname_ != &_default_nickname_) {
    nickname_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& SSContactEx::nickname() const {
  return *nickname_;
}
inline void SSContactEx::set_nickname(const ::std::string& value) {
  _set_bit(6);
  if (nickname_ == &_default_nickname_) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SSContactEx::set_nickname(const char* value) {
  _set_bit(6);
  if (nickname_ == &_default_nickname_) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SSContactEx::set_nickname(const char* value, size_t size) {
  _set_bit(6);
  if (nickname_ == &_default_nickname_) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSContactEx::mutable_nickname() {
  _set_bit(6);
  if (nickname_ == &_default_nickname_) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}

// optional string remark = 8;
inline bool SSContactEx::has_remark() const {
  return _has_bit(7);
}
inline void SSContactEx::clear_remark() {
  if (remark_ != &_default_remark_) {
    remark_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& SSContactEx::remark() const {
  return *remark_;
}
inline void SSContactEx::set_remark(const ::std::string& value) {
  _set_bit(7);
  if (remark_ == &_default_remark_) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void SSContactEx::set_remark(const char* value) {
  _set_bit(7);
  if (remark_ == &_default_remark_) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void SSContactEx::set_remark(const char* value, size_t size) {
  _set_bit(7);
  if (remark_ == &_default_remark_) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSContactEx::mutable_remark() {
  _set_bit(7);
  if (remark_ == &_default_remark_) {
    remark_ = new ::std::string;
  }
  return remark_;
}

// optional .SSDataDomain.SSGender gender = 9;
inline bool SSContactEx::has_gender() const {
  return _has_bit(8);
}
inline void SSContactEx::clear_gender() {
  gender_ = 0;
  _clear_bit(8);
}
inline SSDataDomain::SSGender SSContactEx::gender() const {
  return static_cast< SSDataDomain::SSGender >(gender_);
}
inline void SSContactEx::set_gender(SSDataDomain::SSGender value) {
  GOOGLE_DCHECK(SSDataDomain::SSGender_IsValid(value));
  _set_bit(8);
  gender_ = value;
}

// optional int32 age = 10;
inline bool SSContactEx::has_age() const {
  return _has_bit(9);
}
inline void SSContactEx::clear_age() {
  age_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 SSContactEx::age() const {
  return age_;
}
inline void SSContactEx::set_age(::google::protobuf::int32 value) {
  _set_bit(9);
  age_ = value;
}

// optional string icon_name = 11;
inline bool SSContactEx::has_icon_name() const {
  return _has_bit(10);
}
inline void SSContactEx::clear_icon_name() {
  if (icon_name_ != &_default_icon_name_) {
    icon_name_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& SSContactEx::icon_name() const {
  return *icon_name_;
}
inline void SSContactEx::set_icon_name(const ::std::string& value) {
  _set_bit(10);
  if (icon_name_ == &_default_icon_name_) {
    icon_name_ = new ::std::string;
  }
  icon_name_->assign(value);
}
inline void SSContactEx::set_icon_name(const char* value) {
  _set_bit(10);
  if (icon_name_ == &_default_icon_name_) {
    icon_name_ = new ::std::string;
  }
  icon_name_->assign(value);
}
inline void SSContactEx::set_icon_name(const char* value, size_t size) {
  _set_bit(10);
  if (icon_name_ == &_default_icon_name_) {
    icon_name_ = new ::std::string;
  }
  icon_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSContactEx::mutable_icon_name() {
  _set_bit(10);
  if (icon_name_ == &_default_icon_name_) {
    icon_name_ = new ::std::string;
  }
  return icon_name_;
}

// optional string introduction = 12;
inline bool SSContactEx::has_introduction() const {
  return _has_bit(11);
}
inline void SSContactEx::clear_introduction() {
  if (introduction_ != &_default_introduction_) {
    introduction_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& SSContactEx::introduction() const {
  return *introduction_;
}
inline void SSContactEx::set_introduction(const ::std::string& value) {
  _set_bit(11);
  if (introduction_ == &_default_introduction_) {
    introduction_ = new ::std::string;
  }
  introduction_->assign(value);
}
inline void SSContactEx::set_introduction(const char* value) {
  _set_bit(11);
  if (introduction_ == &_default_introduction_) {
    introduction_ = new ::std::string;
  }
  introduction_->assign(value);
}
inline void SSContactEx::set_introduction(const char* value, size_t size) {
  _set_bit(11);
  if (introduction_ == &_default_introduction_) {
    introduction_ = new ::std::string;
  }
  introduction_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSContactEx::mutable_introduction() {
  _set_bit(11);
  if (introduction_ == &_default_introduction_) {
    introduction_ = new ::std::string;
  }
  return introduction_;
}

// -------------------------------------------------------------------

// SSGroup

// required string groupid = 1;
inline bool SSGroup::has_groupid() const {
  return _has_bit(0);
}
inline void SSGroup::clear_groupid() {
  if (groupid_ != &_default_groupid_) {
    groupid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SSGroup::groupid() const {
  return *groupid_;
}
inline void SSGroup::set_groupid(const ::std::string& value) {
  _set_bit(0);
  if (groupid_ == &_default_groupid_) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void SSGroup::set_groupid(const char* value) {
  _set_bit(0);
  if (groupid_ == &_default_groupid_) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void SSGroup::set_groupid(const char* value, size_t size) {
  _set_bit(0);
  if (groupid_ == &_default_groupid_) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSGroup::mutable_groupid() {
  _set_bit(0);
  if (groupid_ == &_default_groupid_) {
    groupid_ = new ::std::string;
  }
  return groupid_;
}

// optional string name = 2;
inline bool SSGroup::has_name() const {
  return _has_bit(1);
}
inline void SSGroup::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SSGroup::name() const {
  return *name_;
}
inline void SSGroup::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SSGroup::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SSGroup::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSGroup::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional bool system = 3;
inline bool SSGroup::has_system() const {
  return _has_bit(2);
}
inline void SSGroup::clear_system() {
  system_ = false;
  _clear_bit(2);
}
inline bool SSGroup::system() const {
  return system_;
}
inline void SSGroup::set_system(bool value) {
  _set_bit(2);
  system_ = value;
}

// optional bytes binary = 100;
inline bool SSGroup::has_binary() const {
  return _has_bit(3);
}
inline void SSGroup::clear_binary() {
  if (binary_ != &_default_binary_) {
    binary_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& SSGroup::binary() const {
  return *binary_;
}
inline void SSGroup::set_binary(const ::std::string& value) {
  _set_bit(3);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void SSGroup::set_binary(const char* value) {
  _set_bit(3);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void SSGroup::set_binary(const void* value, size_t size) {
  _set_bit(3);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSGroup::mutable_binary() {
  _set_bit(3);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  return binary_;
}

// -------------------------------------------------------------------

// SSMember

// required string groupid = 1;
inline bool SSMember::has_groupid() const {
  return _has_bit(0);
}
inline void SSMember::clear_groupid() {
  if (groupid_ != &_default_groupid_) {
    groupid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SSMember::groupid() const {
  return *groupid_;
}
inline void SSMember::set_groupid(const ::std::string& value) {
  _set_bit(0);
  if (groupid_ == &_default_groupid_) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void SSMember::set_groupid(const char* value) {
  _set_bit(0);
  if (groupid_ == &_default_groupid_) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void SSMember::set_groupid(const char* value, size_t size) {
  _set_bit(0);
  if (groupid_ == &_default_groupid_) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSMember::mutable_groupid() {
  _set_bit(0);
  if (groupid_ == &_default_groupid_) {
    groupid_ = new ::std::string;
  }
  return groupid_;
}

// repeated string members = 2;
inline int SSMember::members_size() const {
  return members_.size();
}
inline void SSMember::clear_members() {
  members_.Clear();
}
inline const ::std::string& SSMember::members(int index) const {
  return members_.Get(index);
}
inline ::std::string* SSMember::mutable_members(int index) {
  return members_.Mutable(index);
}
inline void SSMember::set_members(int index, const ::std::string& value) {
  members_.Mutable(index)->assign(value);
}
inline void SSMember::set_members(int index, const char* value) {
  members_.Mutable(index)->assign(value);
}
inline void SSMember::set_members(int index, const char* value, size_t size) {
  members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSMember::add_members() {
  return members_.Add();
}
inline void SSMember::add_members(const ::std::string& value) {
  members_.Add()->assign(value);
}
inline void SSMember::add_members(const char* value) {
  members_.Add()->assign(value);
}
inline void SSMember::add_members(const char* value, size_t size) {
  members_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SSMember::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SSMember::mutable_members() {
  return &members_;
}

// -------------------------------------------------------------------

// SSClientState

// optional int64 last_send_time = 1;
inline bool SSClientState::has_last_send_time() const {
  return _has_bit(0);
}
inline void SSClientState::clear_last_send_time() {
  last_send_time_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 SSClientState::last_send_time() const {
  return last_send_time_;
}
inline void SSClientState::set_last_send_time(::google::protobuf::int64 value) {
  _set_bit(0);
  last_send_time_ = value;
}

// optional string last_recieved_message = 2;
inline bool SSClientState::has_last_recieved_message() const {
  return _has_bit(1);
}
inline void SSClientState::clear_last_recieved_message() {
  if (last_recieved_message_ != &_default_last_recieved_message_) {
    last_recieved_message_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SSClientState::last_recieved_message() const {
  return *last_recieved_message_;
}
inline void SSClientState::set_last_recieved_message(const ::std::string& value) {
  _set_bit(1);
  if (last_recieved_message_ == &_default_last_recieved_message_) {
    last_recieved_message_ = new ::std::string;
  }
  last_recieved_message_->assign(value);
}
inline void SSClientState::set_last_recieved_message(const char* value) {
  _set_bit(1);
  if (last_recieved_message_ == &_default_last_recieved_message_) {
    last_recieved_message_ = new ::std::string;
  }
  last_recieved_message_->assign(value);
}
inline void SSClientState::set_last_recieved_message(const char* value, size_t size) {
  _set_bit(1);
  if (last_recieved_message_ == &_default_last_recieved_message_) {
    last_recieved_message_ = new ::std::string;
  }
  last_recieved_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSClientState::mutable_last_recieved_message() {
  _set_bit(1);
  if (last_recieved_message_ == &_default_last_recieved_message_) {
    last_recieved_message_ = new ::std::string;
  }
  return last_recieved_message_;
}

// optional int64 last_fetch_time = 3;
inline bool SSClientState::has_last_fetch_time() const {
  return _has_bit(2);
}
inline void SSClientState::clear_last_fetch_time() {
  last_fetch_time_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 SSClientState::last_fetch_time() const {
  return last_fetch_time_;
}
inline void SSClientState::set_last_fetch_time(::google::protobuf::int64 value) {
  _set_bit(2);
  last_fetch_time_ = value;
}

// optional int32 last_seq_number = 4;
inline bool SSClientState::has_last_seq_number() const {
  return _has_bit(3);
}
inline void SSClientState::clear_last_seq_number() {
  last_seq_number_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 SSClientState::last_seq_number() const {
  return last_seq_number_;
}
inline void SSClientState::set_last_seq_number(::google::protobuf::int32 value) {
  _set_bit(3);
  last_seq_number_ = value;
}

// optional int64 last_logout_time = 5;
inline bool SSClientState::has_last_logout_time() const {
  return _has_bit(4);
}
inline void SSClientState::clear_last_logout_time() {
  last_logout_time_ = GOOGLE_LONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::int64 SSClientState::last_logout_time() const {
  return last_logout_time_;
}
inline void SSClientState::set_last_logout_time(::google::protobuf::int64 value) {
  _set_bit(4);
  last_logout_time_ = value;
}

// optional string last_client_identifier = 6;
inline bool SSClientState::has_last_client_identifier() const {
  return _has_bit(5);
}
inline void SSClientState::clear_last_client_identifier() {
  if (last_client_identifier_ != &_default_last_client_identifier_) {
    last_client_identifier_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& SSClientState::last_client_identifier() const {
  return *last_client_identifier_;
}
inline void SSClientState::set_last_client_identifier(const ::std::string& value) {
  _set_bit(5);
  if (last_client_identifier_ == &_default_last_client_identifier_) {
    last_client_identifier_ = new ::std::string;
  }
  last_client_identifier_->assign(value);
}
inline void SSClientState::set_last_client_identifier(const char* value) {
  _set_bit(5);
  if (last_client_identifier_ == &_default_last_client_identifier_) {
    last_client_identifier_ = new ::std::string;
  }
  last_client_identifier_->assign(value);
}
inline void SSClientState::set_last_client_identifier(const char* value, size_t size) {
  _set_bit(5);
  if (last_client_identifier_ == &_default_last_client_identifier_) {
    last_client_identifier_ = new ::std::string;
  }
  last_client_identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSClientState::mutable_last_client_identifier() {
  _set_bit(5);
  if (last_client_identifier_ == &_default_last_client_identifier_) {
    last_client_identifier_ = new ::std::string;
  }
  return last_client_identifier_;
}

// optional string sc_last_user_time = 7;
inline bool SSClientState::has_sc_last_user_time() const {
  return _has_bit(6);
}
inline void SSClientState::clear_sc_last_user_time() {
  if (sc_last_user_time_ != &_default_sc_last_user_time_) {
    sc_last_user_time_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& SSClientState::sc_last_user_time() const {
  return *sc_last_user_time_;
}
inline void SSClientState::set_sc_last_user_time(const ::std::string& value) {
  _set_bit(6);
  if (sc_last_user_time_ == &_default_sc_last_user_time_) {
    sc_last_user_time_ = new ::std::string;
  }
  sc_last_user_time_->assign(value);
}
inline void SSClientState::set_sc_last_user_time(const char* value) {
  _set_bit(6);
  if (sc_last_user_time_ == &_default_sc_last_user_time_) {
    sc_last_user_time_ = new ::std::string;
  }
  sc_last_user_time_->assign(value);
}
inline void SSClientState::set_sc_last_user_time(const char* value, size_t size) {
  _set_bit(6);
  if (sc_last_user_time_ == &_default_sc_last_user_time_) {
    sc_last_user_time_ = new ::std::string;
  }
  sc_last_user_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSClientState::mutable_sc_last_user_time() {
  _set_bit(6);
  if (sc_last_user_time_ == &_default_sc_last_user_time_) {
    sc_last_user_time_ = new ::std::string;
  }
  return sc_last_user_time_;
}

// optional string sc_last_group_time = 8;
inline bool SSClientState::has_sc_last_group_time() const {
  return _has_bit(7);
}
inline void SSClientState::clear_sc_last_group_time() {
  if (sc_last_group_time_ != &_default_sc_last_group_time_) {
    sc_last_group_time_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& SSClientState::sc_last_group_time() const {
  return *sc_last_group_time_;
}
inline void SSClientState::set_sc_last_group_time(const ::std::string& value) {
  _set_bit(7);
  if (sc_last_group_time_ == &_default_sc_last_group_time_) {
    sc_last_group_time_ = new ::std::string;
  }
  sc_last_group_time_->assign(value);
}
inline void SSClientState::set_sc_last_group_time(const char* value) {
  _set_bit(7);
  if (sc_last_group_time_ == &_default_sc_last_group_time_) {
    sc_last_group_time_ = new ::std::string;
  }
  sc_last_group_time_->assign(value);
}
inline void SSClientState::set_sc_last_group_time(const char* value, size_t size) {
  _set_bit(7);
  if (sc_last_group_time_ == &_default_sc_last_group_time_) {
    sc_last_group_time_ = new ::std::string;
  }
  sc_last_group_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSClientState::mutable_sc_last_group_time() {
  _set_bit(7);
  if (sc_last_group_time_ == &_default_sc_last_group_time_) {
    sc_last_group_time_ = new ::std::string;
  }
  return sc_last_group_time_;
}

// optional string sc_last_contact_time = 9;
inline bool SSClientState::has_sc_last_contact_time() const {
  return _has_bit(8);
}
inline void SSClientState::clear_sc_last_contact_time() {
  if (sc_last_contact_time_ != &_default_sc_last_contact_time_) {
    sc_last_contact_time_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& SSClientState::sc_last_contact_time() const {
  return *sc_last_contact_time_;
}
inline void SSClientState::set_sc_last_contact_time(const ::std::string& value) {
  _set_bit(8);
  if (sc_last_contact_time_ == &_default_sc_last_contact_time_) {
    sc_last_contact_time_ = new ::std::string;
  }
  sc_last_contact_time_->assign(value);
}
inline void SSClientState::set_sc_last_contact_time(const char* value) {
  _set_bit(8);
  if (sc_last_contact_time_ == &_default_sc_last_contact_time_) {
    sc_last_contact_time_ = new ::std::string;
  }
  sc_last_contact_time_->assign(value);
}
inline void SSClientState::set_sc_last_contact_time(const char* value, size_t size) {
  _set_bit(8);
  if (sc_last_contact_time_ == &_default_sc_last_contact_time_) {
    sc_last_contact_time_ = new ::std::string;
  }
  sc_last_contact_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSClientState::mutable_sc_last_contact_time() {
  _set_bit(8);
  if (sc_last_contact_time_ == &_default_sc_last_contact_time_) {
    sc_last_contact_time_ = new ::std::string;
  }
  return sc_last_contact_time_;
}

// optional string sc_last_member_time = 10;
inline bool SSClientState::has_sc_last_member_time() const {
  return _has_bit(9);
}
inline void SSClientState::clear_sc_last_member_time() {
  if (sc_last_member_time_ != &_default_sc_last_member_time_) {
    sc_last_member_time_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& SSClientState::sc_last_member_time() const {
  return *sc_last_member_time_;
}
inline void SSClientState::set_sc_last_member_time(const ::std::string& value) {
  _set_bit(9);
  if (sc_last_member_time_ == &_default_sc_last_member_time_) {
    sc_last_member_time_ = new ::std::string;
  }
  sc_last_member_time_->assign(value);
}
inline void SSClientState::set_sc_last_member_time(const char* value) {
  _set_bit(9);
  if (sc_last_member_time_ == &_default_sc_last_member_time_) {
    sc_last_member_time_ = new ::std::string;
  }
  sc_last_member_time_->assign(value);
}
inline void SSClientState::set_sc_last_member_time(const char* value, size_t size) {
  _set_bit(9);
  if (sc_last_member_time_ == &_default_sc_last_member_time_) {
    sc_last_member_time_ = new ::std::string;
  }
  sc_last_member_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSClientState::mutable_sc_last_member_time() {
  _set_bit(9);
  if (sc_last_member_time_ == &_default_sc_last_member_time_) {
    sc_last_member_time_ = new ::std::string;
  }
  return sc_last_member_time_;
}

// optional string sc_last_follow_time = 11;
inline bool SSClientState::has_sc_last_follow_time() const {
  return _has_bit(10);
}
inline void SSClientState::clear_sc_last_follow_time() {
  if (sc_last_follow_time_ != &_default_sc_last_follow_time_) {
    sc_last_follow_time_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& SSClientState::sc_last_follow_time() const {
  return *sc_last_follow_time_;
}
inline void SSClientState::set_sc_last_follow_time(const ::std::string& value) {
  _set_bit(10);
  if (sc_last_follow_time_ == &_default_sc_last_follow_time_) {
    sc_last_follow_time_ = new ::std::string;
  }
  sc_last_follow_time_->assign(value);
}
inline void SSClientState::set_sc_last_follow_time(const char* value) {
  _set_bit(10);
  if (sc_last_follow_time_ == &_default_sc_last_follow_time_) {
    sc_last_follow_time_ = new ::std::string;
  }
  sc_last_follow_time_->assign(value);
}
inline void SSClientState::set_sc_last_follow_time(const char* value, size_t size) {
  _set_bit(10);
  if (sc_last_follow_time_ == &_default_sc_last_follow_time_) {
    sc_last_follow_time_ = new ::std::string;
  }
  sc_last_follow_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSClientState::mutable_sc_last_follow_time() {
  _set_bit(10);
  if (sc_last_follow_time_ == &_default_sc_last_follow_time_) {
    sc_last_follow_time_ = new ::std::string;
  }
  return sc_last_follow_time_;
}

// optional string sc_last_send_time = 12;
inline bool SSClientState::has_sc_last_send_time() const {
  return _has_bit(11);
}
inline void SSClientState::clear_sc_last_send_time() {
  if (sc_last_send_time_ != &_default_sc_last_send_time_) {
    sc_last_send_time_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& SSClientState::sc_last_send_time() const {
  return *sc_last_send_time_;
}
inline void SSClientState::set_sc_last_send_time(const ::std::string& value) {
  _set_bit(11);
  if (sc_last_send_time_ == &_default_sc_last_send_time_) {
    sc_last_send_time_ = new ::std::string;
  }
  sc_last_send_time_->assign(value);
}
inline void SSClientState::set_sc_last_send_time(const char* value) {
  _set_bit(11);
  if (sc_last_send_time_ == &_default_sc_last_send_time_) {
    sc_last_send_time_ = new ::std::string;
  }
  sc_last_send_time_->assign(value);
}
inline void SSClientState::set_sc_last_send_time(const char* value, size_t size) {
  _set_bit(11);
  if (sc_last_send_time_ == &_default_sc_last_send_time_) {
    sc_last_send_time_ = new ::std::string;
  }
  sc_last_send_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSClientState::mutable_sc_last_send_time() {
  _set_bit(11);
  if (sc_last_send_time_ == &_default_sc_last_send_time_) {
    sc_last_send_time_ = new ::std::string;
  }
  return sc_last_send_time_;
}

// optional string sc_last_recv_time = 13;
inline bool SSClientState::has_sc_last_recv_time() const {
  return _has_bit(12);
}
inline void SSClientState::clear_sc_last_recv_time() {
  if (sc_last_recv_time_ != &_default_sc_last_recv_time_) {
    sc_last_recv_time_->clear();
  }
  _clear_bit(12);
}
inline const ::std::string& SSClientState::sc_last_recv_time() const {
  return *sc_last_recv_time_;
}
inline void SSClientState::set_sc_last_recv_time(const ::std::string& value) {
  _set_bit(12);
  if (sc_last_recv_time_ == &_default_sc_last_recv_time_) {
    sc_last_recv_time_ = new ::std::string;
  }
  sc_last_recv_time_->assign(value);
}
inline void SSClientState::set_sc_last_recv_time(const char* value) {
  _set_bit(12);
  if (sc_last_recv_time_ == &_default_sc_last_recv_time_) {
    sc_last_recv_time_ = new ::std::string;
  }
  sc_last_recv_time_->assign(value);
}
inline void SSClientState::set_sc_last_recv_time(const char* value, size_t size) {
  _set_bit(12);
  if (sc_last_recv_time_ == &_default_sc_last_recv_time_) {
    sc_last_recv_time_ = new ::std::string;
  }
  sc_last_recv_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSClientState::mutable_sc_last_recv_time() {
  _set_bit(12);
  if (sc_last_recv_time_ == &_default_sc_last_recv_time_) {
    sc_last_recv_time_ = new ::std::string;
  }
  return sc_last_recv_time_;
}

// optional string sc_last_favo_time = 14;
inline bool SSClientState::has_sc_last_favo_time() const {
  return _has_bit(13);
}
inline void SSClientState::clear_sc_last_favo_time() {
  if (sc_last_favo_time_ != &_default_sc_last_favo_time_) {
    sc_last_favo_time_->clear();
  }
  _clear_bit(13);
}
inline const ::std::string& SSClientState::sc_last_favo_time() const {
  return *sc_last_favo_time_;
}
inline void SSClientState::set_sc_last_favo_time(const ::std::string& value) {
  _set_bit(13);
  if (sc_last_favo_time_ == &_default_sc_last_favo_time_) {
    sc_last_favo_time_ = new ::std::string;
  }
  sc_last_favo_time_->assign(value);
}
inline void SSClientState::set_sc_last_favo_time(const char* value) {
  _set_bit(13);
  if (sc_last_favo_time_ == &_default_sc_last_favo_time_) {
    sc_last_favo_time_ = new ::std::string;
  }
  sc_last_favo_time_->assign(value);
}
inline void SSClientState::set_sc_last_favo_time(const char* value, size_t size) {
  _set_bit(13);
  if (sc_last_favo_time_ == &_default_sc_last_favo_time_) {
    sc_last_favo_time_ = new ::std::string;
  }
  sc_last_favo_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSClientState::mutable_sc_last_favo_time() {
  _set_bit(13);
  if (sc_last_favo_time_ == &_default_sc_last_favo_time_) {
    sc_last_favo_time_ = new ::std::string;
  }
  return sc_last_favo_time_;
}

// optional bytes binary = 100;
inline bool SSClientState::has_binary() const {
  return _has_bit(14);
}
inline void SSClientState::clear_binary() {
  if (binary_ != &_default_binary_) {
    binary_->clear();
  }
  _clear_bit(14);
}
inline const ::std::string& SSClientState::binary() const {
  return *binary_;
}
inline void SSClientState::set_binary(const ::std::string& value) {
  _set_bit(14);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void SSClientState::set_binary(const char* value) {
  _set_bit(14);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void SSClientState::set_binary(const void* value, size_t size) {
  _set_bit(14);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSClientState::mutable_binary() {
  _set_bit(14);
  if (binary_ == &_default_binary_) {
    binary_ = new ::std::string;
  }
  return binary_;
}

// -------------------------------------------------------------------

// SSMessageState

// required string userid = 1;
inline bool SSMessageState::has_userid() const {
  return _has_bit(0);
}
inline void SSMessageState::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SSMessageState::userid() const {
  return *userid_;
}
inline void SSMessageState::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SSMessageState::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SSMessageState::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSMessageState::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// required int32 seq_number = 2;
inline bool SSMessageState::has_seq_number() const {
  return _has_bit(1);
}
inline void SSMessageState::clear_seq_number() {
  seq_number_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SSMessageState::seq_number() const {
  return seq_number_;
}
inline void SSMessageState::set_seq_number(::google::protobuf::int32 value) {
  _set_bit(1);
  seq_number_ = value;
}

// -------------------------------------------------------------------

// SSSessionInfo

// required string userid = 1;
inline bool SSSessionInfo::has_userid() const {
  return _has_bit(0);
}
inline void SSSessionInfo::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SSSessionInfo::userid() const {
  return *userid_;
}
inline void SSSessionInfo::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SSSessionInfo::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SSSessionInfo::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSSessionInfo::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// optional .SSDataDomain.SSClientState client_state = 2;
inline bool SSSessionInfo::has_client_state() const {
  return _has_bit(1);
}
inline void SSSessionInfo::clear_client_state() {
  if (client_state_ != NULL) client_state_->::SSDataDomain::SSClientState::Clear();
  _clear_bit(1);
}
inline const ::SSDataDomain::SSClientState& SSSessionInfo::client_state() const {
  return client_state_ != NULL ? *client_state_ : *default_instance_->client_state_;
}
inline ::SSDataDomain::SSClientState* SSSessionInfo::mutable_client_state() {
  _set_bit(1);
  if (client_state_ == NULL) client_state_ = new ::SSDataDomain::SSClientState;
  return client_state_;
}

// repeated .SSDataDomain.SSMessageState message_state = 3;
inline int SSSessionInfo::message_state_size() const {
  return message_state_.size();
}
inline void SSSessionInfo::clear_message_state() {
  message_state_.Clear();
}
inline const ::SSDataDomain::SSMessageState& SSSessionInfo::message_state(int index) const {
  return message_state_.Get(index);
}
inline ::SSDataDomain::SSMessageState* SSSessionInfo::mutable_message_state(int index) {
  return message_state_.Mutable(index);
}
inline ::SSDataDomain::SSMessageState* SSSessionInfo::add_message_state() {
  return message_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessageState >&
SSSessionInfo::message_state() const {
  return message_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessageState >*
SSSessionInfo::mutable_message_state() {
  return &message_state_;
}

// -------------------------------------------------------------------

// SSMessage

// optional string msgid = 1;
inline bool SSMessage::has_msgid() const {
  return _has_bit(0);
}
inline void SSMessage::clear_msgid() {
  if (msgid_ != &_default_msgid_) {
    msgid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SSMessage::msgid() const {
  return *msgid_;
}
inline void SSMessage::set_msgid(const ::std::string& value) {
  _set_bit(0);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(value);
}
inline void SSMessage::set_msgid(const char* value) {
  _set_bit(0);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(value);
}
inline void SSMessage::set_msgid(const char* value, size_t size) {
  _set_bit(0);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSMessage::mutable_msgid() {
  _set_bit(0);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  return msgid_;
}

// optional int32 seq_number = 3;
inline bool SSMessage::has_seq_number() const {
  return _has_bit(1);
}
inline void SSMessage::clear_seq_number() {
  seq_number_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SSMessage::seq_number() const {
  return seq_number_;
}
inline void SSMessage::set_seq_number(::google::protobuf::int32 value) {
  _set_bit(1);
  seq_number_ = value;
}

// required int64 timestamp = 4;
inline bool SSMessage::has_timestamp() const {
  return _has_bit(2);
}
inline void SSMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 SSMessage::timestamp() const {
  return timestamp_;
}
inline void SSMessage::set_timestamp(::google::protobuf::int64 value) {
  _set_bit(2);
  timestamp_ = value;
}

// required string sender = 5;
inline bool SSMessage::has_sender() const {
  return _has_bit(3);
}
inline void SSMessage::clear_sender() {
  if (sender_ != &_default_sender_) {
    sender_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& SSMessage::sender() const {
  return *sender_;
}
inline void SSMessage::set_sender(const ::std::string& value) {
  _set_bit(3);
  if (sender_ == &_default_sender_) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void SSMessage::set_sender(const char* value) {
  _set_bit(3);
  if (sender_ == &_default_sender_) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void SSMessage::set_sender(const char* value, size_t size) {
  _set_bit(3);
  if (sender_ == &_default_sender_) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSMessage::mutable_sender() {
  _set_bit(3);
  if (sender_ == &_default_sender_) {
    sender_ = new ::std::string;
  }
  return sender_;
}

// repeated string recievers = 6;
inline int SSMessage::recievers_size() const {
  return recievers_.size();
}
inline void SSMessage::clear_recievers() {
  recievers_.Clear();
}
inline const ::std::string& SSMessage::recievers(int index) const {
  return recievers_.Get(index);
}
inline ::std::string* SSMessage::mutable_recievers(int index) {
  return recievers_.Mutable(index);
}
inline void SSMessage::set_recievers(int index, const ::std::string& value) {
  recievers_.Mutable(index)->assign(value);
}
inline void SSMessage::set_recievers(int index, const char* value) {
  recievers_.Mutable(index)->assign(value);
}
inline void SSMessage::set_recievers(int index, const char* value, size_t size) {
  recievers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSMessage::add_recievers() {
  return recievers_.Add();
}
inline void SSMessage::add_recievers(const ::std::string& value) {
  recievers_.Add()->assign(value);
}
inline void SSMessage::add_recievers(const char* value) {
  recievers_.Add()->assign(value);
}
inline void SSMessage::add_recievers(const char* value, size_t size) {
  recievers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SSMessage::recievers() const {
  return recievers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SSMessage::mutable_recievers() {
  return &recievers_;
}

// optional string root_msgid = 7;
inline bool SSMessage::has_root_msgid() const {
  return _has_bit(5);
}
inline void SSMessage::clear_root_msgid() {
  if (root_msgid_ != &_default_root_msgid_) {
    root_msgid_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& SSMessage::root_msgid() const {
  return *root_msgid_;
}
inline void SSMessage::set_root_msgid(const ::std::string& value) {
  _set_bit(5);
  if (root_msgid_ == &_default_root_msgid_) {
    root_msgid_ = new ::std::string;
  }
  root_msgid_->assign(value);
}
inline void SSMessage::set_root_msgid(const char* value) {
  _set_bit(5);
  if (root_msgid_ == &_default_root_msgid_) {
    root_msgid_ = new ::std::string;
  }
  root_msgid_->assign(value);
}
inline void SSMessage::set_root_msgid(const char* value, size_t size) {
  _set_bit(5);
  if (root_msgid_ == &_default_root_msgid_) {
    root_msgid_ = new ::std::string;
  }
  root_msgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSMessage::mutable_root_msgid() {
  _set_bit(5);
  if (root_msgid_ == &_default_root_msgid_) {
    root_msgid_ = new ::std::string;
  }
  return root_msgid_;
}

// optional string parent_msgid = 8;
inline bool SSMessage::has_parent_msgid() const {
  return _has_bit(6);
}
inline void SSMessage::clear_parent_msgid() {
  if (parent_msgid_ != &_default_parent_msgid_) {
    parent_msgid_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& SSMessage::parent_msgid() const {
  return *parent_msgid_;
}
inline void SSMessage::set_parent_msgid(const ::std::string& value) {
  _set_bit(6);
  if (parent_msgid_ == &_default_parent_msgid_) {
    parent_msgid_ = new ::std::string;
  }
  parent_msgid_->assign(value);
}
inline void SSMessage::set_parent_msgid(const char* value) {
  _set_bit(6);
  if (parent_msgid_ == &_default_parent_msgid_) {
    parent_msgid_ = new ::std::string;
  }
  parent_msgid_->assign(value);
}
inline void SSMessage::set_parent_msgid(const char* value, size_t size) {
  _set_bit(6);
  if (parent_msgid_ == &_default_parent_msgid_) {
    parent_msgid_ = new ::std::string;
  }
  parent_msgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSMessage::mutable_parent_msgid() {
  _set_bit(6);
  if (parent_msgid_ == &_default_parent_msgid_) {
    parent_msgid_ = new ::std::string;
  }
  return parent_msgid_;
}

// required string subject = 9;
inline bool SSMessage::has_subject() const {
  return _has_bit(7);
}
inline void SSMessage::clear_subject() {
  if (subject_ != &_default_subject_) {
    subject_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& SSMessage::subject() const {
  return *subject_;
}
inline void SSMessage::set_subject(const ::std::string& value) {
  _set_bit(7);
  if (subject_ == &_default_subject_) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void SSMessage::set_subject(const char* value) {
  _set_bit(7);
  if (subject_ == &_default_subject_) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void SSMessage::set_subject(const char* value, size_t size) {
  _set_bit(7);
  if (subject_ == &_default_subject_) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSMessage::mutable_subject() {
  _set_bit(7);
  if (subject_ == &_default_subject_) {
    subject_ = new ::std::string;
  }
  return subject_;
}

// required .SSDataDomain.SSContentType content_type = 10 [default = NORMAL];
inline bool SSMessage::has_content_type() const {
  return _has_bit(8);
}
inline void SSMessage::clear_content_type() {
  content_type_ = 0;
  _clear_bit(8);
}
inline SSDataDomain::SSContentType SSMessage::content_type() const {
  return static_cast< SSDataDomain::SSContentType >(content_type_);
}
inline void SSMessage::set_content_type(SSDataDomain::SSContentType value) {
  GOOGLE_DCHECK(SSDataDomain::SSContentType_IsValid(value));
  _set_bit(8);
  content_type_ = value;
}

// optional bytes content = 11;
inline bool SSMessage::has_content() const {
  return _has_bit(9);
}
inline void SSMessage::clear_content() {
  if (content_ != &_default_content_) {
    content_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& SSMessage::content() const {
  return *content_;
}
inline void SSMessage::set_content(const ::std::string& value) {
  _set_bit(9);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SSMessage::set_content(const char* value) {
  _set_bit(9);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SSMessage::set_content(const void* value, size_t size) {
  _set_bit(9);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSMessage::mutable_content() {
  _set_bit(9);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  return content_;
}

// -------------------------------------------------------------------

// ServiceResult

// required .SSDataDomain.ServiceCode code = 1;
inline bool ServiceResult::has_code() const {
  return _has_bit(0);
}
inline void ServiceResult::clear_code() {
  code_ = 0;
  _clear_bit(0);
}
inline SSDataDomain::ServiceCode ServiceResult::code() const {
  return static_cast< SSDataDomain::ServiceCode >(code_);
}
inline void ServiceResult::set_code(SSDataDomain::ServiceCode value) {
  GOOGLE_DCHECK(SSDataDomain::ServiceCode_IsValid(value));
  _set_bit(0);
  code_ = value;
}

// optional string message = 2;
inline bool ServiceResult::has_message() const {
  return _has_bit(1);
}
inline void ServiceResult::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ServiceResult::message() const {
  return *message_;
}
inline void ServiceResult::set_message(const ::std::string& value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void ServiceResult::set_message(const char* value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void ServiceResult::set_message(const char* value, size_t size) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceResult::mutable_message() {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// -------------------------------------------------------------------

// CreateAccountRequest

// required string userid = 1;
inline bool CreateAccountRequest::has_userid() const {
  return _has_bit(0);
}
inline void CreateAccountRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CreateAccountRequest::userid() const {
  return *userid_;
}
inline void CreateAccountRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void CreateAccountRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void CreateAccountRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateAccountRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// required string password = 2;
inline bool CreateAccountRequest::has_password() const {
  return _has_bit(1);
}
inline void CreateAccountRequest::clear_password() {
  if (password_ != &_default_password_) {
    password_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CreateAccountRequest::password() const {
  return *password_;
}
inline void CreateAccountRequest::set_password(const ::std::string& value) {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void CreateAccountRequest::set_password(const char* value) {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void CreateAccountRequest::set_password(const char* value, size_t size) {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateAccountRequest::mutable_password() {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  return password_;
}

// required string email = 3;
inline bool CreateAccountRequest::has_email() const {
  return _has_bit(2);
}
inline void CreateAccountRequest::clear_email() {
  if (email_ != &_default_email_) {
    email_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CreateAccountRequest::email() const {
  return *email_;
}
inline void CreateAccountRequest::set_email(const ::std::string& value) {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void CreateAccountRequest::set_email(const char* value) {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void CreateAccountRequest::set_email(const char* value, size_t size) {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateAccountRequest::mutable_email() {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  return email_;
}

// required string nickname = 4;
inline bool CreateAccountRequest::has_nickname() const {
  return _has_bit(3);
}
inline void CreateAccountRequest::clear_nickname() {
  if (nickname_ != &_default_nickname_) {
    nickname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CreateAccountRequest::nickname() const {
  return *nickname_;
}
inline void CreateAccountRequest::set_nickname(const ::std::string& value) {
  _set_bit(3);
  if (nickname_ == &_default_nickname_) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CreateAccountRequest::set_nickname(const char* value) {
  _set_bit(3);
  if (nickname_ == &_default_nickname_) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CreateAccountRequest::set_nickname(const char* value, size_t size) {
  _set_bit(3);
  if (nickname_ == &_default_nickname_) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateAccountRequest::mutable_nickname() {
  _set_bit(3);
  if (nickname_ == &_default_nickname_) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}

// -------------------------------------------------------------------

// CreateAccountResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool CreateAccountResponse::has_result() const {
  return _has_bit(0);
}
inline void CreateAccountResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& CreateAccountResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* CreateAccountResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// GetAccountRequest

// required string userid = 1;
inline bool GetAccountRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetAccountRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetAccountRequest::userid() const {
  return *userid_;
}
inline void GetAccountRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetAccountRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetAccountRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAccountRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// -------------------------------------------------------------------

// GetAccountResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetAccountResponse::has_result() const {
  return _has_bit(0);
}
inline void GetAccountResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetAccountResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetAccountResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// optional .SSDataDomain.SSAccount account = 2;
inline bool GetAccountResponse::has_account() const {
  return _has_bit(1);
}
inline void GetAccountResponse::clear_account() {
  if (account_ != NULL) account_->::SSDataDomain::SSAccount::Clear();
  _clear_bit(1);
}
inline const ::SSDataDomain::SSAccount& GetAccountResponse::account() const {
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
inline ::SSDataDomain::SSAccount* GetAccountResponse::mutable_account() {
  _set_bit(1);
  if (account_ == NULL) account_ = new ::SSDataDomain::SSAccount;
  return account_;
}

// -------------------------------------------------------------------

// ChangePasswordRequest

// required string userid = 1;
inline bool ChangePasswordRequest::has_userid() const {
  return _has_bit(0);
}
inline void ChangePasswordRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ChangePasswordRequest::userid() const {
  return *userid_;
}
inline void ChangePasswordRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void ChangePasswordRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void ChangePasswordRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangePasswordRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// required string new_password = 2;
inline bool ChangePasswordRequest::has_new_password() const {
  return _has_bit(1);
}
inline void ChangePasswordRequest::clear_new_password() {
  if (new_password_ != &_default_new_password_) {
    new_password_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ChangePasswordRequest::new_password() const {
  return *new_password_;
}
inline void ChangePasswordRequest::set_new_password(const ::std::string& value) {
  _set_bit(1);
  if (new_password_ == &_default_new_password_) {
    new_password_ = new ::std::string;
  }
  new_password_->assign(value);
}
inline void ChangePasswordRequest::set_new_password(const char* value) {
  _set_bit(1);
  if (new_password_ == &_default_new_password_) {
    new_password_ = new ::std::string;
  }
  new_password_->assign(value);
}
inline void ChangePasswordRequest::set_new_password(const char* value, size_t size) {
  _set_bit(1);
  if (new_password_ == &_default_new_password_) {
    new_password_ = new ::std::string;
  }
  new_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangePasswordRequest::mutable_new_password() {
  _set_bit(1);
  if (new_password_ == &_default_new_password_) {
    new_password_ = new ::std::string;
  }
  return new_password_;
}

// -------------------------------------------------------------------

// ChangePasswordResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool ChangePasswordResponse::has_result() const {
  return _has_bit(0);
}
inline void ChangePasswordResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& ChangePasswordResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* ChangePasswordResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// UserExistRequest

// repeated string userid_list = 1;
inline int UserExistRequest::userid_list_size() const {
  return userid_list_.size();
}
inline void UserExistRequest::clear_userid_list() {
  userid_list_.Clear();
}
inline const ::std::string& UserExistRequest::userid_list(int index) const {
  return userid_list_.Get(index);
}
inline ::std::string* UserExistRequest::mutable_userid_list(int index) {
  return userid_list_.Mutable(index);
}
inline void UserExistRequest::set_userid_list(int index, const ::std::string& value) {
  userid_list_.Mutable(index)->assign(value);
}
inline void UserExistRequest::set_userid_list(int index, const char* value) {
  userid_list_.Mutable(index)->assign(value);
}
inline void UserExistRequest::set_userid_list(int index, const char* value, size_t size) {
  userid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserExistRequest::add_userid_list() {
  return userid_list_.Add();
}
inline void UserExistRequest::add_userid_list(const ::std::string& value) {
  userid_list_.Add()->assign(value);
}
inline void UserExistRequest::add_userid_list(const char* value) {
  userid_list_.Add()->assign(value);
}
inline void UserExistRequest::add_userid_list(const char* value, size_t size) {
  userid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserExistRequest::userid_list() const {
  return userid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserExistRequest::mutable_userid_list() {
  return &userid_list_;
}

// -------------------------------------------------------------------

// UserExistResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool UserExistResponse::has_result() const {
  return _has_bit(0);
}
inline void UserExistResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& UserExistResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* UserExistResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated string exist_userid_list = 2;
inline int UserExistResponse::exist_userid_list_size() const {
  return exist_userid_list_.size();
}
inline void UserExistResponse::clear_exist_userid_list() {
  exist_userid_list_.Clear();
}
inline const ::std::string& UserExistResponse::exist_userid_list(int index) const {
  return exist_userid_list_.Get(index);
}
inline ::std::string* UserExistResponse::mutable_exist_userid_list(int index) {
  return exist_userid_list_.Mutable(index);
}
inline void UserExistResponse::set_exist_userid_list(int index, const ::std::string& value) {
  exist_userid_list_.Mutable(index)->assign(value);
}
inline void UserExistResponse::set_exist_userid_list(int index, const char* value) {
  exist_userid_list_.Mutable(index)->assign(value);
}
inline void UserExistResponse::set_exist_userid_list(int index, const char* value, size_t size) {
  exist_userid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserExistResponse::add_exist_userid_list() {
  return exist_userid_list_.Add();
}
inline void UserExistResponse::add_exist_userid_list(const ::std::string& value) {
  exist_userid_list_.Add()->assign(value);
}
inline void UserExistResponse::add_exist_userid_list(const char* value) {
  exist_userid_list_.Add()->assign(value);
}
inline void UserExistResponse::add_exist_userid_list(const char* value, size_t size) {
  exist_userid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserExistResponse::exist_userid_list() const {
  return exist_userid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserExistResponse::mutable_exist_userid_list() {
  return &exist_userid_list_;
}

// -------------------------------------------------------------------

// SetProfileRequest

// required string userid = 1;
inline bool SetProfileRequest::has_userid() const {
  return _has_bit(0);
}
inline void SetProfileRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SetProfileRequest::userid() const {
  return *userid_;
}
inline void SetProfileRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SetProfileRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SetProfileRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetProfileRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// required .SSDataDomain.SSProfile profile = 2;
inline bool SetProfileRequest::has_profile() const {
  return _has_bit(1);
}
inline void SetProfileRequest::clear_profile() {
  if (profile_ != NULL) profile_->::SSDataDomain::SSProfile::Clear();
  _clear_bit(1);
}
inline const ::SSDataDomain::SSProfile& SetProfileRequest::profile() const {
  return profile_ != NULL ? *profile_ : *default_instance_->profile_;
}
inline ::SSDataDomain::SSProfile* SetProfileRequest::mutable_profile() {
  _set_bit(1);
  if (profile_ == NULL) profile_ = new ::SSDataDomain::SSProfile;
  return profile_;
}

// -------------------------------------------------------------------

// SetProfileResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool SetProfileResponse::has_result() const {
  return _has_bit(0);
}
inline void SetProfileResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& SetProfileResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* SetProfileResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// GetProfileRequest

// repeated string userid_list = 1;
inline int GetProfileRequest::userid_list_size() const {
  return userid_list_.size();
}
inline void GetProfileRequest::clear_userid_list() {
  userid_list_.Clear();
}
inline const ::std::string& GetProfileRequest::userid_list(int index) const {
  return userid_list_.Get(index);
}
inline ::std::string* GetProfileRequest::mutable_userid_list(int index) {
  return userid_list_.Mutable(index);
}
inline void GetProfileRequest::set_userid_list(int index, const ::std::string& value) {
  userid_list_.Mutable(index)->assign(value);
}
inline void GetProfileRequest::set_userid_list(int index, const char* value) {
  userid_list_.Mutable(index)->assign(value);
}
inline void GetProfileRequest::set_userid_list(int index, const char* value, size_t size) {
  userid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetProfileRequest::add_userid_list() {
  return userid_list_.Add();
}
inline void GetProfileRequest::add_userid_list(const ::std::string& value) {
  userid_list_.Add()->assign(value);
}
inline void GetProfileRequest::add_userid_list(const char* value) {
  userid_list_.Add()->assign(value);
}
inline void GetProfileRequest::add_userid_list(const char* value, size_t size) {
  userid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetProfileRequest::userid_list() const {
  return userid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetProfileRequest::mutable_userid_list() {
  return &userid_list_;
}

// optional int32 flag = 2 [default = 2];
inline bool GetProfileRequest::has_flag() const {
  return _has_bit(1);
}
inline void GetProfileRequest::clear_flag() {
  flag_ = 2;
  _clear_bit(1);
}
inline ::google::protobuf::int32 GetProfileRequest::flag() const {
  return flag_;
}
inline void GetProfileRequest::set_flag(::google::protobuf::int32 value) {
  _set_bit(1);
  flag_ = value;
}

// -------------------------------------------------------------------

// GetProfileResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetProfileResponse::has_result() const {
  return _has_bit(0);
}
inline void GetProfileResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetProfileResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetProfileResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated .SSDataDomain.SSProfile profile_list = 2;
inline int GetProfileResponse::profile_list_size() const {
  return profile_list_.size();
}
inline void GetProfileResponse::clear_profile_list() {
  profile_list_.Clear();
}
inline const ::SSDataDomain::SSProfile& GetProfileResponse::profile_list(int index) const {
  return profile_list_.Get(index);
}
inline ::SSDataDomain::SSProfile* GetProfileResponse::mutable_profile_list(int index) {
  return profile_list_.Mutable(index);
}
inline ::SSDataDomain::SSProfile* GetProfileResponse::add_profile_list() {
  return profile_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile >&
GetProfileResponse::profile_list() const {
  return profile_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile >*
GetProfileResponse::mutable_profile_list() {
  return &profile_list_;
}

// -------------------------------------------------------------------

// FollowRequest

// required string follower_userid = 1;
inline bool FollowRequest::has_follower_userid() const {
  return _has_bit(0);
}
inline void FollowRequest::clear_follower_userid() {
  if (follower_userid_ != &_default_follower_userid_) {
    follower_userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& FollowRequest::follower_userid() const {
  return *follower_userid_;
}
inline void FollowRequest::set_follower_userid(const ::std::string& value) {
  _set_bit(0);
  if (follower_userid_ == &_default_follower_userid_) {
    follower_userid_ = new ::std::string;
  }
  follower_userid_->assign(value);
}
inline void FollowRequest::set_follower_userid(const char* value) {
  _set_bit(0);
  if (follower_userid_ == &_default_follower_userid_) {
    follower_userid_ = new ::std::string;
  }
  follower_userid_->assign(value);
}
inline void FollowRequest::set_follower_userid(const char* value, size_t size) {
  _set_bit(0);
  if (follower_userid_ == &_default_follower_userid_) {
    follower_userid_ = new ::std::string;
  }
  follower_userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FollowRequest::mutable_follower_userid() {
  _set_bit(0);
  if (follower_userid_ == &_default_follower_userid_) {
    follower_userid_ = new ::std::string;
  }
  return follower_userid_;
}

// repeated string following_userid_list = 2;
inline int FollowRequest::following_userid_list_size() const {
  return following_userid_list_.size();
}
inline void FollowRequest::clear_following_userid_list() {
  following_userid_list_.Clear();
}
inline const ::std::string& FollowRequest::following_userid_list(int index) const {
  return following_userid_list_.Get(index);
}
inline ::std::string* FollowRequest::mutable_following_userid_list(int index) {
  return following_userid_list_.Mutable(index);
}
inline void FollowRequest::set_following_userid_list(int index, const ::std::string& value) {
  following_userid_list_.Mutable(index)->assign(value);
}
inline void FollowRequest::set_following_userid_list(int index, const char* value) {
  following_userid_list_.Mutable(index)->assign(value);
}
inline void FollowRequest::set_following_userid_list(int index, const char* value, size_t size) {
  following_userid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FollowRequest::add_following_userid_list() {
  return following_userid_list_.Add();
}
inline void FollowRequest::add_following_userid_list(const ::std::string& value) {
  following_userid_list_.Add()->assign(value);
}
inline void FollowRequest::add_following_userid_list(const char* value) {
  following_userid_list_.Add()->assign(value);
}
inline void FollowRequest::add_following_userid_list(const char* value, size_t size) {
  following_userid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FollowRequest::following_userid_list() const {
  return following_userid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FollowRequest::mutable_following_userid_list() {
  return &following_userid_list_;
}

// -------------------------------------------------------------------

// FollowResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool FollowResponse::has_result() const {
  return _has_bit(0);
}
inline void FollowResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& FollowResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* FollowResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// CancelFollowRequest

// required string follower_userid = 1;
inline bool CancelFollowRequest::has_follower_userid() const {
  return _has_bit(0);
}
inline void CancelFollowRequest::clear_follower_userid() {
  if (follower_userid_ != &_default_follower_userid_) {
    follower_userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CancelFollowRequest::follower_userid() const {
  return *follower_userid_;
}
inline void CancelFollowRequest::set_follower_userid(const ::std::string& value) {
  _set_bit(0);
  if (follower_userid_ == &_default_follower_userid_) {
    follower_userid_ = new ::std::string;
  }
  follower_userid_->assign(value);
}
inline void CancelFollowRequest::set_follower_userid(const char* value) {
  _set_bit(0);
  if (follower_userid_ == &_default_follower_userid_) {
    follower_userid_ = new ::std::string;
  }
  follower_userid_->assign(value);
}
inline void CancelFollowRequest::set_follower_userid(const char* value, size_t size) {
  _set_bit(0);
  if (follower_userid_ == &_default_follower_userid_) {
    follower_userid_ = new ::std::string;
  }
  follower_userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CancelFollowRequest::mutable_follower_userid() {
  _set_bit(0);
  if (follower_userid_ == &_default_follower_userid_) {
    follower_userid_ = new ::std::string;
  }
  return follower_userid_;
}

// repeated string following_userid_list = 2;
inline int CancelFollowRequest::following_userid_list_size() const {
  return following_userid_list_.size();
}
inline void CancelFollowRequest::clear_following_userid_list() {
  following_userid_list_.Clear();
}
inline const ::std::string& CancelFollowRequest::following_userid_list(int index) const {
  return following_userid_list_.Get(index);
}
inline ::std::string* CancelFollowRequest::mutable_following_userid_list(int index) {
  return following_userid_list_.Mutable(index);
}
inline void CancelFollowRequest::set_following_userid_list(int index, const ::std::string& value) {
  following_userid_list_.Mutable(index)->assign(value);
}
inline void CancelFollowRequest::set_following_userid_list(int index, const char* value) {
  following_userid_list_.Mutable(index)->assign(value);
}
inline void CancelFollowRequest::set_following_userid_list(int index, const char* value, size_t size) {
  following_userid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CancelFollowRequest::add_following_userid_list() {
  return following_userid_list_.Add();
}
inline void CancelFollowRequest::add_following_userid_list(const ::std::string& value) {
  following_userid_list_.Add()->assign(value);
}
inline void CancelFollowRequest::add_following_userid_list(const char* value) {
  following_userid_list_.Add()->assign(value);
}
inline void CancelFollowRequest::add_following_userid_list(const char* value, size_t size) {
  following_userid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CancelFollowRequest::following_userid_list() const {
  return following_userid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CancelFollowRequest::mutable_following_userid_list() {
  return &following_userid_list_;
}

// -------------------------------------------------------------------

// CancelFollowResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool CancelFollowResponse::has_result() const {
  return _has_bit(0);
}
inline void CancelFollowResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& CancelFollowResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* CancelFollowResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// GetFollowingRequest

// required string userid = 1;
inline bool GetFollowingRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetFollowingRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetFollowingRequest::userid() const {
  return *userid_;
}
inline void GetFollowingRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetFollowingRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetFollowingRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFollowingRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// -------------------------------------------------------------------

// GetFollowingResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetFollowingResponse::has_result() const {
  return _has_bit(0);
}
inline void GetFollowingResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetFollowingResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetFollowingResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated string following_userid_list = 2;
inline int GetFollowingResponse::following_userid_list_size() const {
  return following_userid_list_.size();
}
inline void GetFollowingResponse::clear_following_userid_list() {
  following_userid_list_.Clear();
}
inline const ::std::string& GetFollowingResponse::following_userid_list(int index) const {
  return following_userid_list_.Get(index);
}
inline ::std::string* GetFollowingResponse::mutable_following_userid_list(int index) {
  return following_userid_list_.Mutable(index);
}
inline void GetFollowingResponse::set_following_userid_list(int index, const ::std::string& value) {
  following_userid_list_.Mutable(index)->assign(value);
}
inline void GetFollowingResponse::set_following_userid_list(int index, const char* value) {
  following_userid_list_.Mutable(index)->assign(value);
}
inline void GetFollowingResponse::set_following_userid_list(int index, const char* value, size_t size) {
  following_userid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFollowingResponse::add_following_userid_list() {
  return following_userid_list_.Add();
}
inline void GetFollowingResponse::add_following_userid_list(const ::std::string& value) {
  following_userid_list_.Add()->assign(value);
}
inline void GetFollowingResponse::add_following_userid_list(const char* value) {
  following_userid_list_.Add()->assign(value);
}
inline void GetFollowingResponse::add_following_userid_list(const char* value, size_t size) {
  following_userid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetFollowingResponse::following_userid_list() const {
  return following_userid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetFollowingResponse::mutable_following_userid_list() {
  return &following_userid_list_;
}

// -------------------------------------------------------------------

// GetFollowerCountRequest

// required string userid = 1;
inline bool GetFollowerCountRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetFollowerCountRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetFollowerCountRequest::userid() const {
  return *userid_;
}
inline void GetFollowerCountRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetFollowerCountRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetFollowerCountRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFollowerCountRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// -------------------------------------------------------------------

// GetFollowerCountResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetFollowerCountResponse::has_result() const {
  return _has_bit(0);
}
inline void GetFollowerCountResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetFollowerCountResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetFollowerCountResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// optional int32 count = 2;
inline bool GetFollowerCountResponse::has_count() const {
  return _has_bit(1);
}
inline void GetFollowerCountResponse::clear_count() {
  count_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 GetFollowerCountResponse::count() const {
  return count_;
}
inline void GetFollowerCountResponse::set_count(::google::protobuf::int32 value) {
  _set_bit(1);
  count_ = value;
}

// -------------------------------------------------------------------

// GetFollowerRequest

// required string userid = 1;
inline bool GetFollowerRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetFollowerRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetFollowerRequest::userid() const {
  return *userid_;
}
inline void GetFollowerRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetFollowerRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetFollowerRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFollowerRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// optional string cursor_id = 2;
inline bool GetFollowerRequest::has_cursor_id() const {
  return _has_bit(1);
}
inline void GetFollowerRequest::clear_cursor_id() {
  if (cursor_id_ != &_default_cursor_id_) {
    cursor_id_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& GetFollowerRequest::cursor_id() const {
  return *cursor_id_;
}
inline void GetFollowerRequest::set_cursor_id(const ::std::string& value) {
  _set_bit(1);
  if (cursor_id_ == &_default_cursor_id_) {
    cursor_id_ = new ::std::string;
  }
  cursor_id_->assign(value);
}
inline void GetFollowerRequest::set_cursor_id(const char* value) {
  _set_bit(1);
  if (cursor_id_ == &_default_cursor_id_) {
    cursor_id_ = new ::std::string;
  }
  cursor_id_->assign(value);
}
inline void GetFollowerRequest::set_cursor_id(const char* value, size_t size) {
  _set_bit(1);
  if (cursor_id_ == &_default_cursor_id_) {
    cursor_id_ = new ::std::string;
  }
  cursor_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFollowerRequest::mutable_cursor_id() {
  _set_bit(1);
  if (cursor_id_ == &_default_cursor_id_) {
    cursor_id_ = new ::std::string;
  }
  return cursor_id_;
}

// optional int32 count = 3 [default = 100];
inline bool GetFollowerRequest::has_count() const {
  return _has_bit(2);
}
inline void GetFollowerRequest::clear_count() {
  count_ = 100;
  _clear_bit(2);
}
inline ::google::protobuf::int32 GetFollowerRequest::count() const {
  return count_;
}
inline void GetFollowerRequest::set_count(::google::protobuf::int32 value) {
  _set_bit(2);
  count_ = value;
}

// -------------------------------------------------------------------

// GetFollowerResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetFollowerResponse::has_result() const {
  return _has_bit(0);
}
inline void GetFollowerResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetFollowerResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetFollowerResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated string follower_userid_list = 2;
inline int GetFollowerResponse::follower_userid_list_size() const {
  return follower_userid_list_.size();
}
inline void GetFollowerResponse::clear_follower_userid_list() {
  follower_userid_list_.Clear();
}
inline const ::std::string& GetFollowerResponse::follower_userid_list(int index) const {
  return follower_userid_list_.Get(index);
}
inline ::std::string* GetFollowerResponse::mutable_follower_userid_list(int index) {
  return follower_userid_list_.Mutable(index);
}
inline void GetFollowerResponse::set_follower_userid_list(int index, const ::std::string& value) {
  follower_userid_list_.Mutable(index)->assign(value);
}
inline void GetFollowerResponse::set_follower_userid_list(int index, const char* value) {
  follower_userid_list_.Mutable(index)->assign(value);
}
inline void GetFollowerResponse::set_follower_userid_list(int index, const char* value, size_t size) {
  follower_userid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFollowerResponse::add_follower_userid_list() {
  return follower_userid_list_.Add();
}
inline void GetFollowerResponse::add_follower_userid_list(const ::std::string& value) {
  follower_userid_list_.Add()->assign(value);
}
inline void GetFollowerResponse::add_follower_userid_list(const char* value) {
  follower_userid_list_.Add()->assign(value);
}
inline void GetFollowerResponse::add_follower_userid_list(const char* value, size_t size) {
  follower_userid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetFollowerResponse::follower_userid_list() const {
  return follower_userid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetFollowerResponse::mutable_follower_userid_list() {
  return &follower_userid_list_;
}

// optional bool eol = 3 [default = false];
inline bool GetFollowerResponse::has_eol() const {
  return _has_bit(2);
}
inline void GetFollowerResponse::clear_eol() {
  eol_ = false;
  _clear_bit(2);
}
inline bool GetFollowerResponse::eol() const {
  return eol_;
}
inline void GetFollowerResponse::set_eol(bool value) {
  _set_bit(2);
  eol_ = value;
}

// -------------------------------------------------------------------

// InviteRequest

// required string inviter_userid = 1;
inline bool InviteRequest::has_inviter_userid() const {
  return _has_bit(0);
}
inline void InviteRequest::clear_inviter_userid() {
  if (inviter_userid_ != &_default_inviter_userid_) {
    inviter_userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& InviteRequest::inviter_userid() const {
  return *inviter_userid_;
}
inline void InviteRequest::set_inviter_userid(const ::std::string& value) {
  _set_bit(0);
  if (inviter_userid_ == &_default_inviter_userid_) {
    inviter_userid_ = new ::std::string;
  }
  inviter_userid_->assign(value);
}
inline void InviteRequest::set_inviter_userid(const char* value) {
  _set_bit(0);
  if (inviter_userid_ == &_default_inviter_userid_) {
    inviter_userid_ = new ::std::string;
  }
  inviter_userid_->assign(value);
}
inline void InviteRequest::set_inviter_userid(const char* value, size_t size) {
  _set_bit(0);
  if (inviter_userid_ == &_default_inviter_userid_) {
    inviter_userid_ = new ::std::string;
  }
  inviter_userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InviteRequest::mutable_inviter_userid() {
  _set_bit(0);
  if (inviter_userid_ == &_default_inviter_userid_) {
    inviter_userid_ = new ::std::string;
  }
  return inviter_userid_;
}

// repeated string inviting_userid_list = 2;
inline int InviteRequest::inviting_userid_list_size() const {
  return inviting_userid_list_.size();
}
inline void InviteRequest::clear_inviting_userid_list() {
  inviting_userid_list_.Clear();
}
inline const ::std::string& InviteRequest::inviting_userid_list(int index) const {
  return inviting_userid_list_.Get(index);
}
inline ::std::string* InviteRequest::mutable_inviting_userid_list(int index) {
  return inviting_userid_list_.Mutable(index);
}
inline void InviteRequest::set_inviting_userid_list(int index, const ::std::string& value) {
  inviting_userid_list_.Mutable(index)->assign(value);
}
inline void InviteRequest::set_inviting_userid_list(int index, const char* value) {
  inviting_userid_list_.Mutable(index)->assign(value);
}
inline void InviteRequest::set_inviting_userid_list(int index, const char* value, size_t size) {
  inviting_userid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InviteRequest::add_inviting_userid_list() {
  return inviting_userid_list_.Add();
}
inline void InviteRequest::add_inviting_userid_list(const ::std::string& value) {
  inviting_userid_list_.Add()->assign(value);
}
inline void InviteRequest::add_inviting_userid_list(const char* value) {
  inviting_userid_list_.Add()->assign(value);
}
inline void InviteRequest::add_inviting_userid_list(const char* value, size_t size) {
  inviting_userid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InviteRequest::inviting_userid_list() const {
  return inviting_userid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InviteRequest::mutable_inviting_userid_list() {
  return &inviting_userid_list_;
}

// -------------------------------------------------------------------

// InviteResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool InviteResponse::has_result() const {
  return _has_bit(0);
}
inline void InviteResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& InviteResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* InviteResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// GetInvitingRequest

// required string userid = 1;
inline bool GetInvitingRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetInvitingRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetInvitingRequest::userid() const {
  return *userid_;
}
inline void GetInvitingRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetInvitingRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetInvitingRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetInvitingRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// -------------------------------------------------------------------

// GetInvitingResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetInvitingResponse::has_result() const {
  return _has_bit(0);
}
inline void GetInvitingResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetInvitingResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetInvitingResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated string inviting_userid_list = 2;
inline int GetInvitingResponse::inviting_userid_list_size() const {
  return inviting_userid_list_.size();
}
inline void GetInvitingResponse::clear_inviting_userid_list() {
  inviting_userid_list_.Clear();
}
inline const ::std::string& GetInvitingResponse::inviting_userid_list(int index) const {
  return inviting_userid_list_.Get(index);
}
inline ::std::string* GetInvitingResponse::mutable_inviting_userid_list(int index) {
  return inviting_userid_list_.Mutable(index);
}
inline void GetInvitingResponse::set_inviting_userid_list(int index, const ::std::string& value) {
  inviting_userid_list_.Mutable(index)->assign(value);
}
inline void GetInvitingResponse::set_inviting_userid_list(int index, const char* value) {
  inviting_userid_list_.Mutable(index)->assign(value);
}
inline void GetInvitingResponse::set_inviting_userid_list(int index, const char* value, size_t size) {
  inviting_userid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetInvitingResponse::add_inviting_userid_list() {
  return inviting_userid_list_.Add();
}
inline void GetInvitingResponse::add_inviting_userid_list(const ::std::string& value) {
  inviting_userid_list_.Add()->assign(value);
}
inline void GetInvitingResponse::add_inviting_userid_list(const char* value) {
  inviting_userid_list_.Add()->assign(value);
}
inline void GetInvitingResponse::add_inviting_userid_list(const char* value, size_t size) {
  inviting_userid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetInvitingResponse::inviting_userid_list() const {
  return inviting_userid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetInvitingResponse::mutable_inviting_userid_list() {
  return &inviting_userid_list_;
}

// -------------------------------------------------------------------

// GetInviterRequest

// required string userid = 1;
inline bool GetInviterRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetInviterRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetInviterRequest::userid() const {
  return *userid_;
}
inline void GetInviterRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetInviterRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetInviterRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetInviterRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// -------------------------------------------------------------------

// GetInviterResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetInviterResponse::has_result() const {
  return _has_bit(0);
}
inline void GetInviterResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetInviterResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetInviterResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated string inviter_userid_list = 2;
inline int GetInviterResponse::inviter_userid_list_size() const {
  return inviter_userid_list_.size();
}
inline void GetInviterResponse::clear_inviter_userid_list() {
  inviter_userid_list_.Clear();
}
inline const ::std::string& GetInviterResponse::inviter_userid_list(int index) const {
  return inviter_userid_list_.Get(index);
}
inline ::std::string* GetInviterResponse::mutable_inviter_userid_list(int index) {
  return inviter_userid_list_.Mutable(index);
}
inline void GetInviterResponse::set_inviter_userid_list(int index, const ::std::string& value) {
  inviter_userid_list_.Mutable(index)->assign(value);
}
inline void GetInviterResponse::set_inviter_userid_list(int index, const char* value) {
  inviter_userid_list_.Mutable(index)->assign(value);
}
inline void GetInviterResponse::set_inviter_userid_list(int index, const char* value, size_t size) {
  inviter_userid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetInviterResponse::add_inviter_userid_list() {
  return inviter_userid_list_.Add();
}
inline void GetInviterResponse::add_inviter_userid_list(const ::std::string& value) {
  inviter_userid_list_.Add()->assign(value);
}
inline void GetInviterResponse::add_inviter_userid_list(const char* value) {
  inviter_userid_list_.Add()->assign(value);
}
inline void GetInviterResponse::add_inviter_userid_list(const char* value, size_t size) {
  inviter_userid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetInviterResponse::inviter_userid_list() const {
  return inviter_userid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetInviterResponse::mutable_inviter_userid_list() {
  return &inviter_userid_list_;
}

// -------------------------------------------------------------------

// SetSessionInfoRequest

// required string userid = 1;
inline bool SetSessionInfoRequest::has_userid() const {
  return _has_bit(0);
}
inline void SetSessionInfoRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SetSessionInfoRequest::userid() const {
  return *userid_;
}
inline void SetSessionInfoRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SetSessionInfoRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SetSessionInfoRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetSessionInfoRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// required .SSDataDomain.SSSessionInfo session_info = 2;
inline bool SetSessionInfoRequest::has_session_info() const {
  return _has_bit(1);
}
inline void SetSessionInfoRequest::clear_session_info() {
  if (session_info_ != NULL) session_info_->::SSDataDomain::SSSessionInfo::Clear();
  _clear_bit(1);
}
inline const ::SSDataDomain::SSSessionInfo& SetSessionInfoRequest::session_info() const {
  return session_info_ != NULL ? *session_info_ : *default_instance_->session_info_;
}
inline ::SSDataDomain::SSSessionInfo* SetSessionInfoRequest::mutable_session_info() {
  _set_bit(1);
  if (session_info_ == NULL) session_info_ = new ::SSDataDomain::SSSessionInfo;
  return session_info_;
}

// -------------------------------------------------------------------

// SetSessionInfoResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool SetSessionInfoResponse::has_result() const {
  return _has_bit(0);
}
inline void SetSessionInfoResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& SetSessionInfoResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* SetSessionInfoResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// GetSessionInfoRequest

// required string userid = 1;
inline bool GetSessionInfoRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetSessionInfoRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetSessionInfoRequest::userid() const {
  return *userid_;
}
inline void GetSessionInfoRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetSessionInfoRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetSessionInfoRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSessionInfoRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// -------------------------------------------------------------------

// GetSessionInfoResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetSessionInfoResponse::has_result() const {
  return _has_bit(0);
}
inline void GetSessionInfoResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetSessionInfoResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetSessionInfoResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// optional .SSDataDomain.SSSessionInfo session_info = 2;
inline bool GetSessionInfoResponse::has_session_info() const {
  return _has_bit(1);
}
inline void GetSessionInfoResponse::clear_session_info() {
  if (session_info_ != NULL) session_info_->::SSDataDomain::SSSessionInfo::Clear();
  _clear_bit(1);
}
inline const ::SSDataDomain::SSSessionInfo& GetSessionInfoResponse::session_info() const {
  return session_info_ != NULL ? *session_info_ : *default_instance_->session_info_;
}
inline ::SSDataDomain::SSSessionInfo* GetSessionInfoResponse::mutable_session_info() {
  _set_bit(1);
  if (session_info_ == NULL) session_info_ = new ::SSDataDomain::SSSessionInfo;
  return session_info_;
}

// -------------------------------------------------------------------

// GetMessageRequest

// required string userid = 1;
inline bool GetMessageRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetMessageRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetMessageRequest::userid() const {
  return *userid_;
}
inline void GetMessageRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetMessageRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetMessageRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetMessageRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// required .SSDataDomain.SSBOX source_box = 2;
inline bool GetMessageRequest::has_source_box() const {
  return _has_bit(1);
}
inline void GetMessageRequest::clear_source_box() {
  source_box_ = 0;
  _clear_bit(1);
}
inline SSDataDomain::SSBOX GetMessageRequest::source_box() const {
  return static_cast< SSDataDomain::SSBOX >(source_box_);
}
inline void GetMessageRequest::set_source_box(SSDataDomain::SSBOX value) {
  GOOGLE_DCHECK(SSDataDomain::SSBOX_IsValid(value));
  _set_bit(1);
  source_box_ = value;
}

// optional string cursor_id = 3;
inline bool GetMessageRequest::has_cursor_id() const {
  return _has_bit(2);
}
inline void GetMessageRequest::clear_cursor_id() {
  if (cursor_id_ != &_default_cursor_id_) {
    cursor_id_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& GetMessageRequest::cursor_id() const {
  return *cursor_id_;
}
inline void GetMessageRequest::set_cursor_id(const ::std::string& value) {
  _set_bit(2);
  if (cursor_id_ == &_default_cursor_id_) {
    cursor_id_ = new ::std::string;
  }
  cursor_id_->assign(value);
}
inline void GetMessageRequest::set_cursor_id(const char* value) {
  _set_bit(2);
  if (cursor_id_ == &_default_cursor_id_) {
    cursor_id_ = new ::std::string;
  }
  cursor_id_->assign(value);
}
inline void GetMessageRequest::set_cursor_id(const char* value, size_t size) {
  _set_bit(2);
  if (cursor_id_ == &_default_cursor_id_) {
    cursor_id_ = new ::std::string;
  }
  cursor_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetMessageRequest::mutable_cursor_id() {
  _set_bit(2);
  if (cursor_id_ == &_default_cursor_id_) {
    cursor_id_ = new ::std::string;
  }
  return cursor_id_;
}

// optional int32 count = 4 [default = 100];
inline bool GetMessageRequest::has_count() const {
  return _has_bit(3);
}
inline void GetMessageRequest::clear_count() {
  count_ = 100;
  _clear_bit(3);
}
inline ::google::protobuf::int32 GetMessageRequest::count() const {
  return count_;
}
inline void GetMessageRequest::set_count(::google::protobuf::int32 value) {
  _set_bit(3);
  count_ = value;
}

// -------------------------------------------------------------------

// GetMessageResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetMessageResponse::has_result() const {
  return _has_bit(0);
}
inline void GetMessageResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetMessageResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetMessageResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated .SSDataDomain.SSMessage msg_list = 2;
inline int GetMessageResponse::msg_list_size() const {
  return msg_list_.size();
}
inline void GetMessageResponse::clear_msg_list() {
  msg_list_.Clear();
}
inline const ::SSDataDomain::SSMessage& GetMessageResponse::msg_list(int index) const {
  return msg_list_.Get(index);
}
inline ::SSDataDomain::SSMessage* GetMessageResponse::mutable_msg_list(int index) {
  return msg_list_.Mutable(index);
}
inline ::SSDataDomain::SSMessage* GetMessageResponse::add_msg_list() {
  return msg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessage >&
GetMessageResponse::msg_list() const {
  return msg_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessage >*
GetMessageResponse::mutable_msg_list() {
  return &msg_list_;
}

// optional bool eol = 3 [default = false];
inline bool GetMessageResponse::has_eol() const {
  return _has_bit(2);
}
inline void GetMessageResponse::clear_eol() {
  eol_ = false;
  _clear_bit(2);
}
inline bool GetMessageResponse::eol() const {
  return eol_;
}
inline void GetMessageResponse::set_eol(bool value) {
  _set_bit(2);
  eol_ = value;
}

// -------------------------------------------------------------------

// GetMessageByTimestampRequest

// required string userid = 1;
inline bool GetMessageByTimestampRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetMessageByTimestampRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetMessageByTimestampRequest::userid() const {
  return *userid_;
}
inline void GetMessageByTimestampRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetMessageByTimestampRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetMessageByTimestampRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetMessageByTimestampRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// required .SSDataDomain.SSBOX source_box = 2;
inline bool GetMessageByTimestampRequest::has_source_box() const {
  return _has_bit(1);
}
inline void GetMessageByTimestampRequest::clear_source_box() {
  source_box_ = 0;
  _clear_bit(1);
}
inline SSDataDomain::SSBOX GetMessageByTimestampRequest::source_box() const {
  return static_cast< SSDataDomain::SSBOX >(source_box_);
}
inline void GetMessageByTimestampRequest::set_source_box(SSDataDomain::SSBOX value) {
  GOOGLE_DCHECK(SSDataDomain::SSBOX_IsValid(value));
  _set_bit(1);
  source_box_ = value;
}

// optional int64 start_timestamp = 3;
inline bool GetMessageByTimestampRequest::has_start_timestamp() const {
  return _has_bit(2);
}
inline void GetMessageByTimestampRequest::clear_start_timestamp() {
  start_timestamp_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 GetMessageByTimestampRequest::start_timestamp() const {
  return start_timestamp_;
}
inline void GetMessageByTimestampRequest::set_start_timestamp(::google::protobuf::int64 value) {
  _set_bit(2);
  start_timestamp_ = value;
}

// optional int64 end_timestamp = 4;
inline bool GetMessageByTimestampRequest::has_end_timestamp() const {
  return _has_bit(3);
}
inline void GetMessageByTimestampRequest::clear_end_timestamp() {
  end_timestamp_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 GetMessageByTimestampRequest::end_timestamp() const {
  return end_timestamp_;
}
inline void GetMessageByTimestampRequest::set_end_timestamp(::google::protobuf::int64 value) {
  _set_bit(3);
  end_timestamp_ = value;
}

// optional int32 count = 5 [default = 100];
inline bool GetMessageByTimestampRequest::has_count() const {
  return _has_bit(4);
}
inline void GetMessageByTimestampRequest::clear_count() {
  count_ = 100;
  _clear_bit(4);
}
inline ::google::protobuf::int32 GetMessageByTimestampRequest::count() const {
  return count_;
}
inline void GetMessageByTimestampRequest::set_count(::google::protobuf::int32 value) {
  _set_bit(4);
  count_ = value;
}

// -------------------------------------------------------------------

// GetMessageByTimestampResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetMessageByTimestampResponse::has_result() const {
  return _has_bit(0);
}
inline void GetMessageByTimestampResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetMessageByTimestampResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetMessageByTimestampResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated .SSDataDomain.SSMessage msg_list = 2;
inline int GetMessageByTimestampResponse::msg_list_size() const {
  return msg_list_.size();
}
inline void GetMessageByTimestampResponse::clear_msg_list() {
  msg_list_.Clear();
}
inline const ::SSDataDomain::SSMessage& GetMessageByTimestampResponse::msg_list(int index) const {
  return msg_list_.Get(index);
}
inline ::SSDataDomain::SSMessage* GetMessageByTimestampResponse::mutable_msg_list(int index) {
  return msg_list_.Mutable(index);
}
inline ::SSDataDomain::SSMessage* GetMessageByTimestampResponse::add_msg_list() {
  return msg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessage >&
GetMessageByTimestampResponse::msg_list() const {
  return msg_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMessage >*
GetMessageByTimestampResponse::mutable_msg_list() {
  return &msg_list_;
}

// -------------------------------------------------------------------

// SendPublicMessageRequest

// required .SSDataDomain.SSMessage msg = 1;
inline bool SendPublicMessageRequest::has_msg() const {
  return _has_bit(0);
}
inline void SendPublicMessageRequest::clear_msg() {
  if (msg_ != NULL) msg_->::SSDataDomain::SSMessage::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::SSMessage& SendPublicMessageRequest::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::SSDataDomain::SSMessage* SendPublicMessageRequest::mutable_msg() {
  _set_bit(0);
  if (msg_ == NULL) msg_ = new ::SSDataDomain::SSMessage;
  return msg_;
}

// -------------------------------------------------------------------

// SendPublicMessageResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool SendPublicMessageResponse::has_result() const {
  return _has_bit(0);
}
inline void SendPublicMessageResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& SendPublicMessageResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* SendPublicMessageResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// required string msgid = 2;
inline bool SendPublicMessageResponse::has_msgid() const {
  return _has_bit(1);
}
inline void SendPublicMessageResponse::clear_msgid() {
  if (msgid_ != &_default_msgid_) {
    msgid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SendPublicMessageResponse::msgid() const {
  return *msgid_;
}
inline void SendPublicMessageResponse::set_msgid(const ::std::string& value) {
  _set_bit(1);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(value);
}
inline void SendPublicMessageResponse::set_msgid(const char* value) {
  _set_bit(1);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(value);
}
inline void SendPublicMessageResponse::set_msgid(const char* value, size_t size) {
  _set_bit(1);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendPublicMessageResponse::mutable_msgid() {
  _set_bit(1);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  return msgid_;
}

// -------------------------------------------------------------------

// SendMessageRequest

// required .SSDataDomain.SSMessage msg = 1;
inline bool SendMessageRequest::has_msg() const {
  return _has_bit(0);
}
inline void SendMessageRequest::clear_msg() {
  if (msg_ != NULL) msg_->::SSDataDomain::SSMessage::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::SSMessage& SendMessageRequest::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::SSDataDomain::SSMessage* SendMessageRequest::mutable_msg() {
  _set_bit(0);
  if (msg_ == NULL) msg_ = new ::SSDataDomain::SSMessage;
  return msg_;
}

// -------------------------------------------------------------------

// SendMessageResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool SendMessageResponse::has_result() const {
  return _has_bit(0);
}
inline void SendMessageResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& SendMessageResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* SendMessageResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// required string msgid = 2;
inline bool SendMessageResponse::has_msgid() const {
  return _has_bit(1);
}
inline void SendMessageResponse::clear_msgid() {
  if (msgid_ != &_default_msgid_) {
    msgid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SendMessageResponse::msgid() const {
  return *msgid_;
}
inline void SendMessageResponse::set_msgid(const ::std::string& value) {
  _set_bit(1);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(value);
}
inline void SendMessageResponse::set_msgid(const char* value) {
  _set_bit(1);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(value);
}
inline void SendMessageResponse::set_msgid(const char* value, size_t size) {
  _set_bit(1);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendMessageResponse::mutable_msgid() {
  _set_bit(1);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  return msgid_;
}

// -------------------------------------------------------------------

// AddFavoriteMessageRequest

// required .SSDataDomain.SSMessage msg = 1;
inline bool AddFavoriteMessageRequest::has_msg() const {
  return _has_bit(0);
}
inline void AddFavoriteMessageRequest::clear_msg() {
  if (msg_ != NULL) msg_->::SSDataDomain::SSMessage::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::SSMessage& AddFavoriteMessageRequest::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::SSDataDomain::SSMessage* AddFavoriteMessageRequest::mutable_msg() {
  _set_bit(0);
  if (msg_ == NULL) msg_ = new ::SSDataDomain::SSMessage;
  return msg_;
}

// -------------------------------------------------------------------

// AddFavoriteMessageResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool AddFavoriteMessageResponse::has_result() const {
  return _has_bit(0);
}
inline void AddFavoriteMessageResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& AddFavoriteMessageResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* AddFavoriteMessageResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// required string msgid = 2;
inline bool AddFavoriteMessageResponse::has_msgid() const {
  return _has_bit(1);
}
inline void AddFavoriteMessageResponse::clear_msgid() {
  if (msgid_ != &_default_msgid_) {
    msgid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& AddFavoriteMessageResponse::msgid() const {
  return *msgid_;
}
inline void AddFavoriteMessageResponse::set_msgid(const ::std::string& value) {
  _set_bit(1);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(value);
}
inline void AddFavoriteMessageResponse::set_msgid(const char* value) {
  _set_bit(1);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(value);
}
inline void AddFavoriteMessageResponse::set_msgid(const char* value, size_t size) {
  _set_bit(1);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddFavoriteMessageResponse::mutable_msgid() {
  _set_bit(1);
  if (msgid_ == &_default_msgid_) {
    msgid_ = new ::std::string;
  }
  return msgid_;
}

// -------------------------------------------------------------------

// AddContactRequest

// required string userid = 1;
inline bool AddContactRequest::has_userid() const {
  return _has_bit(0);
}
inline void AddContactRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& AddContactRequest::userid() const {
  return *userid_;
}
inline void AddContactRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void AddContactRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void AddContactRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddContactRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// repeated .SSDataDomain.SSContact contact_list = 2;
inline int AddContactRequest::contact_list_size() const {
  return contact_list_.size();
}
inline void AddContactRequest::clear_contact_list() {
  contact_list_.Clear();
}
inline const ::SSDataDomain::SSContact& AddContactRequest::contact_list(int index) const {
  return contact_list_.Get(index);
}
inline ::SSDataDomain::SSContact* AddContactRequest::mutable_contact_list(int index) {
  return contact_list_.Mutable(index);
}
inline ::SSDataDomain::SSContact* AddContactRequest::add_contact_list() {
  return contact_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContact >&
AddContactRequest::contact_list() const {
  return contact_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContact >*
AddContactRequest::mutable_contact_list() {
  return &contact_list_;
}

// -------------------------------------------------------------------

// AddContactResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool AddContactResponse::has_result() const {
  return _has_bit(0);
}
inline void AddContactResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& AddContactResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* AddContactResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// RemoveContactRequest

// required string userid = 1;
inline bool RemoveContactRequest::has_userid() const {
  return _has_bit(0);
}
inline void RemoveContactRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RemoveContactRequest::userid() const {
  return *userid_;
}
inline void RemoveContactRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void RemoveContactRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void RemoveContactRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveContactRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// repeated string contactid_list = 2;
inline int RemoveContactRequest::contactid_list_size() const {
  return contactid_list_.size();
}
inline void RemoveContactRequest::clear_contactid_list() {
  contactid_list_.Clear();
}
inline const ::std::string& RemoveContactRequest::contactid_list(int index) const {
  return contactid_list_.Get(index);
}
inline ::std::string* RemoveContactRequest::mutable_contactid_list(int index) {
  return contactid_list_.Mutable(index);
}
inline void RemoveContactRequest::set_contactid_list(int index, const ::std::string& value) {
  contactid_list_.Mutable(index)->assign(value);
}
inline void RemoveContactRequest::set_contactid_list(int index, const char* value) {
  contactid_list_.Mutable(index)->assign(value);
}
inline void RemoveContactRequest::set_contactid_list(int index, const char* value, size_t size) {
  contactid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveContactRequest::add_contactid_list() {
  return contactid_list_.Add();
}
inline void RemoveContactRequest::add_contactid_list(const ::std::string& value) {
  contactid_list_.Add()->assign(value);
}
inline void RemoveContactRequest::add_contactid_list(const char* value) {
  contactid_list_.Add()->assign(value);
}
inline void RemoveContactRequest::add_contactid_list(const char* value, size_t size) {
  contactid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RemoveContactRequest::contactid_list() const {
  return contactid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RemoveContactRequest::mutable_contactid_list() {
  return &contactid_list_;
}

// -------------------------------------------------------------------

// RemoveContactResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool RemoveContactResponse::has_result() const {
  return _has_bit(0);
}
inline void RemoveContactResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& RemoveContactResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* RemoveContactResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// GetContactRequest

// required string userid = 1;
inline bool GetContactRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetContactRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetContactRequest::userid() const {
  return *userid_;
}
inline void GetContactRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetContactRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetContactRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetContactRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// -------------------------------------------------------------------

// GetContactResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetContactResponse::has_result() const {
  return _has_bit(0);
}
inline void GetContactResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetContactResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetContactResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated .SSDataDomain.SSContact contact_list = 2;
inline int GetContactResponse::contact_list_size() const {
  return contact_list_.size();
}
inline void GetContactResponse::clear_contact_list() {
  contact_list_.Clear();
}
inline const ::SSDataDomain::SSContact& GetContactResponse::contact_list(int index) const {
  return contact_list_.Get(index);
}
inline ::SSDataDomain::SSContact* GetContactResponse::mutable_contact_list(int index) {
  return contact_list_.Mutable(index);
}
inline ::SSDataDomain::SSContact* GetContactResponse::add_contact_list() {
  return contact_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContact >&
GetContactResponse::contact_list() const {
  return contact_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContact >*
GetContactResponse::mutable_contact_list() {
  return &contact_list_;
}

// -------------------------------------------------------------------

// AddGroupRequest

// required string userid = 1;
inline bool AddGroupRequest::has_userid() const {
  return _has_bit(0);
}
inline void AddGroupRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& AddGroupRequest::userid() const {
  return *userid_;
}
inline void AddGroupRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void AddGroupRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void AddGroupRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddGroupRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// repeated .SSDataDomain.SSGroup group_list = 2;
inline int AddGroupRequest::group_list_size() const {
  return group_list_.size();
}
inline void AddGroupRequest::clear_group_list() {
  group_list_.Clear();
}
inline const ::SSDataDomain::SSGroup& AddGroupRequest::group_list(int index) const {
  return group_list_.Get(index);
}
inline ::SSDataDomain::SSGroup* AddGroupRequest::mutable_group_list(int index) {
  return group_list_.Mutable(index);
}
inline ::SSDataDomain::SSGroup* AddGroupRequest::add_group_list() {
  return group_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSGroup >&
AddGroupRequest::group_list() const {
  return group_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSGroup >*
AddGroupRequest::mutable_group_list() {
  return &group_list_;
}

// -------------------------------------------------------------------

// AddGroupResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool AddGroupResponse::has_result() const {
  return _has_bit(0);
}
inline void AddGroupResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& AddGroupResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* AddGroupResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// RemoveGroupRequest

// required string userid = 1;
inline bool RemoveGroupRequest::has_userid() const {
  return _has_bit(0);
}
inline void RemoveGroupRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RemoveGroupRequest::userid() const {
  return *userid_;
}
inline void RemoveGroupRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void RemoveGroupRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void RemoveGroupRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveGroupRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// repeated string groupid_list = 2;
inline int RemoveGroupRequest::groupid_list_size() const {
  return groupid_list_.size();
}
inline void RemoveGroupRequest::clear_groupid_list() {
  groupid_list_.Clear();
}
inline const ::std::string& RemoveGroupRequest::groupid_list(int index) const {
  return groupid_list_.Get(index);
}
inline ::std::string* RemoveGroupRequest::mutable_groupid_list(int index) {
  return groupid_list_.Mutable(index);
}
inline void RemoveGroupRequest::set_groupid_list(int index, const ::std::string& value) {
  groupid_list_.Mutable(index)->assign(value);
}
inline void RemoveGroupRequest::set_groupid_list(int index, const char* value) {
  groupid_list_.Mutable(index)->assign(value);
}
inline void RemoveGroupRequest::set_groupid_list(int index, const char* value, size_t size) {
  groupid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveGroupRequest::add_groupid_list() {
  return groupid_list_.Add();
}
inline void RemoveGroupRequest::add_groupid_list(const ::std::string& value) {
  groupid_list_.Add()->assign(value);
}
inline void RemoveGroupRequest::add_groupid_list(const char* value) {
  groupid_list_.Add()->assign(value);
}
inline void RemoveGroupRequest::add_groupid_list(const char* value, size_t size) {
  groupid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RemoveGroupRequest::groupid_list() const {
  return groupid_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RemoveGroupRequest::mutable_groupid_list() {
  return &groupid_list_;
}

// -------------------------------------------------------------------

// RemoveGroupResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool RemoveGroupResponse::has_result() const {
  return _has_bit(0);
}
inline void RemoveGroupResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& RemoveGroupResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* RemoveGroupResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// GetGroupRequest

// required string userid = 1;
inline bool GetGroupRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetGroupRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetGroupRequest::userid() const {
  return *userid_;
}
inline void GetGroupRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetGroupRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetGroupRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetGroupRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// -------------------------------------------------------------------

// GetGroupResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetGroupResponse::has_result() const {
  return _has_bit(0);
}
inline void GetGroupResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetGroupResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetGroupResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated .SSDataDomain.SSGroup group_list = 2;
inline int GetGroupResponse::group_list_size() const {
  return group_list_.size();
}
inline void GetGroupResponse::clear_group_list() {
  group_list_.Clear();
}
inline const ::SSDataDomain::SSGroup& GetGroupResponse::group_list(int index) const {
  return group_list_.Get(index);
}
inline ::SSDataDomain::SSGroup* GetGroupResponse::mutable_group_list(int index) {
  return group_list_.Mutable(index);
}
inline ::SSDataDomain::SSGroup* GetGroupResponse::add_group_list() {
  return group_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSGroup >&
GetGroupResponse::group_list() const {
  return group_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSGroup >*
GetGroupResponse::mutable_group_list() {
  return &group_list_;
}

// -------------------------------------------------------------------

// AddMemberRequest

// required string userid = 1;
inline bool AddMemberRequest::has_userid() const {
  return _has_bit(0);
}
inline void AddMemberRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& AddMemberRequest::userid() const {
  return *userid_;
}
inline void AddMemberRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void AddMemberRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void AddMemberRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddMemberRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// repeated .SSDataDomain.SSMember member_list = 2;
inline int AddMemberRequest::member_list_size() const {
  return member_list_.size();
}
inline void AddMemberRequest::clear_member_list() {
  member_list_.Clear();
}
inline const ::SSDataDomain::SSMember& AddMemberRequest::member_list(int index) const {
  return member_list_.Get(index);
}
inline ::SSDataDomain::SSMember* AddMemberRequest::mutable_member_list(int index) {
  return member_list_.Mutable(index);
}
inline ::SSDataDomain::SSMember* AddMemberRequest::add_member_list() {
  return member_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember >&
AddMemberRequest::member_list() const {
  return member_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember >*
AddMemberRequest::mutable_member_list() {
  return &member_list_;
}

// -------------------------------------------------------------------

// AddMemberResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool AddMemberResponse::has_result() const {
  return _has_bit(0);
}
inline void AddMemberResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& AddMemberResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* AddMemberResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// RemoveMemberRequest

// required string userid = 1;
inline bool RemoveMemberRequest::has_userid() const {
  return _has_bit(0);
}
inline void RemoveMemberRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RemoveMemberRequest::userid() const {
  return *userid_;
}
inline void RemoveMemberRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void RemoveMemberRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void RemoveMemberRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveMemberRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// repeated .SSDataDomain.SSMember member_list = 2;
inline int RemoveMemberRequest::member_list_size() const {
  return member_list_.size();
}
inline void RemoveMemberRequest::clear_member_list() {
  member_list_.Clear();
}
inline const ::SSDataDomain::SSMember& RemoveMemberRequest::member_list(int index) const {
  return member_list_.Get(index);
}
inline ::SSDataDomain::SSMember* RemoveMemberRequest::mutable_member_list(int index) {
  return member_list_.Mutable(index);
}
inline ::SSDataDomain::SSMember* RemoveMemberRequest::add_member_list() {
  return member_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember >&
RemoveMemberRequest::member_list() const {
  return member_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember >*
RemoveMemberRequest::mutable_member_list() {
  return &member_list_;
}

// -------------------------------------------------------------------

// RemoveMemberResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool RemoveMemberResponse::has_result() const {
  return _has_bit(0);
}
inline void RemoveMemberResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& RemoveMemberResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* RemoveMemberResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// GetMemberRequest

// required string userid = 1;
inline bool GetMemberRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetMemberRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetMemberRequest::userid() const {
  return *userid_;
}
inline void GetMemberRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetMemberRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetMemberRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetMemberRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// -------------------------------------------------------------------

// GetMemberResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetMemberResponse::has_result() const {
  return _has_bit(0);
}
inline void GetMemberResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetMemberResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetMemberResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated .SSDataDomain.SSMember member_list = 2;
inline int GetMemberResponse::member_list_size() const {
  return member_list_.size();
}
inline void GetMemberResponse::clear_member_list() {
  member_list_.Clear();
}
inline const ::SSDataDomain::SSMember& GetMemberResponse::member_list(int index) const {
  return member_list_.Get(index);
}
inline ::SSDataDomain::SSMember* GetMemberResponse::mutable_member_list(int index) {
  return member_list_.Mutable(index);
}
inline ::SSDataDomain::SSMember* GetMemberResponse::add_member_list() {
  return member_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember >&
GetMemberResponse::member_list() const {
  return member_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSMember >*
GetMemberResponse::mutable_member_list() {
  return &member_list_;
}

// -------------------------------------------------------------------

// QueryAndUpdateRequest

// required string key = 1;
inline bool QueryAndUpdateRequest::has_key() const {
  return _has_bit(0);
}
inline void QueryAndUpdateRequest::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& QueryAndUpdateRequest::key() const {
  return *key_;
}
inline void QueryAndUpdateRequest::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void QueryAndUpdateRequest::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void QueryAndUpdateRequest::set_key(const char* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryAndUpdateRequest::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// optional bytes update_value = 2;
inline bool QueryAndUpdateRequest::has_update_value() const {
  return _has_bit(1);
}
inline void QueryAndUpdateRequest::clear_update_value() {
  if (update_value_ != &_default_update_value_) {
    update_value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& QueryAndUpdateRequest::update_value() const {
  return *update_value_;
}
inline void QueryAndUpdateRequest::set_update_value(const ::std::string& value) {
  _set_bit(1);
  if (update_value_ == &_default_update_value_) {
    update_value_ = new ::std::string;
  }
  update_value_->assign(value);
}
inline void QueryAndUpdateRequest::set_update_value(const char* value) {
  _set_bit(1);
  if (update_value_ == &_default_update_value_) {
    update_value_ = new ::std::string;
  }
  update_value_->assign(value);
}
inline void QueryAndUpdateRequest::set_update_value(const void* value, size_t size) {
  _set_bit(1);
  if (update_value_ == &_default_update_value_) {
    update_value_ = new ::std::string;
  }
  update_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryAndUpdateRequest::mutable_update_value() {
  _set_bit(1);
  if (update_value_ == &_default_update_value_) {
    update_value_ = new ::std::string;
  }
  return update_value_;
}

// optional bool is_update = 3 [default = false];
inline bool QueryAndUpdateRequest::has_is_update() const {
  return _has_bit(2);
}
inline void QueryAndUpdateRequest::clear_is_update() {
  is_update_ = false;
  _clear_bit(2);
}
inline bool QueryAndUpdateRequest::is_update() const {
  return is_update_;
}
inline void QueryAndUpdateRequest::set_is_update(bool value) {
  _set_bit(2);
  is_update_ = value;
}

// optional int32 consistency_level = 4;
inline bool QueryAndUpdateRequest::has_consistency_level() const {
  return _has_bit(3);
}
inline void QueryAndUpdateRequest::clear_consistency_level() {
  consistency_level_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 QueryAndUpdateRequest::consistency_level() const {
  return consistency_level_;
}
inline void QueryAndUpdateRequest::set_consistency_level(::google::protobuf::int32 value) {
  _set_bit(3);
  consistency_level_ = value;
}

// -------------------------------------------------------------------

// QueryAndUpdateResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool QueryAndUpdateResponse::has_result() const {
  return _has_bit(0);
}
inline void QueryAndUpdateResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& QueryAndUpdateResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* QueryAndUpdateResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// optional bytes value = 2;
inline bool QueryAndUpdateResponse::has_value() const {
  return _has_bit(1);
}
inline void QueryAndUpdateResponse::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& QueryAndUpdateResponse::value() const {
  return *value_;
}
inline void QueryAndUpdateResponse::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void QueryAndUpdateResponse::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void QueryAndUpdateResponse::set_value(const void* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryAndUpdateResponse::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// QueryAndDeleteRequest

// required string key = 1;
inline bool QueryAndDeleteRequest::has_key() const {
  return _has_bit(0);
}
inline void QueryAndDeleteRequest::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& QueryAndDeleteRequest::key() const {
  return *key_;
}
inline void QueryAndDeleteRequest::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void QueryAndDeleteRequest::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void QueryAndDeleteRequest::set_key(const char* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryAndDeleteRequest::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// -------------------------------------------------------------------

// QueryAndDeleteResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool QueryAndDeleteResponse::has_result() const {
  return _has_bit(0);
}
inline void QueryAndDeleteResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& QueryAndDeleteResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* QueryAndDeleteResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// optional bytes value = 2;
inline bool QueryAndDeleteResponse::has_value() const {
  return _has_bit(1);
}
inline void QueryAndDeleteResponse::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& QueryAndDeleteResponse::value() const {
  return *value_;
}
inline void QueryAndDeleteResponse::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void QueryAndDeleteResponse::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void QueryAndDeleteResponse::set_value(const void* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryAndDeleteResponse::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// AddLogicNodeSubscribeInfoRequest

// required string userid = 1;
inline bool AddLogicNodeSubscribeInfoRequest::has_userid() const {
  return _has_bit(0);
}
inline void AddLogicNodeSubscribeInfoRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& AddLogicNodeSubscribeInfoRequest::userid() const {
  return *userid_;
}
inline void AddLogicNodeSubscribeInfoRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void AddLogicNodeSubscribeInfoRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void AddLogicNodeSubscribeInfoRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddLogicNodeSubscribeInfoRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// repeated string logic_node_list = 2;
inline int AddLogicNodeSubscribeInfoRequest::logic_node_list_size() const {
  return logic_node_list_.size();
}
inline void AddLogicNodeSubscribeInfoRequest::clear_logic_node_list() {
  logic_node_list_.Clear();
}
inline const ::std::string& AddLogicNodeSubscribeInfoRequest::logic_node_list(int index) const {
  return logic_node_list_.Get(index);
}
inline ::std::string* AddLogicNodeSubscribeInfoRequest::mutable_logic_node_list(int index) {
  return logic_node_list_.Mutable(index);
}
inline void AddLogicNodeSubscribeInfoRequest::set_logic_node_list(int index, const ::std::string& value) {
  logic_node_list_.Mutable(index)->assign(value);
}
inline void AddLogicNodeSubscribeInfoRequest::set_logic_node_list(int index, const char* value) {
  logic_node_list_.Mutable(index)->assign(value);
}
inline void AddLogicNodeSubscribeInfoRequest::set_logic_node_list(int index, const char* value, size_t size) {
  logic_node_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddLogicNodeSubscribeInfoRequest::add_logic_node_list() {
  return logic_node_list_.Add();
}
inline void AddLogicNodeSubscribeInfoRequest::add_logic_node_list(const ::std::string& value) {
  logic_node_list_.Add()->assign(value);
}
inline void AddLogicNodeSubscribeInfoRequest::add_logic_node_list(const char* value) {
  logic_node_list_.Add()->assign(value);
}
inline void AddLogicNodeSubscribeInfoRequest::add_logic_node_list(const char* value, size_t size) {
  logic_node_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddLogicNodeSubscribeInfoRequest::logic_node_list() const {
  return logic_node_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddLogicNodeSubscribeInfoRequest::mutable_logic_node_list() {
  return &logic_node_list_;
}

// -------------------------------------------------------------------

// AddLogicNodeSubscribeInfoResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool AddLogicNodeSubscribeInfoResponse::has_result() const {
  return _has_bit(0);
}
inline void AddLogicNodeSubscribeInfoResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& AddLogicNodeSubscribeInfoResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* AddLogicNodeSubscribeInfoResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// RemoveLogicNodeSubscribeInfoRequest

// required string userid = 1;
inline bool RemoveLogicNodeSubscribeInfoRequest::has_userid() const {
  return _has_bit(0);
}
inline void RemoveLogicNodeSubscribeInfoRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RemoveLogicNodeSubscribeInfoRequest::userid() const {
  return *userid_;
}
inline void RemoveLogicNodeSubscribeInfoRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void RemoveLogicNodeSubscribeInfoRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void RemoveLogicNodeSubscribeInfoRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveLogicNodeSubscribeInfoRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// repeated string logic_node_list = 2;
inline int RemoveLogicNodeSubscribeInfoRequest::logic_node_list_size() const {
  return logic_node_list_.size();
}
inline void RemoveLogicNodeSubscribeInfoRequest::clear_logic_node_list() {
  logic_node_list_.Clear();
}
inline const ::std::string& RemoveLogicNodeSubscribeInfoRequest::logic_node_list(int index) const {
  return logic_node_list_.Get(index);
}
inline ::std::string* RemoveLogicNodeSubscribeInfoRequest::mutable_logic_node_list(int index) {
  return logic_node_list_.Mutable(index);
}
inline void RemoveLogicNodeSubscribeInfoRequest::set_logic_node_list(int index, const ::std::string& value) {
  logic_node_list_.Mutable(index)->assign(value);
}
inline void RemoveLogicNodeSubscribeInfoRequest::set_logic_node_list(int index, const char* value) {
  logic_node_list_.Mutable(index)->assign(value);
}
inline void RemoveLogicNodeSubscribeInfoRequest::set_logic_node_list(int index, const char* value, size_t size) {
  logic_node_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveLogicNodeSubscribeInfoRequest::add_logic_node_list() {
  return logic_node_list_.Add();
}
inline void RemoveLogicNodeSubscribeInfoRequest::add_logic_node_list(const ::std::string& value) {
  logic_node_list_.Add()->assign(value);
}
inline void RemoveLogicNodeSubscribeInfoRequest::add_logic_node_list(const char* value) {
  logic_node_list_.Add()->assign(value);
}
inline void RemoveLogicNodeSubscribeInfoRequest::add_logic_node_list(const char* value, size_t size) {
  logic_node_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RemoveLogicNodeSubscribeInfoRequest::logic_node_list() const {
  return logic_node_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RemoveLogicNodeSubscribeInfoRequest::mutable_logic_node_list() {
  return &logic_node_list_;
}

// -------------------------------------------------------------------

// RemoveLogicNodeSubscribeInfoResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool RemoveLogicNodeSubscribeInfoResponse::has_result() const {
  return _has_bit(0);
}
inline void RemoveLogicNodeSubscribeInfoResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& RemoveLogicNodeSubscribeInfoResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* RemoveLogicNodeSubscribeInfoResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// -------------------------------------------------------------------

// GetLogicNodeSubscribeInfoRequest

// required string userid = 1;
inline bool GetLogicNodeSubscribeInfoRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetLogicNodeSubscribeInfoRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetLogicNodeSubscribeInfoRequest::userid() const {
  return *userid_;
}
inline void GetLogicNodeSubscribeInfoRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetLogicNodeSubscribeInfoRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetLogicNodeSubscribeInfoRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetLogicNodeSubscribeInfoRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// -------------------------------------------------------------------

// GetLogicNodeSubscribeInfoResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetLogicNodeSubscribeInfoResponse::has_result() const {
  return _has_bit(0);
}
inline void GetLogicNodeSubscribeInfoResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetLogicNodeSubscribeInfoResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetLogicNodeSubscribeInfoResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated string logic_node_list = 2;
inline int GetLogicNodeSubscribeInfoResponse::logic_node_list_size() const {
  return logic_node_list_.size();
}
inline void GetLogicNodeSubscribeInfoResponse::clear_logic_node_list() {
  logic_node_list_.Clear();
}
inline const ::std::string& GetLogicNodeSubscribeInfoResponse::logic_node_list(int index) const {
  return logic_node_list_.Get(index);
}
inline ::std::string* GetLogicNodeSubscribeInfoResponse::mutable_logic_node_list(int index) {
  return logic_node_list_.Mutable(index);
}
inline void GetLogicNodeSubscribeInfoResponse::set_logic_node_list(int index, const ::std::string& value) {
  logic_node_list_.Mutable(index)->assign(value);
}
inline void GetLogicNodeSubscribeInfoResponse::set_logic_node_list(int index, const char* value) {
  logic_node_list_.Mutable(index)->assign(value);
}
inline void GetLogicNodeSubscribeInfoResponse::set_logic_node_list(int index, const char* value, size_t size) {
  logic_node_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetLogicNodeSubscribeInfoResponse::add_logic_node_list() {
  return logic_node_list_.Add();
}
inline void GetLogicNodeSubscribeInfoResponse::add_logic_node_list(const ::std::string& value) {
  logic_node_list_.Add()->assign(value);
}
inline void GetLogicNodeSubscribeInfoResponse::add_logic_node_list(const char* value) {
  logic_node_list_.Add()->assign(value);
}
inline void GetLogicNodeSubscribeInfoResponse::add_logic_node_list(const char* value, size_t size) {
  logic_node_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetLogicNodeSubscribeInfoResponse::logic_node_list() const {
  return logic_node_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetLogicNodeSubscribeInfoResponse::mutable_logic_node_list() {
  return &logic_node_list_;
}

// -------------------------------------------------------------------

// GetFollowerWithProfileRequest

// required string userid = 1;
inline bool GetFollowerWithProfileRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetFollowerWithProfileRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetFollowerWithProfileRequest::userid() const {
  return *userid_;
}
inline void GetFollowerWithProfileRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetFollowerWithProfileRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetFollowerWithProfileRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFollowerWithProfileRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// optional string cursor_id = 2;
inline bool GetFollowerWithProfileRequest::has_cursor_id() const {
  return _has_bit(1);
}
inline void GetFollowerWithProfileRequest::clear_cursor_id() {
  if (cursor_id_ != &_default_cursor_id_) {
    cursor_id_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& GetFollowerWithProfileRequest::cursor_id() const {
  return *cursor_id_;
}
inline void GetFollowerWithProfileRequest::set_cursor_id(const ::std::string& value) {
  _set_bit(1);
  if (cursor_id_ == &_default_cursor_id_) {
    cursor_id_ = new ::std::string;
  }
  cursor_id_->assign(value);
}
inline void GetFollowerWithProfileRequest::set_cursor_id(const char* value) {
  _set_bit(1);
  if (cursor_id_ == &_default_cursor_id_) {
    cursor_id_ = new ::std::string;
  }
  cursor_id_->assign(value);
}
inline void GetFollowerWithProfileRequest::set_cursor_id(const char* value, size_t size) {
  _set_bit(1);
  if (cursor_id_ == &_default_cursor_id_) {
    cursor_id_ = new ::std::string;
  }
  cursor_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFollowerWithProfileRequest::mutable_cursor_id() {
  _set_bit(1);
  if (cursor_id_ == &_default_cursor_id_) {
    cursor_id_ = new ::std::string;
  }
  return cursor_id_;
}

// optional int32 count = 3 [default = 100];
inline bool GetFollowerWithProfileRequest::has_count() const {
  return _has_bit(2);
}
inline void GetFollowerWithProfileRequest::clear_count() {
  count_ = 100;
  _clear_bit(2);
}
inline ::google::protobuf::int32 GetFollowerWithProfileRequest::count() const {
  return count_;
}
inline void GetFollowerWithProfileRequest::set_count(::google::protobuf::int32 value) {
  _set_bit(2);
  count_ = value;
}

// optional bool exclude_icon = 4 [default = true];
inline bool GetFollowerWithProfileRequest::has_exclude_icon() const {
  return _has_bit(3);
}
inline void GetFollowerWithProfileRequest::clear_exclude_icon() {
  exclude_icon_ = true;
  _clear_bit(3);
}
inline bool GetFollowerWithProfileRequest::exclude_icon() const {
  return exclude_icon_;
}
inline void GetFollowerWithProfileRequest::set_exclude_icon(bool value) {
  _set_bit(3);
  exclude_icon_ = value;
}

// -------------------------------------------------------------------

// GetFollowerWithProfileResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetFollowerWithProfileResponse::has_result() const {
  return _has_bit(0);
}
inline void GetFollowerWithProfileResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetFollowerWithProfileResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetFollowerWithProfileResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated .SSDataDomain.SSProfile follower_list = 2;
inline int GetFollowerWithProfileResponse::follower_list_size() const {
  return follower_list_.size();
}
inline void GetFollowerWithProfileResponse::clear_follower_list() {
  follower_list_.Clear();
}
inline const ::SSDataDomain::SSProfile& GetFollowerWithProfileResponse::follower_list(int index) const {
  return follower_list_.Get(index);
}
inline ::SSDataDomain::SSProfile* GetFollowerWithProfileResponse::mutable_follower_list(int index) {
  return follower_list_.Mutable(index);
}
inline ::SSDataDomain::SSProfile* GetFollowerWithProfileResponse::add_follower_list() {
  return follower_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile >&
GetFollowerWithProfileResponse::follower_list() const {
  return follower_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile >*
GetFollowerWithProfileResponse::mutable_follower_list() {
  return &follower_list_;
}

// optional bool eol = 3 [default = false];
inline bool GetFollowerWithProfileResponse::has_eol() const {
  return _has_bit(2);
}
inline void GetFollowerWithProfileResponse::clear_eol() {
  eol_ = false;
  _clear_bit(2);
}
inline bool GetFollowerWithProfileResponse::eol() const {
  return eol_;
}
inline void GetFollowerWithProfileResponse::set_eol(bool value) {
  _set_bit(2);
  eol_ = value;
}

// -------------------------------------------------------------------

// GetFollowingWithProfileRequest

// required string userid = 1;
inline bool GetFollowingWithProfileRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetFollowingWithProfileRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetFollowingWithProfileRequest::userid() const {
  return *userid_;
}
inline void GetFollowingWithProfileRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetFollowingWithProfileRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetFollowingWithProfileRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFollowingWithProfileRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// optional bool exclude_icon = 2 [default = true];
inline bool GetFollowingWithProfileRequest::has_exclude_icon() const {
  return _has_bit(1);
}
inline void GetFollowingWithProfileRequest::clear_exclude_icon() {
  exclude_icon_ = true;
  _clear_bit(1);
}
inline bool GetFollowingWithProfileRequest::exclude_icon() const {
  return exclude_icon_;
}
inline void GetFollowingWithProfileRequest::set_exclude_icon(bool value) {
  _set_bit(1);
  exclude_icon_ = value;
}

// -------------------------------------------------------------------

// GetFollowingWithProfileResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetFollowingWithProfileResponse::has_result() const {
  return _has_bit(0);
}
inline void GetFollowingWithProfileResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetFollowingWithProfileResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetFollowingWithProfileResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated .SSDataDomain.SSProfile following_list = 2;
inline int GetFollowingWithProfileResponse::following_list_size() const {
  return following_list_.size();
}
inline void GetFollowingWithProfileResponse::clear_following_list() {
  following_list_.Clear();
}
inline const ::SSDataDomain::SSProfile& GetFollowingWithProfileResponse::following_list(int index) const {
  return following_list_.Get(index);
}
inline ::SSDataDomain::SSProfile* GetFollowingWithProfileResponse::mutable_following_list(int index) {
  return following_list_.Mutable(index);
}
inline ::SSDataDomain::SSProfile* GetFollowingWithProfileResponse::add_following_list() {
  return following_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile >&
GetFollowingWithProfileResponse::following_list() const {
  return following_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSProfile >*
GetFollowingWithProfileResponse::mutable_following_list() {
  return &following_list_;
}

// -------------------------------------------------------------------

// GetContactExRequest

// required string userid = 1;
inline bool GetContactExRequest::has_userid() const {
  return _has_bit(0);
}
inline void GetContactExRequest::clear_userid() {
  if (userid_ != &_default_userid_) {
    userid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetContactExRequest::userid() const {
  return *userid_;
}
inline void GetContactExRequest::set_userid(const ::std::string& value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetContactExRequest::set_userid(const char* value) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void GetContactExRequest::set_userid(const char* value, size_t size) {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetContactExRequest::mutable_userid() {
  _set_bit(0);
  if (userid_ == &_default_userid_) {
    userid_ = new ::std::string;
  }
  return userid_;
}

// -------------------------------------------------------------------

// GetContactExResponse

// required .SSDataDomain.ServiceResult result = 1;
inline bool GetContactExResponse::has_result() const {
  return _has_bit(0);
}
inline void GetContactExResponse::clear_result() {
  if (result_ != NULL) result_->::SSDataDomain::ServiceResult::Clear();
  _clear_bit(0);
}
inline const ::SSDataDomain::ServiceResult& GetContactExResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::SSDataDomain::ServiceResult* GetContactExResponse::mutable_result() {
  _set_bit(0);
  if (result_ == NULL) result_ = new ::SSDataDomain::ServiceResult;
  return result_;
}

// repeated .SSDataDomain.SSContactEx contact_ex_list = 2;
inline int GetContactExResponse::contact_ex_list_size() const {
  return contact_ex_list_.size();
}
inline void GetContactExResponse::clear_contact_ex_list() {
  contact_ex_list_.Clear();
}
inline const ::SSDataDomain::SSContactEx& GetContactExResponse::contact_ex_list(int index) const {
  return contact_ex_list_.Get(index);
}
inline ::SSDataDomain::SSContactEx* GetContactExResponse::mutable_contact_ex_list(int index) {
  return contact_ex_list_.Mutable(index);
}
inline ::SSDataDomain::SSContactEx* GetContactExResponse::add_contact_ex_list() {
  return contact_ex_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContactEx >&
GetContactExResponse::contact_ex_list() const {
  return contact_ex_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSDataDomain::SSContactEx >*
GetContactExResponse::mutable_contact_ex_list() {
  return &contact_ex_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SSDataDomain

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< SSDataDomain::SSGender>() {
  return SSDataDomain::SSGender_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< SSDataDomain::SSBOX>() {
  return SSDataDomain::SSBOX_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< SSDataDomain::SSContentType>() {
  return SSDataDomain::SSContentType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< SSDataDomain::ServiceCode>() {
  return SSDataDomain::ServiceCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ssdatadomain_2eproto__INCLUDED
