// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nettyrpc.proto

#ifndef PROTOBUF_nettyrpc_2eproto__INCLUDED
#define PROTOBUF_nettyrpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace SSDataDomain {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_nettyrpc_2eproto();
void protobuf_AssignDesc_nettyrpc_2eproto();
void protobuf_ShutdownFile_nettyrpc_2eproto();

class RpcRequest;
class RpcResponse;

enum ErrorCode {
  BAD_REQUEST_DATA = 0,
  BAD_REQUEST_PROTO = 1,
  SERVICE_NOT_FOUND = 2,
  METHOD_NOT_FOUND = 3,
  RPC_ERROR = 4,
  RPC_FAILED = 5,
  INVALID_REQUEST_PROTO = 6,
  BAD_RESPONSE_PROTO = 7,
  UNKNOWN_HOST = 8,
  IO_ERROR = 9
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = BAD_REQUEST_DATA;
const ErrorCode ErrorCode_MAX = IO_ERROR;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class RpcRequest : public ::google::protobuf::Message {
 public:
  RpcRequest();
  virtual ~RpcRequest();
  
  RpcRequest(const RpcRequest& from);
  
  inline RpcRequest& operator=(const RpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcRequest& default_instance();
  
  void Swap(RpcRequest* other);
  
  // implements Message ----------------------------------------------
  
  RpcRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcRequest& from);
  void MergeFrom(const RpcRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string service_name = 2;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 2;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  
  // required string method_name = 3;
  inline bool has_method_name() const;
  inline void clear_method_name();
  static const int kMethodNameFieldNumber = 3;
  inline const ::std::string& method_name() const;
  inline void set_method_name(const ::std::string& value);
  inline void set_method_name(const char* value);
  inline void set_method_name(const char* value, size_t size);
  inline ::std::string* mutable_method_name();
  
  // required bool is_blocking_service = 4;
  inline bool has_is_blocking_service() const;
  inline void clear_is_blocking_service();
  static const int kIsBlockingServiceFieldNumber = 4;
  inline bool is_blocking_service() const;
  inline void set_is_blocking_service(bool value);
  
  // required bytes request_message = 5;
  inline bool has_request_message() const;
  inline void clear_request_message();
  static const int kRequestMessageFieldNumber = 5;
  inline const ::std::string& request_message() const;
  inline void set_request_message(const ::std::string& value);
  inline void set_request_message(const char* value);
  inline void set_request_message(const void* value, size_t size);
  inline ::std::string* mutable_request_message();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.RpcRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::std::string* service_name_;
  static const ::std::string _default_service_name_;
  ::std::string* method_name_;
  static const ::std::string _default_method_name_;
  bool is_blocking_service_;
  ::std::string* request_message_;
  static const ::std::string _default_request_message_;
  friend void  protobuf_AddDesc_nettyrpc_2eproto();
  friend void protobuf_AssignDesc_nettyrpc_2eproto();
  friend void protobuf_ShutdownFile_nettyrpc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RpcRequest* default_instance_;
};
// -------------------------------------------------------------------

class RpcResponse : public ::google::protobuf::Message {
 public:
  RpcResponse();
  virtual ~RpcResponse();
  
  RpcResponse(const RpcResponse& from);
  
  inline RpcResponse& operator=(const RpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResponse& default_instance();
  
  void Swap(RpcResponse* other);
  
  // implements Message ----------------------------------------------
  
  RpcResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcResponse& from);
  void MergeFrom(const RpcResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional bytes response_message = 2;
  inline bool has_response_message() const;
  inline void clear_response_message();
  static const int kResponseMessageFieldNumber = 2;
  inline const ::std::string& response_message() const;
  inline void set_response_message(const ::std::string& value);
  inline void set_response_message(const char* value);
  inline void set_response_message(const void* value, size_t size);
  inline ::std::string* mutable_response_message();
  
  // optional .SSDataDomain.ErrorCode error_code = 3;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  inline SSDataDomain::ErrorCode error_code() const;
  inline void set_error_code(SSDataDomain::ErrorCode value);
  
  // optional string error_message = 4;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 4;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  
  // @@protoc_insertion_point(class_scope:SSDataDomain.RpcResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::std::string* response_message_;
  static const ::std::string _default_response_message_;
  int error_code_;
  ::std::string* error_message_;
  static const ::std::string _default_error_message_;
  friend void  protobuf_AddDesc_nettyrpc_2eproto();
  friend void protobuf_AssignDesc_nettyrpc_2eproto();
  friend void protobuf_ShutdownFile_nettyrpc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RpcResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcRequest

// optional int32 id = 1;
inline bool RpcRequest::has_id() const {
  return _has_bit(0);
}
inline void RpcRequest::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RpcRequest::id() const {
  return id_;
}
inline void RpcRequest::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// required string service_name = 2;
inline bool RpcRequest::has_service_name() const {
  return _has_bit(1);
}
inline void RpcRequest::clear_service_name() {
  if (service_name_ != &_default_service_name_) {
    service_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RpcRequest::service_name() const {
  return *service_name_;
}
inline void RpcRequest::set_service_name(const ::std::string& value) {
  _set_bit(1);
  if (service_name_ == &_default_service_name_) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void RpcRequest::set_service_name(const char* value) {
  _set_bit(1);
  if (service_name_ == &_default_service_name_) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void RpcRequest::set_service_name(const char* value, size_t size) {
  _set_bit(1);
  if (service_name_ == &_default_service_name_) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequest::mutable_service_name() {
  _set_bit(1);
  if (service_name_ == &_default_service_name_) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}

// required string method_name = 3;
inline bool RpcRequest::has_method_name() const {
  return _has_bit(2);
}
inline void RpcRequest::clear_method_name() {
  if (method_name_ != &_default_method_name_) {
    method_name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RpcRequest::method_name() const {
  return *method_name_;
}
inline void RpcRequest::set_method_name(const ::std::string& value) {
  _set_bit(2);
  if (method_name_ == &_default_method_name_) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void RpcRequest::set_method_name(const char* value) {
  _set_bit(2);
  if (method_name_ == &_default_method_name_) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void RpcRequest::set_method_name(const char* value, size_t size) {
  _set_bit(2);
  if (method_name_ == &_default_method_name_) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequest::mutable_method_name() {
  _set_bit(2);
  if (method_name_ == &_default_method_name_) {
    method_name_ = new ::std::string;
  }
  return method_name_;
}

// required bool is_blocking_service = 4;
inline bool RpcRequest::has_is_blocking_service() const {
  return _has_bit(3);
}
inline void RpcRequest::clear_is_blocking_service() {
  is_blocking_service_ = false;
  _clear_bit(3);
}
inline bool RpcRequest::is_blocking_service() const {
  return is_blocking_service_;
}
inline void RpcRequest::set_is_blocking_service(bool value) {
  _set_bit(3);
  is_blocking_service_ = value;
}

// required bytes request_message = 5;
inline bool RpcRequest::has_request_message() const {
  return _has_bit(4);
}
inline void RpcRequest::clear_request_message() {
  if (request_message_ != &_default_request_message_) {
    request_message_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& RpcRequest::request_message() const {
  return *request_message_;
}
inline void RpcRequest::set_request_message(const ::std::string& value) {
  _set_bit(4);
  if (request_message_ == &_default_request_message_) {
    request_message_ = new ::std::string;
  }
  request_message_->assign(value);
}
inline void RpcRequest::set_request_message(const char* value) {
  _set_bit(4);
  if (request_message_ == &_default_request_message_) {
    request_message_ = new ::std::string;
  }
  request_message_->assign(value);
}
inline void RpcRequest::set_request_message(const void* value, size_t size) {
  _set_bit(4);
  if (request_message_ == &_default_request_message_) {
    request_message_ = new ::std::string;
  }
  request_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequest::mutable_request_message() {
  _set_bit(4);
  if (request_message_ == &_default_request_message_) {
    request_message_ = new ::std::string;
  }
  return request_message_;
}

// -------------------------------------------------------------------

// RpcResponse

// required int32 id = 1;
inline bool RpcResponse::has_id() const {
  return _has_bit(0);
}
inline void RpcResponse::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RpcResponse::id() const {
  return id_;
}
inline void RpcResponse::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// optional bytes response_message = 2;
inline bool RpcResponse::has_response_message() const {
  return _has_bit(1);
}
inline void RpcResponse::clear_response_message() {
  if (response_message_ != &_default_response_message_) {
    response_message_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RpcResponse::response_message() const {
  return *response_message_;
}
inline void RpcResponse::set_response_message(const ::std::string& value) {
  _set_bit(1);
  if (response_message_ == &_default_response_message_) {
    response_message_ = new ::std::string;
  }
  response_message_->assign(value);
}
inline void RpcResponse::set_response_message(const char* value) {
  _set_bit(1);
  if (response_message_ == &_default_response_message_) {
    response_message_ = new ::std::string;
  }
  response_message_->assign(value);
}
inline void RpcResponse::set_response_message(const void* value, size_t size) {
  _set_bit(1);
  if (response_message_ == &_default_response_message_) {
    response_message_ = new ::std::string;
  }
  response_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponse::mutable_response_message() {
  _set_bit(1);
  if (response_message_ == &_default_response_message_) {
    response_message_ = new ::std::string;
  }
  return response_message_;
}

// optional .SSDataDomain.ErrorCode error_code = 3;
inline bool RpcResponse::has_error_code() const {
  return _has_bit(2);
}
inline void RpcResponse::clear_error_code() {
  error_code_ = 0;
  _clear_bit(2);
}
inline SSDataDomain::ErrorCode RpcResponse::error_code() const {
  return static_cast< SSDataDomain::ErrorCode >(error_code_);
}
inline void RpcResponse::set_error_code(SSDataDomain::ErrorCode value) {
  GOOGLE_DCHECK(SSDataDomain::ErrorCode_IsValid(value));
  _set_bit(2);
  error_code_ = value;
}

// optional string error_message = 4;
inline bool RpcResponse::has_error_message() const {
  return _has_bit(3);
}
inline void RpcResponse::clear_error_message() {
  if (error_message_ != &_default_error_message_) {
    error_message_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RpcResponse::error_message() const {
  return *error_message_;
}
inline void RpcResponse::set_error_message(const ::std::string& value) {
  _set_bit(3);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void RpcResponse::set_error_message(const char* value) {
  _set_bit(3);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void RpcResponse::set_error_message(const char* value, size_t size) {
  _set_bit(3);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponse::mutable_error_message() {
  _set_bit(3);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SSDataDomain

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< SSDataDomain::ErrorCode>() {
  return SSDataDomain::ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nettyrpc_2eproto__INCLUDED
